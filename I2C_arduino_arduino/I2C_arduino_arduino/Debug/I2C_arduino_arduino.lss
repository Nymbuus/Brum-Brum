
I2C_arduino_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068b  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  00000fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_init>:
unsigned char i2c_read()
{
   TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA); // Ställer interupt-flaggan till 0 genom att skriva 1 till den. TWEN aktiverar I2C skrivning.
   while ((TWCR & (1 << TWINT)) == 0);	             // Kollar om läsning gått bra och TWDR fått all data.
   return TWDR;                                     // Returnerar data som en usigned char.
}
  80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  84:	82 e7       	ldi	r24, 0x72	; 114
  86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  8a:	08 95       	ret

0000008c <i2c_start>:
  8c:	84 ea       	ldi	r24, 0xA4	; 164
  8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  96:	88 23       	and	r24, r24
  98:	e4 f7       	brge	.-8      	; 0x92 <i2c_start+0x6>
  9a:	08 95       	ret

0000009c <i2c_stop>:
  9c:	84 e9       	ldi	r24, 0x94	; 148
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a2:	08 95       	ret

000000a4 <i2c_write>:
  a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <i2c_write+0xa>
  b6:	08 95       	ret

000000b8 <main>:
#include "i2c.h"

int main(void)
{
   PORTC |= ((1 << 4) | (1 << 5)); // Sätter PORTC4 och PORTC5 till utportar. PORTC4 är ihopkopplad med SDA porten och PORTC5 är ihopkopplad med SCL porten.
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	80 63       	ori	r24, 0x30	; 48
  bc:	88 b9       	out	0x08, r24	; 8
   i2c_init();				           // Initierar I2C kommunikation.
  be:	0e 94 40 00 	call	0x80	; 0x80 <i2c_init>
   i2c_start();		              // Start condition som skickas till Slave.
  c2:	0e 94 46 00 	call	0x8c	; 0x8c <i2c_start>
   i2c_write(0b00000010);		     // Adressen till Slave bit 7 till 1. bit 0 är skriv eller läs bit (Skriva = 0, Läsa = 1).
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 52 00 	call	0xa4	; 0xa4 <i2c_write>
   i2c_write(0x02);                // Data som skrivs till Slave. I detta fall 2 i decimalform.
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <i2c_write>
   i2c_stop();                     // Stop condition som skickas till Slave.
  d2:	0e 94 4e 00 	call	0x9c	; 0x9c <i2c_stop>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x1e>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
