
Elektronikprojekt_Integration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800100  00800100  00000fb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000167e  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da4  00000000  00000000  00002862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba5  00000000  00000000  00003606  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  000041ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e8  00000000  00000000  00004640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e71  00000000  00000000  00004e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005c99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_1>
   8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_2>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_13>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_16>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__divsf3_pse+0xe>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	e0 e4       	ldi	r30, 0x40	; 64
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 30       	cpi	r26, 0x00	; 0
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	ae 32       	cpi	r26, 0x2E	; 46
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
 120:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <adc_read>:
	{
		temp_readings += adc_read(pin);
	}
	
	return (temp_readings >> 2);
}
 128:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 12c:	87 ec       	ldi	r24, 0xC7	; 199
 12e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 132:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 136:	84 ff       	sbrs	r24, 4
 138:	fc cf       	rjmp	.-8      	; 0x132 <adc_read+0xa>
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 140:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 144:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 148:	08 95       	ret

0000014a <adc_read_avg_8>:
/********************************************************************************
* adc_read_avg_8: Performs eight AD-conversions on the desired pin and returns
*			      the result as an average value.
********************************************************************************/
uint16_t adc_read_avg_8(uint8_t pin)
{
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	d8 2f       	mov	r29, r24
	uint16_t temp_readings = 0;
	
	for (uint8_t i = 0; i < 8; i++)
 154:	c0 e0       	ldi	r28, 0x00	; 0
* adc_read_avg_8: Performs eight AD-conversions on the desired pin and returns
*			      the result as an average value.
********************************************************************************/
uint16_t adc_read_avg_8(uint8_t pin)
{
	uint16_t temp_readings = 0;
 156:	00 e0       	ldi	r16, 0x00	; 0
 158:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 8; i++)
 15a:	06 c0       	rjmp	.+12     	; 0x168 <adc_read_avg_8+0x1e>
	{
		temp_readings += adc_read(pin);
 15c:	8d 2f       	mov	r24, r29
 15e:	0e 94 94 00 	call	0x128	; 0x128 <adc_read>
 162:	08 0f       	add	r16, r24
 164:	19 1f       	adc	r17, r25
********************************************************************************/
uint16_t adc_read_avg_8(uint8_t pin)
{
	uint16_t temp_readings = 0;
	
	for (uint8_t i = 0; i < 8; i++)
 166:	cf 5f       	subi	r28, 0xFF	; 255
 168:	c8 30       	cpi	r28, 0x08	; 8
 16a:	c0 f3       	brcs	.-16     	; 0x15c <adc_read_avg_8+0x12>
	{
		temp_readings += adc_read(pin);
	}
	
	return (temp_readings >> 3);
}
 16c:	c8 01       	movw	r24, r16
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <adc_read_voltage>:
* adc_read_voltage: Performs eight AD-conversions on the desired pin and returns
*			        the result calculated into a voltage level.
********************************************************************************/
double adc_read_voltage(uint8_t pin)
{
	double voltage = ADC_RESOLUTION * adc_read_avg_8(pin);
 184:	0e 94 a5 00 	call	0x14a	; 0x14a <adc_read_avg_8>
 188:	bc 01       	movw	r22, r24
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatunsisf>
 192:	27 e1       	ldi	r18, 0x17	; 23
 194:	37 eb       	ldi	r19, 0xB7	; 183
 196:	41 e5       	ldi	r20, 0x51	; 81
 198:	5b e3       	ldi	r21, 0x3B	; 59
 19a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
	
	return voltage;
 19e:	08 95       	ret

000001a0 <ir_sensor_check_distance>:

/********************************************************************************
* ir_sensor_check_distance:
********************************************************************************/
double ir_sensor_check_distance(double val)
{
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	06 2f       	mov	r16, r22
 1aa:	17 2f       	mov	r17, r23
 1ac:	d8 2f       	mov	r29, r24
 1ae:	c9 2f       	mov	r28, r25
	if (val > DISTANCE_MAX)
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	48 e4       	ldi	r20, 0x48	; 72
 1b6:	52 e4       	ldi	r21, 0x42	; 66
 1b8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__gesf2>
 1bc:	18 16       	cp	r1, r24
 1be:	8c f0       	brlt	.+34     	; 0x1e2 <ir_sensor_check_distance+0x42>
	{
		val = (double)DISTANCE_MAX;
		return val;
	}
	else if (val < DISTANCE_MIN)
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e2       	ldi	r20, 0x20	; 32
 1c6:	51 e4       	ldi	r21, 0x41	; 65
 1c8:	60 2f       	mov	r22, r16
 1ca:	71 2f       	mov	r23, r17
 1cc:	8d 2f       	mov	r24, r29
 1ce:	9c 2f       	mov	r25, r28
 1d0:	0e 94 4f 04 	call	0x89e	; 0x89e <__cmpsf2>
 1d4:	88 23       	and	r24, r24
 1d6:	4c f4       	brge	.+18     	; 0x1ea <ir_sensor_check_distance+0x4a>
	{
		val = (double)DISTANCE_MIN;
		return val;
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	d0 e2       	ldi	r29, 0x20	; 32
 1de:	c1 e4       	ldi	r28, 0x41	; 65
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <ir_sensor_check_distance+0x4a>
double ir_sensor_check_distance(double val)
{
	if (val > DISTANCE_MAX)
	{
		val = (double)DISTANCE_MAX;
		return val;
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	d8 e4       	ldi	r29, 0x48	; 72
 1e8:	c2 e4       	ldi	r28, 0x42	; 66
	{
		val = (double)DISTANCE_MIN;
		return val;
	}
	else return val;
}
 1ea:	60 2f       	mov	r22, r16
 1ec:	71 2f       	mov	r23, r17
 1ee:	8d 2f       	mov	r24, r29
 1f0:	9c 2f       	mov	r25, r28
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <ir_sensor_get_distance_cm>:
/********************************************************************************
* ir_sensor_get_distance_cm:
********************************************************************************/
double ir_sensor_get_distance_cm(uint8_t pin)
{
	double distance_cm = 29.988 * pow(adc_read_voltage(pin), -1.173);
 1fc:	0e 94 c2 00 	call	0x184	; 0x184 <adc_read_voltage>
 200:	2d ed       	ldi	r18, 0xDD	; 221
 202:	34 e2       	ldi	r19, 0x24	; 36
 204:	46 e9       	ldi	r20, 0x96	; 150
 206:	5f eb       	ldi	r21, 0xBF	; 191
 208:	0e 94 19 06 	call	0xc32	; 0xc32 <pow>
 20c:	2d e6       	ldi	r18, 0x6D	; 109
 20e:	37 ee       	ldi	r19, 0xE7	; 231
 210:	4f ee       	ldi	r20, 0xEF	; 239
 212:	51 e4       	ldi	r21, 0x41	; 65
 214:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
	distance_cm = ir_sensor_check_distance(distance_cm);
 218:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ir_sensor_check_distance>

	return distance_cm;
}
 21c:	08 95       	ret

0000021e <ir_sensor_get_input_difference>:

/********************************************************************************
* ir_sensor_get_input_difference:
********************************************************************************/
double ir_sensor_get_input_difference(const uint8_t left_pin, const uint8_t right_pin)
{	
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	cf 93       	push	r28
 228:	c6 2f       	mov	r28, r22
	const double left_val = ir_sensor_get_distance_cm(left_pin);
 22a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ir_sensor_get_distance_cm>
 22e:	6b 01       	movw	r12, r22
 230:	7c 01       	movw	r14, r24
	const double right_val = ir_sensor_get_distance_cm(right_pin);
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ir_sensor_get_distance_cm>
 238:	9b 01       	movw	r18, r22
 23a:	ac 01       	movw	r20, r24
	
	return (left_val - right_val);
 23c:	c7 01       	movw	r24, r14
 23e:	b6 01       	movw	r22, r12
 240:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__subsf3>
}
 244:	cf 91       	pop	r28
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	08 95       	ret

00000250 <ir_sensor_get_servo_pid_input>:
/********************************************************************************
* ir_sensor_get_servo_pid_input:
********************************************************************************/
double ir_sensor_get_servo_pid_input(const uint8_t left_pin, const uint8_t right_pin)
{
	const double input_difference = ir_sensor_get_input_difference(left_pin, right_pin);
 250:	0e 94 0f 01 	call	0x21e	; 0x21e <ir_sensor_get_input_difference>
	const double scaled_input = ((input_difference + DISTANCE_MAX) / (2 * DISTANCE_MAX));
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	48 e4       	ldi	r20, 0x48	; 72
 25a:	52 e4       	ldi	r21, 0x42	; 66
 25c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	48 ec       	ldi	r20, 0xC8	; 200
 266:	52 e4       	ldi	r21, 0x42	; 66
 268:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divsf3>
	
	return (scaled_input * 180);
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	44 e3       	ldi	r20, 0x34	; 52
 272:	53 e4       	ldi	r21, 0x43	; 67
 274:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
}
 278:	08 95       	ret

0000027a <__vector_1>:

/********************************************************************************
* INT0_vect: Trigger condition: Rising edge PORTD2.
********************************************************************************/
ISR (INT0_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
	return;
}
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_2>:

/********************************************************************************
* INT1_vect: Trigger condition: Rising edge PORTD3.
********************************************************************************/
ISR (INT1_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
	return;
}
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_16>:

/********************************************************************************
* TIMER0_OVF_vect: Trigger condition: Executed every 255 us.
********************************************************************************/
ISR (TIMER0_OVF_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
	return;
}
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_13>:

/********************************************************************************
* TIMER1_OVF_vect: Trigger condition: Executed every 20 ms.
********************************************************************************/
ISR (TIMER1_OVF_vect)
{	
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
	return;
}
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <main>:
/********************************************************************************
* main:
********************************************************************************/
int main(void)
{
	setup();
 2ca:	0e 94 6f 03 	call	0x6de	; 0x6de <setup>
	pid_init(&servo_pid, SERVO_ANGLE_CENTER, SERVO_ANGLE_MIN, SERVO_ANGLE_MAX, 1, 0.1, 0.01);
 2ce:	8c e3       	ldi	r24, 0x3C	; 60
 2d0:	8f 93       	push	r24
 2d2:	83 e2       	ldi	r24, 0x23	; 35
 2d4:	8f 93       	push	r24
 2d6:	87 ed       	ldi	r24, 0xD7	; 215
 2d8:	8f 93       	push	r24
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	8f 93       	push	r24
 2de:	8d e3       	ldi	r24, 0x3D	; 61
 2e0:	8f 93       	push	r24
 2e2:	8c ec       	ldi	r24, 0xCC	; 204
 2e4:	8f 93       	push	r24
 2e6:	8f 93       	push	r24
 2e8:	8d ec       	ldi	r24, 0xCD	; 205
 2ea:	8f 93       	push	r24
 2ec:	0f 2e       	mov	r0, r31
 2ee:	81 2c       	mov	r8, r1
 2f0:	91 2c       	mov	r9, r1
 2f2:	f0 e8       	ldi	r31, 0x80	; 128
 2f4:	af 2e       	mov	r10, r31
 2f6:	ff e3       	ldi	r31, 0x3F	; 63
 2f8:	bf 2e       	mov	r11, r31
 2fa:	f0 2d       	mov	r31, r0
 2fc:	0f 2e       	mov	r0, r31
 2fe:	c1 2c       	mov	r12, r1
 300:	d1 2c       	mov	r13, r1
 302:	f4 e3       	ldi	r31, 0x34	; 52
 304:	ef 2e       	mov	r14, r31
 306:	f3 e4       	ldi	r31, 0x43	; 67
 308:	ff 2e       	mov	r15, r31
 30a:	f0 2d       	mov	r31, r0
 30c:	00 e0       	ldi	r16, 0x00	; 0
 30e:	10 e0       	ldi	r17, 0x00	; 0
 310:	98 01       	movw	r18, r16
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	64 eb       	ldi	r22, 0xB4	; 180
 318:	72 e4       	ldi	r23, 0x42	; 66
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 1a 02 	call	0x434	; 0x434 <pid_init>
 322:	8d b7       	in	r24, 0x3d	; 61
 324:	9e b7       	in	r25, 0x3e	; 62
 326:	08 96       	adiw	r24, 0x08	; 8
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	9e bf       	out	0x3e, r25	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	8d bf       	out	0x3d, r24	; 61

	while (true)
	{
		pid_regulate(&servo_pid, ir_sensor_get_servo_pid_input(SENSOR_LEFT_PIN, SENSOR_RIGHT_PIN));
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 28 01 	call	0x250	; 0x250 <ir_sensor_get_servo_pid_input>
 33a:	ab 01       	movw	r20, r22
 33c:	bc 01       	movw	r22, r24
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 a5 02 	call	0x54a	; 0x54a <pid_regulate>
		servo_set_angle((uint8_t)servo_pid.output);
 346:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 34a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 34e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 352:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 356:	0e 94 c6 04 	call	0x98c	; 0x98c <__fixunssfsi>
 35a:	86 2f       	mov	r24, r22
 35c:	0e 94 56 03 	call	0x6ac	; 0x6ac <servo_set_angle>
		motor_controller_run(ir_sensor_get_distance_cm(SENSOR_CENTER_PIN));
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ir_sensor_get_distance_cm>
 366:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <motor_controller_run>
 36a:	e3 cf       	rjmp	.-58     	; 0x332 <main+0x68>

0000036c <motor_controller_set_speed>:

	motor_controller_stop();
	current_direction = new_direction;
	
	return;
}
 36c:	89 32       	cpi	r24, 0x29	; 41
 36e:	08 f0       	brcs	.+2      	; 0x372 <motor_controller_set_speed+0x6>
 370:	88 e2       	ldi	r24, 0x28	; 40
 372:	9f ef       	ldi	r25, 0xFF	; 255
 374:	98 0f       	add	r25, r24
 376:	93 31       	cpi	r25, 0x13	; 19
 378:	08 f4       	brcc	.+2      	; 0x37c <motor_controller_set_speed+0x10>
 37a:	84 e1       	ldi	r24, 0x14	; 20
 37c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <current_direction>
 380:	91 11       	cpse	r25, r1
 382:	10 c0       	rjmp	.+32     	; 0x3a4 <motor_controller_set_speed+0x38>
 384:	68 2f       	mov	r22, r24
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatsisf>
 390:	23 e3       	ldi	r18, 0x33	; 51
 392:	33 e3       	ldi	r19, 0x33	; 51
 394:	43 e2       	ldi	r20, 0x23	; 35
 396:	50 e4       	ldi	r21, 0x40	; 64
 398:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 39c:	0e 94 c6 04 	call	0x98c	; 0x98c <__fixunssfsi>
 3a0:	67 bd       	out	0x27, r22	; 39
 3a2:	08 95       	ret
 3a4:	91 30       	cpi	r25, 0x01	; 1
 3a6:	79 f4       	brne	.+30     	; 0x3c6 <motor_controller_set_speed+0x5a>
 3a8:	68 2f       	mov	r22, r24
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatsisf>
 3b4:	23 e3       	ldi	r18, 0x33	; 51
 3b6:	33 e3       	ldi	r19, 0x33	; 51
 3b8:	43 e2       	ldi	r20, 0x23	; 35
 3ba:	50 e4       	ldi	r21, 0x40	; 64
 3bc:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 3c0:	0e 94 c6 04 	call	0x98c	; 0x98c <__fixunssfsi>
 3c4:	68 bd       	out	0x28, r22	; 40
 3c6:	08 95       	ret

000003c8 <motor_controller_stop>:
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 b6 01 	call	0x36c	; 0x36c <motor_controller_set_speed>
 3ce:	08 95       	ret

000003d0 <motor_controller_run>:

/********************************************************************************
* motor_controller_run:
*********************************************************************************/
void motor_controller_run(const double center_distance_cm)
{
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	6b 01       	movw	r12, r22
 3da:	7c 01       	movw	r14, r24
	if (center_distance_cm < 15) motor_controller_stop();
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	40 e7       	ldi	r20, 0x70	; 112
 3e2:	51 e4       	ldi	r21, 0x41	; 65
 3e4:	0e 94 4f 04 	call	0x89e	; 0x89e <__cmpsf2>
 3e8:	88 23       	and	r24, r24
 3ea:	14 f4       	brge	.+4      	; 0x3f0 <motor_controller_run+0x20>
 3ec:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <motor_controller_stop>
		
	double speed_rescaled = (center_distance_cm - 15) * (100 / DISTANCE_MAX);
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	40 e7       	ldi	r20, 0x70	; 112
 3f6:	51 e4       	ldi	r21, 0x41	; 65
 3f8:	c7 01       	movw	r24, r14
 3fa:	b6 01       	movw	r22, r12
 3fc:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__subsf3>
 400:	9b 01       	movw	r18, r22
 402:	ac 01       	movw	r20, r24
 404:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
	double speed_percentage = speed_rescaled / 100;
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	48 ec       	ldi	r20, 0xC8	; 200
 40e:	52 e4       	ldi	r21, 0x42	; 66
 410:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divsf3>
	uint8_t new_speed = (uint8_t)(MOTOR_SPEED_MAX * speed_percentage);
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e2       	ldi	r20, 0x20	; 32
 41a:	52 e4       	ldi	r21, 0x42	; 66
 41c:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 420:	0e 94 c6 04 	call	0x98c	; 0x98c <__fixunssfsi>
 424:	86 2f       	mov	r24, r22
	motor_controller_set_speed(new_speed);
 426:	0e 94 b6 01 	call	0x36c	; 0x36c <motor_controller_set_speed>
	
	return;
}
 42a:	ff 90       	pop	r15
 42c:	ef 90       	pop	r14
 42e:	df 90       	pop	r13
 430:	cf 90       	pop	r12
 432:	08 95       	ret

00000434 <pid_init>:
* pid_init:
********************************************************************************/
void pid_init(struct pid* self, const double target, 
			  const double output_min, const double output_max, 
			  const double kp, const double ki, const double kd)
{
 434:	8f 92       	push	r8
 436:	9f 92       	push	r9
 438:	af 92       	push	r10
 43a:	bf 92       	push	r11
 43c:	cf 92       	push	r12
 43e:	df 92       	push	r13
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	fc 01       	movw	r30, r24
	self->target = target;
 452:	40 83       	st	Z, r20
 454:	51 83       	std	Z+1, r21	; 0x01
 456:	62 83       	std	Z+2, r22	; 0x02
 458:	73 83       	std	Z+3, r23	; 0x03
	self->output_min = output_min;
 45a:	04 87       	std	Z+12, r16	; 0x0c
 45c:	15 87       	std	Z+13, r17	; 0x0d
 45e:	26 87       	std	Z+14, r18	; 0x0e
 460:	37 87       	std	Z+15, r19	; 0x0f
	self->output_max = output_max;
 462:	c0 8a       	std	Z+16, r12	; 0x10
 464:	d1 8a       	std	Z+17, r13	; 0x11
 466:	e2 8a       	std	Z+18, r14	; 0x12
 468:	f3 8a       	std	Z+19, r15	; 0x13
	self->kp = kp;
 46a:	80 a2       	std	Z+32, r8	; 0x20
 46c:	91 a2       	std	Z+33, r9	; 0x21
 46e:	a2 a2       	std	Z+34, r10	; 0x22
 470:	b3 a2       	std	Z+35, r11	; 0x23
	self->ki = ki;
 472:	8f 85       	ldd	r24, Y+15	; 0x0f
 474:	98 89       	ldd	r25, Y+16	; 0x10
 476:	a9 89       	ldd	r26, Y+17	; 0x11
 478:	ba 89       	ldd	r27, Y+18	; 0x12
 47a:	84 a3       	std	Z+36, r24	; 0x24
 47c:	95 a3       	std	Z+37, r25	; 0x25
 47e:	a6 a3       	std	Z+38, r26	; 0x26
 480:	b7 a3       	std	Z+39, r27	; 0x27
	self->kd = kd;
 482:	8b 89       	ldd	r24, Y+19	; 0x13
 484:	9c 89       	ldd	r25, Y+20	; 0x14
 486:	ad 89       	ldd	r26, Y+21	; 0x15
 488:	be 89       	ldd	r27, Y+22	; 0x16
 48a:	80 a7       	std	Z+40, r24	; 0x28
 48c:	91 a7       	std	Z+41, r25	; 0x29
 48e:	a2 a7       	std	Z+42, r26	; 0x2a
 490:	b3 a7       	std	Z+43, r27	; 0x2b
	
	self->output = 0;
 492:	14 82       	std	Z+4, r1	; 0x04
 494:	15 82       	std	Z+5, r1	; 0x05
 496:	16 82       	std	Z+6, r1	; 0x06
 498:	17 82       	std	Z+7, r1	; 0x07
	self->input = 0;
 49a:	10 86       	std	Z+8, r1	; 0x08
 49c:	11 86       	std	Z+9, r1	; 0x09
 49e:	12 86       	std	Z+10, r1	; 0x0a
 4a0:	13 86       	std	Z+11, r1	; 0x0b
	self->last_error = 0;
 4a2:	14 8a       	std	Z+20, r1	; 0x14
 4a4:	15 8a       	std	Z+21, r1	; 0x15
 4a6:	16 8a       	std	Z+22, r1	; 0x16
 4a8:	17 8a       	std	Z+23, r1	; 0x17
	self->integrate = 0;
 4aa:	10 8e       	std	Z+24, r1	; 0x18
 4ac:	11 8e       	std	Z+25, r1	; 0x19
 4ae:	12 8e       	std	Z+26, r1	; 0x1a
 4b0:	13 8e       	std	Z+27, r1	; 0x1b
	self->derivate = 0;
 4b2:	14 8e       	std	Z+28, r1	; 0x1c
 4b4:	15 8e       	std	Z+29, r1	; 0x1d
 4b6:	16 8e       	std	Z+30, r1	; 0x1e
 4b8:	17 8e       	std	Z+31, r1	; 0x1f
	
	return;
}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	bf 90       	pop	r11
 4cc:	af 90       	pop	r10
 4ce:	9f 90       	pop	r9
 4d0:	8f 90       	pop	r8
 4d2:	08 95       	ret

000004d4 <pid_check_output>:

/********************************************************************************
* pid_check_output:
********************************************************************************/
void pid_check_output(struct pid* self)
{
 4d4:	8f 92       	push	r8
 4d6:	9f 92       	push	r9
 4d8:	af 92       	push	r10
 4da:	bf 92       	push	r11
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
	if (self->output > self->output_max)
 4ea:	cc 80       	ldd	r12, Y+4	; 0x04
 4ec:	dd 80       	ldd	r13, Y+5	; 0x05
 4ee:	ee 80       	ldd	r14, Y+6	; 0x06
 4f0:	ff 80       	ldd	r15, Y+7	; 0x07
 4f2:	88 88       	ldd	r8, Y+16	; 0x10
 4f4:	99 88       	ldd	r9, Y+17	; 0x11
 4f6:	aa 88       	ldd	r10, Y+18	; 0x12
 4f8:	bb 88       	ldd	r11, Y+19	; 0x13
 4fa:	a5 01       	movw	r20, r10
 4fc:	94 01       	movw	r18, r8
 4fe:	c7 01       	movw	r24, r14
 500:	b6 01       	movw	r22, r12
 502:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__gesf2>
 506:	18 16       	cp	r1, r24
 508:	2c f4       	brge	.+10     	; 0x514 <pid_check_output+0x40>
	{
		self->output = self->output_max;
 50a:	8c 82       	std	Y+4, r8	; 0x04
 50c:	9d 82       	std	Y+5, r9	; 0x05
 50e:	ae 82       	std	Y+6, r10	; 0x06
 510:	bf 82       	std	Y+7, r11	; 0x07
 512:	10 c0       	rjmp	.+32     	; 0x534 <pid_check_output+0x60>
	}
	else if (self->output < self->output_min)
 514:	8c 84       	ldd	r8, Y+12	; 0x0c
 516:	9d 84       	ldd	r9, Y+13	; 0x0d
 518:	ae 84       	ldd	r10, Y+14	; 0x0e
 51a:	bf 84       	ldd	r11, Y+15	; 0x0f
 51c:	a5 01       	movw	r20, r10
 51e:	94 01       	movw	r18, r8
 520:	c7 01       	movw	r24, r14
 522:	b6 01       	movw	r22, r12
 524:	0e 94 4f 04 	call	0x89e	; 0x89e <__cmpsf2>
 528:	88 23       	and	r24, r24
 52a:	24 f4       	brge	.+8      	; 0x534 <pid_check_output+0x60>
	{
		self->output = self->output_min;
 52c:	8c 82       	std	Y+4, r8	; 0x04
 52e:	9d 82       	std	Y+5, r9	; 0x05
 530:	ae 82       	std	Y+6, r10	; 0x06
 532:	bf 82       	std	Y+7, r11	; 0x07
	}
	
	return;
}
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	df 90       	pop	r13
 53e:	cf 90       	pop	r12
 540:	bf 90       	pop	r11
 542:	af 90       	pop	r10
 544:	9f 90       	pop	r9
 546:	8f 90       	pop	r8
 548:	08 95       	ret

0000054a <pid_regulate>:

/********************************************************************************
* pid_regulate:
********************************************************************************/
void pid_regulate(struct pid* self, const double pid_input)
{
 54a:	4f 92       	push	r4
 54c:	5f 92       	push	r5
 54e:	6f 92       	push	r6
 550:	7f 92       	push	r7
 552:	8f 92       	push	r8
 554:	9f 92       	push	r9
 556:	af 92       	push	r10
 558:	bf 92       	push	r11
 55a:	cf 92       	push	r12
 55c:	df 92       	push	r13
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	00 d0       	rcall	.+0      	; 0x568 <pid_regulate+0x1e>
 568:	00 d0       	rcall	.+0      	; 0x56a <pid_regulate+0x20>
 56a:	00 d0       	rcall	.+0      	; 0x56c <pid_regulate+0x22>
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
 570:	9e 83       	std	Y+6, r25	; 0x06
 572:	8d 83       	std	Y+5, r24	; 0x05
 574:	4a 01       	movw	r8, r20
 576:	5b 01       	movw	r10, r22
	const double error = self->target - pid_input;
 578:	dc 01       	movw	r26, r24
 57a:	8d 91       	ld	r24, X+
 57c:	9d 91       	ld	r25, X+
 57e:	0d 90       	ld	r0, X+
 580:	bc 91       	ld	r27, X
 582:	a0 2d       	mov	r26, r0
 584:	89 83       	std	Y+1, r24	; 0x01
 586:	9a 83       	std	Y+2, r25	; 0x02
 588:	ab 83       	std	Y+3, r26	; 0x03
 58a:	bc 83       	std	Y+4, r27	; 0x04
 58c:	9a 01       	movw	r18, r20
 58e:	ab 01       	movw	r20, r22
 590:	bc 01       	movw	r22, r24
 592:	cd 01       	movw	r24, r26
 594:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__subsf3>
 598:	6b 01       	movw	r12, r22
 59a:	7c 01       	movw	r14, r24
	self->input = pid_input;
 59c:	ed 81       	ldd	r30, Y+5	; 0x05
 59e:	fe 81       	ldd	r31, Y+6	; 0x06
 5a0:	80 86       	std	Z+8, r8	; 0x08
 5a2:	91 86       	std	Z+9, r9	; 0x09
 5a4:	a2 86       	std	Z+10, r10	; 0x0a
 5a6:	b3 86       	std	Z+11, r11	; 0x0b
	
	self->derivate = error - self->last_error;
 5a8:	24 89       	ldd	r18, Z+20	; 0x14
 5aa:	35 89       	ldd	r19, Z+21	; 0x15
 5ac:	46 89       	ldd	r20, Z+22	; 0x16
 5ae:	57 89       	ldd	r21, Z+23	; 0x17
 5b0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__subsf3>
 5b4:	4b 01       	movw	r8, r22
 5b6:	5c 01       	movw	r10, r24
 5b8:	ad 81       	ldd	r26, Y+5	; 0x05
 5ba:	be 81       	ldd	r27, Y+6	; 0x06
 5bc:	5c 96       	adiw	r26, 0x1c	; 28
 5be:	6d 93       	st	X+, r22
 5c0:	7d 93       	st	X+, r23
 5c2:	8d 93       	st	X+, r24
 5c4:	9c 93       	st	X, r25
 5c6:	5f 97       	sbiw	r26, 0x1f	; 31
	self->integrate += error;
 5c8:	58 96       	adiw	r26, 0x18	; 24
 5ca:	2d 91       	ld	r18, X+
 5cc:	3d 91       	ld	r19, X+
 5ce:	4d 91       	ld	r20, X+
 5d0:	5c 91       	ld	r21, X
 5d2:	5b 97       	sbiw	r26, 0x1b	; 27
 5d4:	c7 01       	movw	r24, r14
 5d6:	b6 01       	movw	r22, r12
 5d8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 5dc:	2b 01       	movw	r4, r22
 5de:	3c 01       	movw	r6, r24
 5e0:	ed 81       	ldd	r30, Y+5	; 0x05
 5e2:	fe 81       	ldd	r31, Y+6	; 0x06
 5e4:	60 8f       	std	Z+24, r22	; 0x18
 5e6:	71 8f       	std	Z+25, r23	; 0x19
 5e8:	82 8f       	std	Z+26, r24	; 0x1a
 5ea:	93 8f       	std	Z+27, r25	; 0x1b
	self->output = (self->target) + (self->kp * error) + (self->ki * self->integrate) + (self->kd * self->derivate);
 5ec:	20 a1       	ldd	r18, Z+32	; 0x20
 5ee:	31 a1       	ldd	r19, Z+33	; 0x21
 5f0:	42 a1       	ldd	r20, Z+34	; 0x22
 5f2:	53 a1       	ldd	r21, Z+35	; 0x23
 5f4:	c7 01       	movw	r24, r14
 5f6:	b6 01       	movw	r22, r12
 5f8:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 5fc:	9b 01       	movw	r18, r22
 5fe:	ac 01       	movw	r20, r24
 600:	69 81       	ldd	r22, Y+1	; 0x01
 602:	7a 81       	ldd	r23, Y+2	; 0x02
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	9c 81       	ldd	r25, Y+4	; 0x04
 608:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 60c:	69 83       	std	Y+1, r22	; 0x01
 60e:	7a 83       	std	Y+2, r23	; 0x02
 610:	8b 83       	std	Y+3, r24	; 0x03
 612:	9c 83       	std	Y+4, r25	; 0x04
 614:	ad 81       	ldd	r26, Y+5	; 0x05
 616:	be 81       	ldd	r27, Y+6	; 0x06
 618:	94 96       	adiw	r26, 0x24	; 36
 61a:	2d 91       	ld	r18, X+
 61c:	3d 91       	ld	r19, X+
 61e:	4d 91       	ld	r20, X+
 620:	5c 91       	ld	r21, X
 622:	97 97       	sbiw	r26, 0x27	; 39
 624:	c3 01       	movw	r24, r6
 626:	b2 01       	movw	r22, r4
 628:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 62c:	9b 01       	movw	r18, r22
 62e:	ac 01       	movw	r20, r24
 630:	69 81       	ldd	r22, Y+1	; 0x01
 632:	7a 81       	ldd	r23, Y+2	; 0x02
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	9c 81       	ldd	r25, Y+4	; 0x04
 638:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 63c:	2b 01       	movw	r4, r22
 63e:	3c 01       	movw	r6, r24
 640:	ed 81       	ldd	r30, Y+5	; 0x05
 642:	fe 81       	ldd	r31, Y+6	; 0x06
 644:	20 a5       	ldd	r18, Z+40	; 0x28
 646:	31 a5       	ldd	r19, Z+41	; 0x29
 648:	42 a5       	ldd	r20, Z+42	; 0x2a
 64a:	53 a5       	ldd	r21, Z+43	; 0x2b
 64c:	c5 01       	movw	r24, r10
 64e:	b4 01       	movw	r22, r8
 650:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 654:	9b 01       	movw	r18, r22
 656:	ac 01       	movw	r20, r24
 658:	c3 01       	movw	r24, r6
 65a:	b2 01       	movw	r22, r4
 65c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 660:	ad 81       	ldd	r26, Y+5	; 0x05
 662:	be 81       	ldd	r27, Y+6	; 0x06
 664:	14 96       	adiw	r26, 0x04	; 4
 666:	6d 93       	st	X+, r22
 668:	7d 93       	st	X+, r23
 66a:	8d 93       	st	X+, r24
 66c:	9c 93       	st	X, r25
 66e:	17 97       	sbiw	r26, 0x07	; 7
	
	pid_check_output(self);
 670:	cd 01       	movw	r24, r26
 672:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <pid_check_output>
	self->last_error = error;
 676:	ed 81       	ldd	r30, Y+5	; 0x05
 678:	fe 81       	ldd	r31, Y+6	; 0x06
 67a:	c4 8a       	std	Z+20, r12	; 0x14
 67c:	d5 8a       	std	Z+21, r13	; 0x15
 67e:	e6 8a       	std	Z+22, r14	; 0x16
 680:	f7 8a       	std	Z+23, r15	; 0x17
	
	return;	
 682:	26 96       	adiw	r28, 0x06	; 6
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	f8 94       	cli
 688:	de bf       	out	0x3e, r29	; 62
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	cd bf       	out	0x3d, r28	; 61
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	ff 90       	pop	r15
 694:	ef 90       	pop	r14
 696:	df 90       	pop	r13
 698:	cf 90       	pop	r12
 69a:	bf 90       	pop	r11
 69c:	af 90       	pop	r10
 69e:	9f 90       	pop	r9
 6a0:	8f 90       	pop	r8
 6a2:	7f 90       	pop	r7
 6a4:	6f 90       	pop	r6
 6a6:	5f 90       	pop	r5
 6a8:	4f 90       	pop	r4
 6aa:	08 95       	ret

000006ac <servo_set_angle>:
#include "servo.h"

/* External function definitions */
void servo_set_angle(const uint8_t angle)
{
	uint16_t ocr1a_val = 250 + angle * 1.389;
 6ac:	68 2f       	mov	r22, r24
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatsisf>
 6b8:	21 ec       	ldi	r18, 0xC1	; 193
 6ba:	3a ec       	ldi	r19, 0xCA	; 202
 6bc:	41 eb       	ldi	r20, 0xB1	; 177
 6be:	5f e3       	ldi	r21, 0x3F	; 63
 6c0:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	4a e7       	ldi	r20, 0x7A	; 122
 6ca:	53 e4       	ldi	r21, 0x43	; 67
 6cc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 6d0:	0e 94 c6 04 	call	0x98c	; 0x98c <__fixunssfsi>
	OCR1A = ocr1a_val;
 6d4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6d8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 6dc:	08 95       	ret

000006de <setup>:
static inline void init_motor_controller(void);

/* External function definitions */

void setup(void)
{
 6de:	cf 93       	push	r28
/********************************************************************************
* init_gpio: Configures GPIO-pins.
*********************************************************************************/
static inline void init_gpio(void)
{
	DDRB = (1 << SERVO_CONTROL_PIN);
 6e0:	c2 e0       	ldi	r28, 0x02	; 2
 6e2:	c4 b9       	out	0x04, r28	; 4
	DDRD = (1 << M1A) | (1 << M1B);
 6e4:	80 e6       	ldi	r24, 0x60	; 96
 6e6:	8a b9       	out	0x0a, r24	; 10
* init_adc: Performs an AD-conversion to initialize the hardware in order
*			to reduce conversion time of consequent conversions.
********************************************************************************/
static inline void init_adc(void)
{
	(void)adc_read(SENSOR_CENTER_PIN);
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0e 94 94 00 	call	0x128	; 0x128 <adc_read>
*			  signal at PORTB1 with a frequency of 50 Hz. The duty cycle of
*			  the PWM-signal is determined by the value stored in OCR1A.
********************************************************************************/
static inline void init_servo(void)
{
	TCCR1A = (0b10 << COM1A0) | (0b10 << WGM10);
 6ee:	82 e8       	ldi	r24, 0x82	; 130
 6f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (0b11 << WGM12) | (0b011 << CS10);
 6f4:	8b e1       	ldi	r24, 0x1B	; 27
 6f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 5000;
 6fa:	88 e8       	ldi	r24, 0x88	; 136
 6fc:	93 e1       	ldi	r25, 0x13	; 19
 6fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 702:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// The servo motor mounted on the car accepts pulse widths from 1 to 2 ms.
	// A pulse width of 1.0 ms (1.0 ms / 4 us = 250 => OCR1A = 250) results in an angle of 0 degrees.
	// A pulse width of 1.5 ms (1.5 ms / 4 us = 375 => OCR1A = 375) results in an angle of 90 degrees.
	// A pulse width of 2.0 ms (2.0 ms / 4 us = 500 => OCR1A = 500) results in an angle of 180 degrees.
	OCR1A = SERVO_CENTER;
 706:	87 e7       	ldi	r24, 0x77	; 119
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 70e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
*						 duty cycle of M1B is determined by OCR0B.
*						 By default the duty cycle is set to 0.
*********************************************************************************/
static inline void init_motor_controller(void)
{
	TCCR0A = (0b10 << COM0A0) | (0b10 << COM0B0) | (0b01 << WGM00);
 712:	81 ea       	ldi	r24, 0xA1	; 161
 714:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0b010 << CS00);
 716:	c5 bd       	out	0x25, r28	; 37
	OCR0A = 0x00;
 718:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
 71a:	18 bc       	out	0x28, r1	; 40
{
	init_gpio();
	init_adc();
	init_servo();
	init_motor_controller();
	serial_init(9600);
 71c:	60 e8       	ldi	r22, 0x80	; 128
 71e:	75 e2       	ldi	r23, 0x25	; 37
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 9c 03 	call	0x738	; 0x738 <serial_init>
static inline void init_interrupts(void)
{
	//EICRA = (0b11 << ISC10) | (0b11 << ISC00);
	//EIMSK = (0b11 << INT0);
	
	TIMSK0 = (1 << TOIE0);
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TIMSK1 = (1 << TOIE1);
 72e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	asm("SEI");
 732:	78 94       	sei
	init_motor_controller();
	serial_init(9600);
	init_interrupts();
	
	return;
}
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <serial_init>:
'                                transmitteras per sekund (default = 9600 kbps).
********************************************************************************/
void serial_init(const uint32_t baud_rate_kbps)
{
	static bool serial_initialized = false;
	if (serial_initialized) return;
 738:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <serial_initialized.2176>
 73c:	21 11       	cpse	r18, r1
 73e:	41 c0       	rjmp	.+130    	; 0x7c2 <serial_init+0x8a>

	UCSR0B = (1 << TXEN0);
 740:	28 e0       	ldi	r18, 0x08	; 8
 742:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 746:	26 e0       	ldi	r18, 0x06	; 6
 748:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	if (baud_rate_kbps == 0 || baud_rate_kbps == 9600)
 74c:	61 15       	cp	r22, r1
 74e:	71 05       	cpc	r23, r1
 750:	81 05       	cpc	r24, r1
 752:	91 05       	cpc	r25, r1
 754:	31 f0       	breq	.+12     	; 0x762 <serial_init+0x2a>
 756:	60 38       	cpi	r22, 0x80	; 128
 758:	25 e2       	ldi	r18, 0x25	; 37
 75a:	72 07       	cpc	r23, r18
 75c:	81 05       	cpc	r24, r1
 75e:	91 05       	cpc	r25, r1
 760:	39 f4       	brne	.+14     	; 0x770 <serial_init+0x38>
	{
		UBRR0 = 103;
 762:	87 e6       	ldi	r24, 0x67	; 103
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 76a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 76e:	23 c0       	rjmp	.+70     	; 0x7b6 <serial_init+0x7e>
	}
	else
	{
		UBRR0 = (uint8_t)(F_CPU / (16.0 * baud_rate_kbps) - 1 + 0.5);
 770:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatunsisf>
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	40 e8       	ldi	r20, 0x80	; 128
 77a:	51 e4       	ldi	r21, 0x41	; 65
 77c:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 780:	9b 01       	movw	r18, r22
 782:	ac 01       	movw	r20, r24
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	74 e2       	ldi	r23, 0x24	; 36
 788:	84 e7       	ldi	r24, 0x74	; 116
 78a:	9b e4       	ldi	r25, 0x4B	; 75
 78c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divsf3>
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 e8       	ldi	r20, 0x80	; 128
 796:	5f e3       	ldi	r21, 0x3F	; 63
 798:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__subsf3>
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	40 e0       	ldi	r20, 0x00	; 0
 7a2:	5f e3       	ldi	r21, 0x3F	; 63
 7a4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 7a8:	0e 94 c6 04 	call	0x98c	; 0x98c <__fixunssfsi>
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 7b2:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	}

	UDR0 = '\r';
 7b6:	8d e0       	ldi	r24, 0x0D	; 13
 7b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	serial_initialized = true;
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <serial_initialized.2176>
 7c2:	08 95       	ret

000007c4 <__subsf3>:
 7c4:	50 58       	subi	r21, 0x80	; 128

000007c6 <__addsf3>:
 7c6:	bb 27       	eor	r27, r27
 7c8:	aa 27       	eor	r26, r26
 7ca:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__addsf3x>
 7ce:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_round>
 7d2:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_pscA>
 7d6:	38 f0       	brcs	.+14     	; 0x7e6 <__addsf3+0x20>
 7d8:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_pscB>
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__addsf3+0x20>
 7de:	39 f4       	brne	.+14     	; 0x7ee <__addsf3+0x28>
 7e0:	9f 3f       	cpi	r25, 0xFF	; 255
 7e2:	19 f4       	brne	.+6      	; 0x7ea <__addsf3+0x24>
 7e4:	26 f4       	brtc	.+8      	; 0x7ee <__addsf3+0x28>
 7e6:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_nan>
 7ea:	0e f4       	brtc	.+2      	; 0x7ee <__addsf3+0x28>
 7ec:	e0 95       	com	r30
 7ee:	e7 fb       	bst	r30, 7
 7f0:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_inf>

000007f4 <__addsf3x>:
 7f4:	e9 2f       	mov	r30, r25
 7f6:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_split3>
 7fa:	58 f3       	brcs	.-42     	; 0x7d2 <__addsf3+0xc>
 7fc:	ba 17       	cp	r27, r26
 7fe:	62 07       	cpc	r22, r18
 800:	73 07       	cpc	r23, r19
 802:	84 07       	cpc	r24, r20
 804:	95 07       	cpc	r25, r21
 806:	20 f0       	brcs	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 808:	79 f4       	brne	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 80a:	a6 f5       	brtc	.+104    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 80c:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_zero>
 810:	0e f4       	brtc	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 812:	e0 95       	com	r30
 814:	0b 2e       	mov	r0, r27
 816:	ba 2f       	mov	r27, r26
 818:	a0 2d       	mov	r26, r0
 81a:	0b 01       	movw	r0, r22
 81c:	b9 01       	movw	r22, r18
 81e:	90 01       	movw	r18, r0
 820:	0c 01       	movw	r0, r24
 822:	ca 01       	movw	r24, r20
 824:	a0 01       	movw	r20, r0
 826:	11 24       	eor	r1, r1
 828:	ff 27       	eor	r31, r31
 82a:	59 1b       	sub	r21, r25
 82c:	99 f0       	breq	.+38     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 82e:	59 3f       	cpi	r21, 0xF9	; 249
 830:	50 f4       	brcc	.+20     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 832:	50 3e       	cpi	r21, 0xE0	; 224
 834:	68 f1       	brcs	.+90     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 836:	1a 16       	cp	r1, r26
 838:	f0 40       	sbci	r31, 0x00	; 0
 83a:	a2 2f       	mov	r26, r18
 83c:	23 2f       	mov	r18, r19
 83e:	34 2f       	mov	r19, r20
 840:	44 27       	eor	r20, r20
 842:	58 5f       	subi	r21, 0xF8	; 248
 844:	f3 cf       	rjmp	.-26     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 846:	46 95       	lsr	r20
 848:	37 95       	ror	r19
 84a:	27 95       	ror	r18
 84c:	a7 95       	ror	r26
 84e:	f0 40       	sbci	r31, 0x00	; 0
 850:	53 95       	inc	r21
 852:	c9 f7       	brne	.-14     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 854:	7e f4       	brtc	.+30     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 856:	1f 16       	cp	r1, r31
 858:	ba 0b       	sbc	r27, r26
 85a:	62 0b       	sbc	r22, r18
 85c:	73 0b       	sbc	r23, r19
 85e:	84 0b       	sbc	r24, r20
 860:	ba f0       	brmi	.+46     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 862:	91 50       	subi	r25, 0x01	; 1
 864:	a1 f0       	breq	.+40     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 866:	ff 0f       	add	r31, r31
 868:	bb 1f       	adc	r27, r27
 86a:	66 1f       	adc	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	c2 f7       	brpl	.-16     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 872:	0e c0       	rjmp	.+28     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 874:	ba 0f       	add	r27, r26
 876:	62 1f       	adc	r22, r18
 878:	73 1f       	adc	r23, r19
 87a:	84 1f       	adc	r24, r20
 87c:	48 f4       	brcc	.+18     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 87e:	87 95       	ror	r24
 880:	77 95       	ror	r23
 882:	67 95       	ror	r22
 884:	b7 95       	ror	r27
 886:	f7 95       	ror	r31
 888:	9e 3f       	cpi	r25, 0xFE	; 254
 88a:	08 f0       	brcs	.+2      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 88c:	b0 cf       	rjmp	.-160    	; 0x7ee <__addsf3+0x28>
 88e:	93 95       	inc	r25
 890:	88 0f       	add	r24, r24
 892:	08 f0       	brcs	.+2      	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 894:	99 27       	eor	r25, r25
 896:	ee 0f       	add	r30, r30
 898:	97 95       	ror	r25
 89a:	87 95       	ror	r24
 89c:	08 95       	ret

0000089e <__cmpsf2>:
 89e:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_cmp>
 8a2:	08 f4       	brcc	.+2      	; 0x8a6 <__cmpsf2+0x8>
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	08 95       	ret

000008a8 <__divsf3>:
 8a8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divsf3x>
 8ac:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_round>
 8b0:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_pscB>
 8b4:	58 f0       	brcs	.+22     	; 0x8cc <__divsf3+0x24>
 8b6:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_pscA>
 8ba:	40 f0       	brcs	.+16     	; 0x8cc <__divsf3+0x24>
 8bc:	29 f4       	brne	.+10     	; 0x8c8 <__divsf3+0x20>
 8be:	5f 3f       	cpi	r21, 0xFF	; 255
 8c0:	29 f0       	breq	.+10     	; 0x8cc <__divsf3+0x24>
 8c2:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_inf>
 8c6:	51 11       	cpse	r21, r1
 8c8:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_szero>
 8cc:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_nan>

000008d0 <__divsf3x>:
 8d0:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_split3>
 8d4:	68 f3       	brcs	.-38     	; 0x8b0 <__divsf3+0x8>

000008d6 <__divsf3_pse>:
 8d6:	99 23       	and	r25, r25
 8d8:	b1 f3       	breq	.-20     	; 0x8c6 <__divsf3+0x1e>
 8da:	55 23       	and	r21, r21
 8dc:	91 f3       	breq	.-28     	; 0x8c2 <__divsf3+0x1a>
 8de:	95 1b       	sub	r25, r21
 8e0:	55 0b       	sbc	r21, r21
 8e2:	bb 27       	eor	r27, r27
 8e4:	aa 27       	eor	r26, r26
 8e6:	62 17       	cp	r22, r18
 8e8:	73 07       	cpc	r23, r19
 8ea:	84 07       	cpc	r24, r20
 8ec:	38 f0       	brcs	.+14     	; 0x8fc <__divsf3_pse+0x26>
 8ee:	9f 5f       	subi	r25, 0xFF	; 255
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	22 0f       	add	r18, r18
 8f4:	33 1f       	adc	r19, r19
 8f6:	44 1f       	adc	r20, r20
 8f8:	aa 1f       	adc	r26, r26
 8fa:	a9 f3       	breq	.-22     	; 0x8e6 <__divsf3_pse+0x10>
 8fc:	35 d0       	rcall	.+106    	; 0x968 <__stack+0x69>
 8fe:	0e 2e       	mov	r0, r30
 900:	3a f0       	brmi	.+14     	; 0x910 <__stack+0x11>
 902:	e0 e8       	ldi	r30, 0x80	; 128
 904:	32 d0       	rcall	.+100    	; 0x96a <__stack+0x6b>
 906:	91 50       	subi	r25, 0x01	; 1
 908:	50 40       	sbci	r21, 0x00	; 0
 90a:	e6 95       	lsr	r30
 90c:	00 1c       	adc	r0, r0
 90e:	ca f7       	brpl	.-14     	; 0x902 <__stack+0x3>
 910:	2b d0       	rcall	.+86     	; 0x968 <__stack+0x69>
 912:	fe 2f       	mov	r31, r30
 914:	29 d0       	rcall	.+82     	; 0x968 <__stack+0x69>
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	bb 1f       	adc	r27, r27
 91e:	26 17       	cp	r18, r22
 920:	37 07       	cpc	r19, r23
 922:	48 07       	cpc	r20, r24
 924:	ab 07       	cpc	r26, r27
 926:	b0 e8       	ldi	r27, 0x80	; 128
 928:	09 f0       	breq	.+2      	; 0x92c <__stack+0x2d>
 92a:	bb 0b       	sbc	r27, r27
 92c:	80 2d       	mov	r24, r0
 92e:	bf 01       	movw	r22, r30
 930:	ff 27       	eor	r31, r31
 932:	93 58       	subi	r25, 0x83	; 131
 934:	5f 4f       	sbci	r21, 0xFF	; 255
 936:	3a f0       	brmi	.+14     	; 0x946 <__stack+0x47>
 938:	9e 3f       	cpi	r25, 0xFE	; 254
 93a:	51 05       	cpc	r21, r1
 93c:	78 f0       	brcs	.+30     	; 0x95c <__stack+0x5d>
 93e:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_inf>
 942:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_szero>
 946:	5f 3f       	cpi	r21, 0xFF	; 255
 948:	e4 f3       	brlt	.-8      	; 0x942 <__stack+0x43>
 94a:	98 3e       	cpi	r25, 0xE8	; 232
 94c:	d4 f3       	brlt	.-12     	; 0x942 <__stack+0x43>
 94e:	86 95       	lsr	r24
 950:	77 95       	ror	r23
 952:	67 95       	ror	r22
 954:	b7 95       	ror	r27
 956:	f7 95       	ror	r31
 958:	9f 5f       	subi	r25, 0xFF	; 255
 95a:	c9 f7       	brne	.-14     	; 0x94e <__stack+0x4f>
 95c:	88 0f       	add	r24, r24
 95e:	91 1d       	adc	r25, r1
 960:	96 95       	lsr	r25
 962:	87 95       	ror	r24
 964:	97 f9       	bld	r25, 7
 966:	08 95       	ret
 968:	e1 e0       	ldi	r30, 0x01	; 1
 96a:	66 0f       	add	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	bb 1f       	adc	r27, r27
 972:	62 17       	cp	r22, r18
 974:	73 07       	cpc	r23, r19
 976:	84 07       	cpc	r24, r20
 978:	ba 07       	cpc	r27, r26
 97a:	20 f0       	brcs	.+8      	; 0x984 <__stack+0x85>
 97c:	62 1b       	sub	r22, r18
 97e:	73 0b       	sbc	r23, r19
 980:	84 0b       	sbc	r24, r20
 982:	ba 0b       	sbc	r27, r26
 984:	ee 1f       	adc	r30, r30
 986:	88 f7       	brcc	.-30     	; 0x96a <__stack+0x6b>
 988:	e0 95       	com	r30
 98a:	08 95       	ret

0000098c <__fixunssfsi>:
 98c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_splitA>
 990:	88 f0       	brcs	.+34     	; 0x9b4 <__fixunssfsi+0x28>
 992:	9f 57       	subi	r25, 0x7F	; 127
 994:	98 f0       	brcs	.+38     	; 0x9bc <__fixunssfsi+0x30>
 996:	b9 2f       	mov	r27, r25
 998:	99 27       	eor	r25, r25
 99a:	b7 51       	subi	r27, 0x17	; 23
 99c:	b0 f0       	brcs	.+44     	; 0x9ca <__fixunssfsi+0x3e>
 99e:	e1 f0       	breq	.+56     	; 0x9d8 <__fixunssfsi+0x4c>
 9a0:	66 0f       	add	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	1a f0       	brmi	.+6      	; 0x9b0 <__fixunssfsi+0x24>
 9aa:	ba 95       	dec	r27
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__fixunssfsi+0x14>
 9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <__fixunssfsi+0x4c>
 9b0:	b1 30       	cpi	r27, 0x01	; 1
 9b2:	91 f0       	breq	.+36     	; 0x9d8 <__fixunssfsi+0x4c>
 9b4:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fp_zero>
 9b8:	b1 e0       	ldi	r27, 0x01	; 1
 9ba:	08 95       	ret
 9bc:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_zero>
 9c0:	67 2f       	mov	r22, r23
 9c2:	78 2f       	mov	r23, r24
 9c4:	88 27       	eor	r24, r24
 9c6:	b8 5f       	subi	r27, 0xF8	; 248
 9c8:	39 f0       	breq	.+14     	; 0x9d8 <__fixunssfsi+0x4c>
 9ca:	b9 3f       	cpi	r27, 0xF9	; 249
 9cc:	cc f3       	brlt	.-14     	; 0x9c0 <__fixunssfsi+0x34>
 9ce:	86 95       	lsr	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	b3 95       	inc	r27
 9d6:	d9 f7       	brne	.-10     	; 0x9ce <__fixunssfsi+0x42>
 9d8:	3e f4       	brtc	.+14     	; 0x9e8 <__fixunssfsi+0x5c>
 9da:	90 95       	com	r25
 9dc:	80 95       	com	r24
 9de:	70 95       	com	r23
 9e0:	61 95       	neg	r22
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	08 95       	ret

000009ea <__floatunsisf>:
 9ea:	e8 94       	clt
 9ec:	09 c0       	rjmp	.+18     	; 0xa00 <__floatsisf+0x12>

000009ee <__floatsisf>:
 9ee:	97 fb       	bst	r25, 7
 9f0:	3e f4       	brtc	.+14     	; 0xa00 <__floatsisf+0x12>
 9f2:	90 95       	com	r25
 9f4:	80 95       	com	r24
 9f6:	70 95       	com	r23
 9f8:	61 95       	neg	r22
 9fa:	7f 4f       	sbci	r23, 0xFF	; 255
 9fc:	8f 4f       	sbci	r24, 0xFF	; 255
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	99 23       	and	r25, r25
 a02:	a9 f0       	breq	.+42     	; 0xa2e <__floatsisf+0x40>
 a04:	f9 2f       	mov	r31, r25
 a06:	96 e9       	ldi	r25, 0x96	; 150
 a08:	bb 27       	eor	r27, r27
 a0a:	93 95       	inc	r25
 a0c:	f6 95       	lsr	r31
 a0e:	87 95       	ror	r24
 a10:	77 95       	ror	r23
 a12:	67 95       	ror	r22
 a14:	b7 95       	ror	r27
 a16:	f1 11       	cpse	r31, r1
 a18:	f8 cf       	rjmp	.-16     	; 0xa0a <__floatsisf+0x1c>
 a1a:	fa f4       	brpl	.+62     	; 0xa5a <__floatsisf+0x6c>
 a1c:	bb 0f       	add	r27, r27
 a1e:	11 f4       	brne	.+4      	; 0xa24 <__floatsisf+0x36>
 a20:	60 ff       	sbrs	r22, 0
 a22:	1b c0       	rjmp	.+54     	; 0xa5a <__floatsisf+0x6c>
 a24:	6f 5f       	subi	r22, 0xFF	; 255
 a26:	7f 4f       	sbci	r23, 0xFF	; 255
 a28:	8f 4f       	sbci	r24, 0xFF	; 255
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	16 c0       	rjmp	.+44     	; 0xa5a <__floatsisf+0x6c>
 a2e:	88 23       	and	r24, r24
 a30:	11 f0       	breq	.+4      	; 0xa36 <__floatsisf+0x48>
 a32:	96 e9       	ldi	r25, 0x96	; 150
 a34:	11 c0       	rjmp	.+34     	; 0xa58 <__floatsisf+0x6a>
 a36:	77 23       	and	r23, r23
 a38:	21 f0       	breq	.+8      	; 0xa42 <__floatsisf+0x54>
 a3a:	9e e8       	ldi	r25, 0x8E	; 142
 a3c:	87 2f       	mov	r24, r23
 a3e:	76 2f       	mov	r23, r22
 a40:	05 c0       	rjmp	.+10     	; 0xa4c <__floatsisf+0x5e>
 a42:	66 23       	and	r22, r22
 a44:	71 f0       	breq	.+28     	; 0xa62 <__floatsisf+0x74>
 a46:	96 e8       	ldi	r25, 0x86	; 134
 a48:	86 2f       	mov	r24, r22
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	60 e0       	ldi	r22, 0x00	; 0
 a4e:	2a f0       	brmi	.+10     	; 0xa5a <__floatsisf+0x6c>
 a50:	9a 95       	dec	r25
 a52:	66 0f       	add	r22, r22
 a54:	77 1f       	adc	r23, r23
 a56:	88 1f       	adc	r24, r24
 a58:	da f7       	brpl	.-10     	; 0xa50 <__floatsisf+0x62>
 a5a:	88 0f       	add	r24, r24
 a5c:	96 95       	lsr	r25
 a5e:	87 95       	ror	r24
 a60:	97 f9       	bld	r25, 7
 a62:	08 95       	ret

00000a64 <__fp_cmp>:
 a64:	99 0f       	add	r25, r25
 a66:	00 08       	sbc	r0, r0
 a68:	55 0f       	add	r21, r21
 a6a:	aa 0b       	sbc	r26, r26
 a6c:	e0 e8       	ldi	r30, 0x80	; 128
 a6e:	fe ef       	ldi	r31, 0xFE	; 254
 a70:	16 16       	cp	r1, r22
 a72:	17 06       	cpc	r1, r23
 a74:	e8 07       	cpc	r30, r24
 a76:	f9 07       	cpc	r31, r25
 a78:	c0 f0       	brcs	.+48     	; 0xaaa <__fp_cmp+0x46>
 a7a:	12 16       	cp	r1, r18
 a7c:	13 06       	cpc	r1, r19
 a7e:	e4 07       	cpc	r30, r20
 a80:	f5 07       	cpc	r31, r21
 a82:	98 f0       	brcs	.+38     	; 0xaaa <__fp_cmp+0x46>
 a84:	62 1b       	sub	r22, r18
 a86:	73 0b       	sbc	r23, r19
 a88:	84 0b       	sbc	r24, r20
 a8a:	95 0b       	sbc	r25, r21
 a8c:	39 f4       	brne	.+14     	; 0xa9c <__fp_cmp+0x38>
 a8e:	0a 26       	eor	r0, r26
 a90:	61 f0       	breq	.+24     	; 0xaaa <__fp_cmp+0x46>
 a92:	23 2b       	or	r18, r19
 a94:	24 2b       	or	r18, r20
 a96:	25 2b       	or	r18, r21
 a98:	21 f4       	brne	.+8      	; 0xaa2 <__fp_cmp+0x3e>
 a9a:	08 95       	ret
 a9c:	0a 26       	eor	r0, r26
 a9e:	09 f4       	brne	.+2      	; 0xaa2 <__fp_cmp+0x3e>
 aa0:	a1 40       	sbci	r26, 0x01	; 1
 aa2:	a6 95       	lsr	r26
 aa4:	8f ef       	ldi	r24, 0xFF	; 255
 aa6:	81 1d       	adc	r24, r1
 aa8:	81 1d       	adc	r24, r1
 aaa:	08 95       	ret

00000aac <__fp_inf>:
 aac:	97 f9       	bld	r25, 7
 aae:	9f 67       	ori	r25, 0x7F	; 127
 ab0:	80 e8       	ldi	r24, 0x80	; 128
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	60 e0       	ldi	r22, 0x00	; 0
 ab6:	08 95       	ret

00000ab8 <__fp_nan>:
 ab8:	9f ef       	ldi	r25, 0xFF	; 255
 aba:	80 ec       	ldi	r24, 0xC0	; 192
 abc:	08 95       	ret

00000abe <__fp_pscA>:
 abe:	00 24       	eor	r0, r0
 ac0:	0a 94       	dec	r0
 ac2:	16 16       	cp	r1, r22
 ac4:	17 06       	cpc	r1, r23
 ac6:	18 06       	cpc	r1, r24
 ac8:	09 06       	cpc	r0, r25
 aca:	08 95       	ret

00000acc <__fp_pscB>:
 acc:	00 24       	eor	r0, r0
 ace:	0a 94       	dec	r0
 ad0:	12 16       	cp	r1, r18
 ad2:	13 06       	cpc	r1, r19
 ad4:	14 06       	cpc	r1, r20
 ad6:	05 06       	cpc	r0, r21
 ad8:	08 95       	ret

00000ada <__fp_round>:
 ada:	09 2e       	mov	r0, r25
 adc:	03 94       	inc	r0
 ade:	00 0c       	add	r0, r0
 ae0:	11 f4       	brne	.+4      	; 0xae6 <__fp_round+0xc>
 ae2:	88 23       	and	r24, r24
 ae4:	52 f0       	brmi	.+20     	; 0xafa <__fp_round+0x20>
 ae6:	bb 0f       	add	r27, r27
 ae8:	40 f4       	brcc	.+16     	; 0xafa <__fp_round+0x20>
 aea:	bf 2b       	or	r27, r31
 aec:	11 f4       	brne	.+4      	; 0xaf2 <__fp_round+0x18>
 aee:	60 ff       	sbrs	r22, 0
 af0:	04 c0       	rjmp	.+8      	; 0xafa <__fp_round+0x20>
 af2:	6f 5f       	subi	r22, 0xFF	; 255
 af4:	7f 4f       	sbci	r23, 0xFF	; 255
 af6:	8f 4f       	sbci	r24, 0xFF	; 255
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	08 95       	ret

00000afc <__fp_split3>:
 afc:	57 fd       	sbrc	r21, 7
 afe:	90 58       	subi	r25, 0x80	; 128
 b00:	44 0f       	add	r20, r20
 b02:	55 1f       	adc	r21, r21
 b04:	59 f0       	breq	.+22     	; 0xb1c <__fp_splitA+0x10>
 b06:	5f 3f       	cpi	r21, 0xFF	; 255
 b08:	71 f0       	breq	.+28     	; 0xb26 <__fp_splitA+0x1a>
 b0a:	47 95       	ror	r20

00000b0c <__fp_splitA>:
 b0c:	88 0f       	add	r24, r24
 b0e:	97 fb       	bst	r25, 7
 b10:	99 1f       	adc	r25, r25
 b12:	61 f0       	breq	.+24     	; 0xb2c <__fp_splitA+0x20>
 b14:	9f 3f       	cpi	r25, 0xFF	; 255
 b16:	79 f0       	breq	.+30     	; 0xb36 <__fp_splitA+0x2a>
 b18:	87 95       	ror	r24
 b1a:	08 95       	ret
 b1c:	12 16       	cp	r1, r18
 b1e:	13 06       	cpc	r1, r19
 b20:	14 06       	cpc	r1, r20
 b22:	55 1f       	adc	r21, r21
 b24:	f2 cf       	rjmp	.-28     	; 0xb0a <__fp_split3+0xe>
 b26:	46 95       	lsr	r20
 b28:	f1 df       	rcall	.-30     	; 0xb0c <__fp_splitA>
 b2a:	08 c0       	rjmp	.+16     	; 0xb3c <__fp_splitA+0x30>
 b2c:	16 16       	cp	r1, r22
 b2e:	17 06       	cpc	r1, r23
 b30:	18 06       	cpc	r1, r24
 b32:	99 1f       	adc	r25, r25
 b34:	f1 cf       	rjmp	.-30     	; 0xb18 <__fp_splitA+0xc>
 b36:	86 95       	lsr	r24
 b38:	71 05       	cpc	r23, r1
 b3a:	61 05       	cpc	r22, r1
 b3c:	08 94       	sec
 b3e:	08 95       	ret

00000b40 <__fp_zero>:
 b40:	e8 94       	clt

00000b42 <__fp_szero>:
 b42:	bb 27       	eor	r27, r27
 b44:	66 27       	eor	r22, r22
 b46:	77 27       	eor	r23, r23
 b48:	cb 01       	movw	r24, r22
 b4a:	97 f9       	bld	r25, 7
 b4c:	08 95       	ret

00000b4e <__gesf2>:
 b4e:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_cmp>
 b52:	08 f4       	brcc	.+2      	; 0xb56 <__gesf2+0x8>
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	08 95       	ret

00000b58 <__mulsf3>:
 b58:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsf3x>
 b5c:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_round>
 b60:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_pscA>
 b64:	38 f0       	brcs	.+14     	; 0xb74 <__mulsf3+0x1c>
 b66:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_pscB>
 b6a:	20 f0       	brcs	.+8      	; 0xb74 <__mulsf3+0x1c>
 b6c:	95 23       	and	r25, r21
 b6e:	11 f0       	breq	.+4      	; 0xb74 <__mulsf3+0x1c>
 b70:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_inf>
 b74:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_nan>
 b78:	11 24       	eor	r1, r1
 b7a:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_szero>

00000b7e <__mulsf3x>:
 b7e:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_split3>
 b82:	70 f3       	brcs	.-36     	; 0xb60 <__mulsf3+0x8>

00000b84 <__mulsf3_pse>:
 b84:	95 9f       	mul	r25, r21
 b86:	c1 f3       	breq	.-16     	; 0xb78 <__mulsf3+0x20>
 b88:	95 0f       	add	r25, r21
 b8a:	50 e0       	ldi	r21, 0x00	; 0
 b8c:	55 1f       	adc	r21, r21
 b8e:	62 9f       	mul	r22, r18
 b90:	f0 01       	movw	r30, r0
 b92:	72 9f       	mul	r23, r18
 b94:	bb 27       	eor	r27, r27
 b96:	f0 0d       	add	r31, r0
 b98:	b1 1d       	adc	r27, r1
 b9a:	63 9f       	mul	r22, r19
 b9c:	aa 27       	eor	r26, r26
 b9e:	f0 0d       	add	r31, r0
 ba0:	b1 1d       	adc	r27, r1
 ba2:	aa 1f       	adc	r26, r26
 ba4:	64 9f       	mul	r22, r20
 ba6:	66 27       	eor	r22, r22
 ba8:	b0 0d       	add	r27, r0
 baa:	a1 1d       	adc	r26, r1
 bac:	66 1f       	adc	r22, r22
 bae:	82 9f       	mul	r24, r18
 bb0:	22 27       	eor	r18, r18
 bb2:	b0 0d       	add	r27, r0
 bb4:	a1 1d       	adc	r26, r1
 bb6:	62 1f       	adc	r22, r18
 bb8:	73 9f       	mul	r23, r19
 bba:	b0 0d       	add	r27, r0
 bbc:	a1 1d       	adc	r26, r1
 bbe:	62 1f       	adc	r22, r18
 bc0:	83 9f       	mul	r24, r19
 bc2:	a0 0d       	add	r26, r0
 bc4:	61 1d       	adc	r22, r1
 bc6:	22 1f       	adc	r18, r18
 bc8:	74 9f       	mul	r23, r20
 bca:	33 27       	eor	r19, r19
 bcc:	a0 0d       	add	r26, r0
 bce:	61 1d       	adc	r22, r1
 bd0:	23 1f       	adc	r18, r19
 bd2:	84 9f       	mul	r24, r20
 bd4:	60 0d       	add	r22, r0
 bd6:	21 1d       	adc	r18, r1
 bd8:	82 2f       	mov	r24, r18
 bda:	76 2f       	mov	r23, r22
 bdc:	6a 2f       	mov	r22, r26
 bde:	11 24       	eor	r1, r1
 be0:	9f 57       	subi	r25, 0x7F	; 127
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	9a f0       	brmi	.+38     	; 0xc0c <__mulsf3_pse+0x88>
 be6:	f1 f0       	breq	.+60     	; 0xc24 <__mulsf3_pse+0xa0>
 be8:	88 23       	and	r24, r24
 bea:	4a f0       	brmi	.+18     	; 0xbfe <__mulsf3_pse+0x7a>
 bec:	ee 0f       	add	r30, r30
 bee:	ff 1f       	adc	r31, r31
 bf0:	bb 1f       	adc	r27, r27
 bf2:	66 1f       	adc	r22, r22
 bf4:	77 1f       	adc	r23, r23
 bf6:	88 1f       	adc	r24, r24
 bf8:	91 50       	subi	r25, 0x01	; 1
 bfa:	50 40       	sbci	r21, 0x00	; 0
 bfc:	a9 f7       	brne	.-22     	; 0xbe8 <__mulsf3_pse+0x64>
 bfe:	9e 3f       	cpi	r25, 0xFE	; 254
 c00:	51 05       	cpc	r21, r1
 c02:	80 f0       	brcs	.+32     	; 0xc24 <__mulsf3_pse+0xa0>
 c04:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_inf>
 c08:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_szero>
 c0c:	5f 3f       	cpi	r21, 0xFF	; 255
 c0e:	e4 f3       	brlt	.-8      	; 0xc08 <__mulsf3_pse+0x84>
 c10:	98 3e       	cpi	r25, 0xE8	; 232
 c12:	d4 f3       	brlt	.-12     	; 0xc08 <__mulsf3_pse+0x84>
 c14:	86 95       	lsr	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b7 95       	ror	r27
 c1c:	f7 95       	ror	r31
 c1e:	e7 95       	ror	r30
 c20:	9f 5f       	subi	r25, 0xFF	; 255
 c22:	c1 f7       	brne	.-16     	; 0xc14 <__mulsf3_pse+0x90>
 c24:	fe 2b       	or	r31, r30
 c26:	88 0f       	add	r24, r24
 c28:	91 1d       	adc	r25, r1
 c2a:	96 95       	lsr	r25
 c2c:	87 95       	ror	r24
 c2e:	97 f9       	bld	r25, 7
 c30:	08 95       	ret

00000c32 <pow>:
 c32:	fa 01       	movw	r30, r20
 c34:	ee 0f       	add	r30, r30
 c36:	ff 1f       	adc	r31, r31
 c38:	30 96       	adiw	r30, 0x00	; 0
 c3a:	21 05       	cpc	r18, r1
 c3c:	31 05       	cpc	r19, r1
 c3e:	a1 f1       	breq	.+104    	; 0xca8 <pow+0x76>
 c40:	61 15       	cp	r22, r1
 c42:	71 05       	cpc	r23, r1
 c44:	61 f4       	brne	.+24     	; 0xc5e <pow+0x2c>
 c46:	80 38       	cpi	r24, 0x80	; 128
 c48:	bf e3       	ldi	r27, 0x3F	; 63
 c4a:	9b 07       	cpc	r25, r27
 c4c:	49 f1       	breq	.+82     	; 0xca0 <pow+0x6e>
 c4e:	68 94       	set
 c50:	90 38       	cpi	r25, 0x80	; 128
 c52:	81 05       	cpc	r24, r1
 c54:	61 f0       	breq	.+24     	; 0xc6e <pow+0x3c>
 c56:	80 38       	cpi	r24, 0x80	; 128
 c58:	bf ef       	ldi	r27, 0xFF	; 255
 c5a:	9b 07       	cpc	r25, r27
 c5c:	41 f0       	breq	.+16     	; 0xc6e <pow+0x3c>
 c5e:	99 23       	and	r25, r25
 c60:	4a f5       	brpl	.+82     	; 0xcb4 <pow+0x82>
 c62:	ff 3f       	cpi	r31, 0xFF	; 255
 c64:	e1 05       	cpc	r30, r1
 c66:	31 05       	cpc	r19, r1
 c68:	21 05       	cpc	r18, r1
 c6a:	19 f1       	breq	.+70     	; 0xcb2 <pow+0x80>
 c6c:	e8 94       	clt
 c6e:	08 94       	sec
 c70:	e7 95       	ror	r30
 c72:	d9 01       	movw	r26, r18
 c74:	aa 23       	and	r26, r26
 c76:	29 f4       	brne	.+10     	; 0xc82 <pow+0x50>
 c78:	ab 2f       	mov	r26, r27
 c7a:	be 2f       	mov	r27, r30
 c7c:	f8 5f       	subi	r31, 0xF8	; 248
 c7e:	d0 f3       	brcs	.-12     	; 0xc74 <pow+0x42>
 c80:	10 c0       	rjmp	.+32     	; 0xca2 <pow+0x70>
 c82:	ff 5f       	subi	r31, 0xFF	; 255
 c84:	70 f4       	brcc	.+28     	; 0xca2 <pow+0x70>
 c86:	a6 95       	lsr	r26
 c88:	e0 f7       	brcc	.-8      	; 0xc82 <pow+0x50>
 c8a:	f7 39       	cpi	r31, 0x97	; 151
 c8c:	50 f0       	brcs	.+20     	; 0xca2 <pow+0x70>
 c8e:	19 f0       	breq	.+6      	; 0xc96 <pow+0x64>
 c90:	ff 3a       	cpi	r31, 0xAF	; 175
 c92:	38 f4       	brcc	.+14     	; 0xca2 <pow+0x70>
 c94:	9f 77       	andi	r25, 0x7F	; 127
 c96:	9f 93       	push	r25
 c98:	0d d0       	rcall	.+26     	; 0xcb4 <pow+0x82>
 c9a:	0f 90       	pop	r0
 c9c:	07 fc       	sbrc	r0, 7
 c9e:	90 58       	subi	r25, 0x80	; 128
 ca0:	08 95       	ret
 ca2:	46 f0       	brts	.+16     	; 0xcb4 <pow+0x82>
 ca4:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_nan>
 ca8:	60 e0       	ldi	r22, 0x00	; 0
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	80 e8       	ldi	r24, 0x80	; 128
 cae:	9f e3       	ldi	r25, 0x3F	; 63
 cb0:	08 95       	ret
 cb2:	4f e7       	ldi	r20, 0x7F	; 127
 cb4:	9f 77       	andi	r25, 0x7F	; 127
 cb6:	5f 93       	push	r21
 cb8:	4f 93       	push	r20
 cba:	3f 93       	push	r19
 cbc:	2f 93       	push	r18
 cbe:	0e 94 14 07 	call	0xe28	; 0xe28 <log>
 cc2:	2f 91       	pop	r18
 cc4:	3f 91       	pop	r19
 cc6:	4f 91       	pop	r20
 cc8:	5f 91       	pop	r21
 cca:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 cce:	0c 94 71 06 	jmp	0xce2	; 0xce2 <exp>
 cd2:	29 f4       	brne	.+10     	; 0xcde <pow+0xac>
 cd4:	16 f0       	brts	.+4      	; 0xcda <pow+0xa8>
 cd6:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_inf>
 cda:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_zero>
 cde:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_nan>

00000ce2 <exp>:
 ce2:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_splitA>
 ce6:	a8 f3       	brcs	.-22     	; 0xcd2 <pow+0xa0>
 ce8:	96 38       	cpi	r25, 0x86	; 134
 cea:	a0 f7       	brcc	.-24     	; 0xcd4 <pow+0xa2>
 cec:	07 f8       	bld	r0, 7
 cee:	0f 92       	push	r0
 cf0:	e8 94       	clt
 cf2:	2b e3       	ldi	r18, 0x3B	; 59
 cf4:	3a ea       	ldi	r19, 0xAA	; 170
 cf6:	48 eb       	ldi	r20, 0xB8	; 184
 cf8:	5f e7       	ldi	r21, 0x7F	; 127
 cfa:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3_pse>
 cfe:	0f 92       	push	r0
 d00:	0f 92       	push	r0
 d02:	0f 92       	push	r0
 d04:	4d b7       	in	r20, 0x3d	; 61
 d06:	5e b7       	in	r21, 0x3e	; 62
 d08:	0f 92       	push	r0
 d0a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <modf>
 d0e:	e8 e6       	ldi	r30, 0x68	; 104
 d10:	f0 e0       	ldi	r31, 0x00	; 0
 d12:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_powser>
 d16:	4f 91       	pop	r20
 d18:	5f 91       	pop	r21
 d1a:	ef 91       	pop	r30
 d1c:	ff 91       	pop	r31
 d1e:	e5 95       	asr	r30
 d20:	ee 1f       	adc	r30, r30
 d22:	ff 1f       	adc	r31, r31
 d24:	49 f0       	breq	.+18     	; 0xd38 <exp+0x56>
 d26:	fe 57       	subi	r31, 0x7E	; 126
 d28:	e0 68       	ori	r30, 0x80	; 128
 d2a:	44 27       	eor	r20, r20
 d2c:	ee 0f       	add	r30, r30
 d2e:	44 1f       	adc	r20, r20
 d30:	fa 95       	dec	r31
 d32:	e1 f7       	brne	.-8      	; 0xd2c <exp+0x4a>
 d34:	41 95       	neg	r20
 d36:	55 0b       	sbc	r21, r21
 d38:	0e 94 d6 06 	call	0xdac	; 0xdac <ldexp>
 d3c:	0f 90       	pop	r0
 d3e:	07 fe       	sbrs	r0, 7
 d40:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <inverse>
 d44:	08 95       	ret

00000d46 <__fp_powser>:
 d46:	df 93       	push	r29
 d48:	cf 93       	push	r28
 d4a:	1f 93       	push	r17
 d4c:	0f 93       	push	r16
 d4e:	ff 92       	push	r15
 d50:	ef 92       	push	r14
 d52:	df 92       	push	r13
 d54:	7b 01       	movw	r14, r22
 d56:	8c 01       	movw	r16, r24
 d58:	68 94       	set
 d5a:	06 c0       	rjmp	.+12     	; 0xd68 <__fp_powser+0x22>
 d5c:	da 2e       	mov	r13, r26
 d5e:	ef 01       	movw	r28, r30
 d60:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsf3x>
 d64:	fe 01       	movw	r30, r28
 d66:	e8 94       	clt
 d68:	a5 91       	lpm	r26, Z+
 d6a:	25 91       	lpm	r18, Z+
 d6c:	35 91       	lpm	r19, Z+
 d6e:	45 91       	lpm	r20, Z+
 d70:	55 91       	lpm	r21, Z+
 d72:	a6 f3       	brts	.-24     	; 0xd5c <__fp_powser+0x16>
 d74:	ef 01       	movw	r28, r30
 d76:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__addsf3x>
 d7a:	fe 01       	movw	r30, r28
 d7c:	97 01       	movw	r18, r14
 d7e:	a8 01       	movw	r20, r16
 d80:	da 94       	dec	r13
 d82:	69 f7       	brne	.-38     	; 0xd5e <__fp_powser+0x18>
 d84:	df 90       	pop	r13
 d86:	ef 90       	pop	r14
 d88:	ff 90       	pop	r15
 d8a:	0f 91       	pop	r16
 d8c:	1f 91       	pop	r17
 d8e:	cf 91       	pop	r28
 d90:	df 91       	pop	r29
 d92:	08 95       	ret

00000d94 <inverse>:
 d94:	9b 01       	movw	r18, r22
 d96:	ac 01       	movw	r20, r24
 d98:	60 e0       	ldi	r22, 0x00	; 0
 d9a:	70 e0       	ldi	r23, 0x00	; 0
 d9c:	80 e8       	ldi	r24, 0x80	; 128
 d9e:	9f e3       	ldi	r25, 0x3F	; 63
 da0:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__divsf3>
 da4:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_inf>
 da8:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_mpack>

00000dac <ldexp>:
 dac:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_splitA>
 db0:	d8 f3       	brcs	.-10     	; 0xda8 <inverse+0x14>
 db2:	99 23       	and	r25, r25
 db4:	c9 f3       	breq	.-14     	; 0xda8 <inverse+0x14>
 db6:	94 0f       	add	r25, r20
 db8:	51 1d       	adc	r21, r1
 dba:	a3 f3       	brvs	.-24     	; 0xda4 <inverse+0x10>
 dbc:	91 50       	subi	r25, 0x01	; 1
 dbe:	50 40       	sbci	r21, 0x00	; 0
 dc0:	94 f0       	brlt	.+36     	; 0xde6 <ldexp+0x3a>
 dc2:	59 f0       	breq	.+22     	; 0xdda <ldexp+0x2e>
 dc4:	88 23       	and	r24, r24
 dc6:	32 f0       	brmi	.+12     	; 0xdd4 <ldexp+0x28>
 dc8:	66 0f       	add	r22, r22
 dca:	77 1f       	adc	r23, r23
 dcc:	88 1f       	adc	r24, r24
 dce:	91 50       	subi	r25, 0x01	; 1
 dd0:	50 40       	sbci	r21, 0x00	; 0
 dd2:	c1 f7       	brne	.-16     	; 0xdc4 <ldexp+0x18>
 dd4:	9e 3f       	cpi	r25, 0xFE	; 254
 dd6:	51 05       	cpc	r21, r1
 dd8:	2c f7       	brge	.-54     	; 0xda4 <inverse+0x10>
 dda:	88 0f       	add	r24, r24
 ddc:	91 1d       	adc	r25, r1
 dde:	96 95       	lsr	r25
 de0:	87 95       	ror	r24
 de2:	97 f9       	bld	r25, 7
 de4:	08 95       	ret
 de6:	5f 3f       	cpi	r21, 0xFF	; 255
 de8:	ac f0       	brlt	.+42     	; 0xe14 <ldexp+0x68>
 dea:	98 3e       	cpi	r25, 0xE8	; 232
 dec:	9c f0       	brlt	.+38     	; 0xe14 <ldexp+0x68>
 dee:	bb 27       	eor	r27, r27
 df0:	86 95       	lsr	r24
 df2:	77 95       	ror	r23
 df4:	67 95       	ror	r22
 df6:	b7 95       	ror	r27
 df8:	08 f4       	brcc	.+2      	; 0xdfc <ldexp+0x50>
 dfa:	b1 60       	ori	r27, 0x01	; 1
 dfc:	93 95       	inc	r25
 dfe:	c1 f7       	brne	.-16     	; 0xdf0 <ldexp+0x44>
 e00:	bb 0f       	add	r27, r27
 e02:	58 f7       	brcc	.-42     	; 0xdda <ldexp+0x2e>
 e04:	11 f4       	brne	.+4      	; 0xe0a <ldexp+0x5e>
 e06:	60 ff       	sbrs	r22, 0
 e08:	e8 cf       	rjmp	.-48     	; 0xdda <ldexp+0x2e>
 e0a:	6f 5f       	subi	r22, 0xFF	; 255
 e0c:	7f 4f       	sbci	r23, 0xFF	; 255
 e0e:	8f 4f       	sbci	r24, 0xFF	; 255
 e10:	9f 4f       	sbci	r25, 0xFF	; 255
 e12:	e3 cf       	rjmp	.-58     	; 0xdda <ldexp+0x2e>
 e14:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_szero>
 e18:	16 f0       	brts	.+4      	; 0xe1e <ldexp+0x72>
 e1a:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_mpack>
 e1e:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_nan>
 e22:	68 94       	set
 e24:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_inf>

00000e28 <log>:
 e28:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_splitA>
 e2c:	a8 f3       	brcs	.-22     	; 0xe18 <ldexp+0x6c>
 e2e:	99 23       	and	r25, r25
 e30:	c1 f3       	breq	.-16     	; 0xe22 <ldexp+0x76>
 e32:	ae f3       	brts	.-22     	; 0xe1e <ldexp+0x72>
 e34:	df 93       	push	r29
 e36:	cf 93       	push	r28
 e38:	1f 93       	push	r17
 e3a:	0f 93       	push	r16
 e3c:	ff 92       	push	r15
 e3e:	c9 2f       	mov	r28, r25
 e40:	dd 27       	eor	r29, r29
 e42:	88 23       	and	r24, r24
 e44:	2a f0       	brmi	.+10     	; 0xe50 <log+0x28>
 e46:	21 97       	sbiw	r28, 0x01	; 1
 e48:	66 0f       	add	r22, r22
 e4a:	77 1f       	adc	r23, r23
 e4c:	88 1f       	adc	r24, r24
 e4e:	da f7       	brpl	.-10     	; 0xe46 <log+0x1e>
 e50:	20 e0       	ldi	r18, 0x00	; 0
 e52:	30 e0       	ldi	r19, 0x00	; 0
 e54:	40 e8       	ldi	r20, 0x80	; 128
 e56:	5f eb       	ldi	r21, 0xBF	; 191
 e58:	9f e3       	ldi	r25, 0x3F	; 63
 e5a:	88 39       	cpi	r24, 0x98	; 152
 e5c:	20 f0       	brcs	.+8      	; 0xe66 <log+0x3e>
 e5e:	80 3e       	cpi	r24, 0xE0	; 224
 e60:	38 f0       	brcs	.+14     	; 0xe70 <log+0x48>
 e62:	21 96       	adiw	r28, 0x01	; 1
 e64:	8f 77       	andi	r24, 0x7F	; 127
 e66:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 e6a:	e0 e9       	ldi	r30, 0x90	; 144
 e6c:	f0 e0       	ldi	r31, 0x00	; 0
 e6e:	04 c0       	rjmp	.+8      	; 0xe78 <log+0x50>
 e70:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
 e74:	ed eb       	ldi	r30, 0xBD	; 189
 e76:	f0 e0       	ldi	r31, 0x00	; 0
 e78:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_powser>
 e7c:	8b 01       	movw	r16, r22
 e7e:	be 01       	movw	r22, r28
 e80:	ec 01       	movw	r28, r24
 e82:	fb 2e       	mov	r15, r27
 e84:	6f 57       	subi	r22, 0x7F	; 127
 e86:	71 09       	sbc	r23, r1
 e88:	75 95       	asr	r23
 e8a:	77 1f       	adc	r23, r23
 e8c:	88 0b       	sbc	r24, r24
 e8e:	99 0b       	sbc	r25, r25
 e90:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatsisf>
 e94:	28 e1       	ldi	r18, 0x18	; 24
 e96:	32 e7       	ldi	r19, 0x72	; 114
 e98:	41 e3       	ldi	r20, 0x31	; 49
 e9a:	5f e3       	ldi	r21, 0x3F	; 63
 e9c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsf3x>
 ea0:	af 2d       	mov	r26, r15
 ea2:	98 01       	movw	r18, r16
 ea4:	ae 01       	movw	r20, r28
 ea6:	ff 90       	pop	r15
 ea8:	0f 91       	pop	r16
 eaa:	1f 91       	pop	r17
 eac:	cf 91       	pop	r28
 eae:	df 91       	pop	r29
 eb0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__addsf3x>
 eb4:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_round>

00000eb8 <modf>:
 eb8:	fa 01       	movw	r30, r20
 eba:	dc 01       	movw	r26, r24
 ebc:	aa 0f       	add	r26, r26
 ebe:	bb 1f       	adc	r27, r27
 ec0:	9b 01       	movw	r18, r22
 ec2:	ac 01       	movw	r20, r24
 ec4:	bf 57       	subi	r27, 0x7F	; 127
 ec6:	28 f4       	brcc	.+10     	; 0xed2 <modf+0x1a>
 ec8:	22 27       	eor	r18, r18
 eca:	33 27       	eor	r19, r19
 ecc:	44 27       	eor	r20, r20
 ece:	50 78       	andi	r21, 0x80	; 128
 ed0:	20 c0       	rjmp	.+64     	; 0xf12 <modf+0x5a>
 ed2:	b7 51       	subi	r27, 0x17	; 23
 ed4:	90 f4       	brcc	.+36     	; 0xefa <modf+0x42>
 ed6:	ab 2f       	mov	r26, r27
 ed8:	00 24       	eor	r0, r0
 eda:	46 95       	lsr	r20
 edc:	37 95       	ror	r19
 ede:	27 95       	ror	r18
 ee0:	01 1c       	adc	r0, r1
 ee2:	a3 95       	inc	r26
 ee4:	d2 f3       	brmi	.-12     	; 0xeda <modf+0x22>
 ee6:	00 20       	and	r0, r0
 ee8:	71 f0       	breq	.+28     	; 0xf06 <modf+0x4e>
 eea:	22 0f       	add	r18, r18
 eec:	33 1f       	adc	r19, r19
 eee:	44 1f       	adc	r20, r20
 ef0:	b3 95       	inc	r27
 ef2:	da f3       	brmi	.-10     	; 0xeea <modf+0x32>
 ef4:	0e d0       	rcall	.+28     	; 0xf12 <modf+0x5a>
 ef6:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__subsf3>
 efa:	61 30       	cpi	r22, 0x01	; 1
 efc:	71 05       	cpc	r23, r1
 efe:	a0 e8       	ldi	r26, 0x80	; 128
 f00:	8a 07       	cpc	r24, r26
 f02:	b9 46       	sbci	r27, 0x69	; 105
 f04:	30 f4       	brcc	.+12     	; 0xf12 <modf+0x5a>
 f06:	9b 01       	movw	r18, r22
 f08:	ac 01       	movw	r20, r24
 f0a:	66 27       	eor	r22, r22
 f0c:	77 27       	eor	r23, r23
 f0e:	88 27       	eor	r24, r24
 f10:	90 78       	andi	r25, 0x80	; 128
 f12:	30 96       	adiw	r30, 0x00	; 0
 f14:	21 f0       	breq	.+8      	; 0xf1e <modf+0x66>
 f16:	20 83       	st	Z, r18
 f18:	31 83       	std	Z+1, r19	; 0x01
 f1a:	42 83       	std	Z+2, r20	; 0x02
 f1c:	53 83       	std	Z+3, r21	; 0x03
 f1e:	08 95       	ret

00000f20 <__fp_mpack>:
 f20:	9f 3f       	cpi	r25, 0xFF	; 255
 f22:	31 f0       	breq	.+12     	; 0xf30 <__fp_mpack_finite+0xc>

00000f24 <__fp_mpack_finite>:
 f24:	91 50       	subi	r25, 0x01	; 1
 f26:	20 f4       	brcc	.+8      	; 0xf30 <__fp_mpack_finite+0xc>
 f28:	87 95       	ror	r24
 f2a:	77 95       	ror	r23
 f2c:	67 95       	ror	r22
 f2e:	b7 95       	ror	r27
 f30:	88 0f       	add	r24, r24
 f32:	91 1d       	adc	r25, r1
 f34:	96 95       	lsr	r25
 f36:	87 95       	ror	r24
 f38:	97 f9       	bld	r25, 7
 f3a:	08 95       	ret

00000f3c <_exit>:
 f3c:	f8 94       	cli

00000f3e <__stop_program>:
 f3e:	ff cf       	rjmp	.-2      	; 0xf3e <__stop_program>
