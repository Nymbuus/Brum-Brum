
Elektronikprojekt_Integration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000013de  00001472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800102  00800102  00001474  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020c9  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001125  00000000  00000000  0000382d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d9  00000000  00000000  00004952  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00005b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac4  00000000  00000000  00006210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011dc  00000000  00000000  00006cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00007eb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_1>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_7>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_13>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_16>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <pid_init+0x98>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	ee ed       	ldi	r30, 0xDE	; 222
      fe:	f3 e1       	ldi	r31, 0x13	; 19
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a2 30       	cpi	r26, 0x02	; 2
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a2 e0       	ldi	r26, 0x02	; 2
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a4 34       	cpi	r26, 0x44	; 68
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 88 03 	call	0x710	; 0x710 <main>
     120:	0c 94 ed 09 	jmp	0x13da	; 0x13da <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <adc_read>:
	{
		temp_readings += adc_read(pin);
	}
	
	return (temp_readings >> 2);
}
     128:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     12c:	87 ec       	ldi	r24, 0xC7	; 199
     12e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     132:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     136:	84 ff       	sbrs	r24, 4
     138:	fc cf       	rjmp	.-8      	; 0x132 <adc_read+0xa>
     13a:	80 e1       	ldi	r24, 0x10	; 16
     13c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     140:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     144:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     148:	08 95       	ret

0000014a <adc_read_avg_8>:
/********************************************************************************
* adc_read_avg_8: Performs eight AD-conversions on the desired pin and returns
*                 the result as an average value.
********************************************************************************/
uint16_t adc_read_avg_8(uint8_t pin)
{
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	d8 2f       	mov	r29, r24
	uint16_t temp_readings = 0;
	
	for (uint8_t i = 0; i < 8; i++)
     154:	c0 e0       	ldi	r28, 0x00	; 0
* adc_read_avg_8: Performs eight AD-conversions on the desired pin and returns
*                 the result as an average value.
********************************************************************************/
uint16_t adc_read_avg_8(uint8_t pin)
{
	uint16_t temp_readings = 0;
     156:	00 e0       	ldi	r16, 0x00	; 0
     158:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 8; i++)
     15a:	06 c0       	rjmp	.+12     	; 0x168 <adc_read_avg_8+0x1e>
	{
		temp_readings += adc_read(pin);
     15c:	8d 2f       	mov	r24, r29
     15e:	0e 94 94 00 	call	0x128	; 0x128 <adc_read>
     162:	08 0f       	add	r16, r24
     164:	19 1f       	adc	r17, r25
********************************************************************************/
uint16_t adc_read_avg_8(uint8_t pin)
{
	uint16_t temp_readings = 0;
	
	for (uint8_t i = 0; i < 8; i++)
     166:	cf 5f       	subi	r28, 0xFF	; 255
     168:	c8 30       	cpi	r28, 0x08	; 8
     16a:	c0 f3       	brcs	.-16     	; 0x15c <adc_read_avg_8+0x12>
	{
		temp_readings += adc_read(pin);
	}
	
	return (temp_readings >> 3);
}
     16c:	c8 01       	movw	r24, r16
     16e:	96 95       	lsr	r25
     170:	87 95       	ror	r24
     172:	96 95       	lsr	r25
     174:	87 95       	ror	r24
     176:	96 95       	lsr	r25
     178:	87 95       	ror	r24
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	1f 91       	pop	r17
     180:	0f 91       	pop	r16
     182:	08 95       	ret

00000184 <adc_read_voltage>:
* adc_read_voltage: Performs eight AD-conversions on the desired pin and returns
*                   the result calculated into a voltage level.
********************************************************************************/
double adc_read_voltage(uint8_t pin)
{
	double voltage = ADC_RESOLUTION * adc_read_avg_8(pin);
     184:	0e 94 a5 00 	call	0x14a	; 0x14a <adc_read_avg_8>
     188:	bc 01       	movw	r22, r24
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 44 07 	call	0xe88	; 0xe88 <__floatunsisf>
     192:	27 e1       	ldi	r18, 0x17	; 23
     194:	37 eb       	ldi	r19, 0xB7	; 183
     196:	41 e5       	ldi	r20, 0x51	; 81
     198:	5b e3       	ldi	r21, 0x3B	; 59
     19a:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
	
	return voltage;
     19e:	08 95       	ret

000001a0 <fsm_set_state>:
/********************************************************************************
* fsm_set_state: Sets the state machine to a new state and takes actions
*                based on which states the transition is between.
********************************************************************************/
void fsm_set_state(const enum STATE new_state)
{
     1a0:	cf 93       	push	r28
     1a2:	c8 2f       	mov	r28, r24
	switch (current_state)
     1a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	99 f0       	breq	.+38     	; 0x1d2 <fsm_set_state+0x32>
     1ac:	30 f0       	brcs	.+12     	; 0x1ba <fsm_set_state+0x1a>
     1ae:	82 30       	cpi	r24, 0x02	; 2
     1b0:	29 f1       	breq	.+74     	; 0x1fc <fsm_set_state+0x5c>
     1b2:	83 30       	cpi	r24, 0x03	; 3
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <fsm_set_state+0x18>
     1b6:	43 c0       	rjmp	.+134    	; 0x23e <fsm_set_state+0x9e>
     1b8:	56 c0       	rjmp	.+172    	; 0x266 <fsm_set_state+0xc6>
	{
		case STATE_STANDBY:
		{
			if (new_state == STATE_DRIVE)
     1ba:	c1 30       	cpi	r28, 0x01	; 1
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <fsm_set_state+0x20>
     1be:	53 c0       	rjmp	.+166    	; 0x266 <fsm_set_state+0xc6>
			{
				status_led_display_color(LED_GREEN);
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
				motor_controller_set_direction(MOTOR_DIRECTION_FORWARD);
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	0e 94 df 03 	call	0x7be	; 0x7be <motor_controller_set_direction>
				current_state = new_state;
     1cc:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
				
				break;
     1d0:	4a c0       	rjmp	.+148    	; 0x266 <fsm_set_state+0xc6>
				break;
			}
		}
		case STATE_DRIVE:
		{
			if (new_state == STATE_STOP)
     1d2:	c2 30       	cpi	r28, 0x02	; 2
     1d4:	41 f4       	brne	.+16     	; 0x1e6 <fsm_set_state+0x46>
			{
				status_led_display_color(LED_RED);
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
				motor_controller_stop();
     1dc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <motor_controller_stop>
				current_state = new_state;
     1e0:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
				
				break;
     1e4:	40 c0       	rjmp	.+128    	; 0x266 <fsm_set_state+0xc6>
			}
			else if (new_state == STATE_STANDBY)
     1e6:	c1 11       	cpse	r28, r1
     1e8:	3e c0       	rjmp	.+124    	; 0x266 <fsm_set_state+0xc6>
			{
				status_led_display_color(LED_PURPLE);
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
				motor_controller_stop();
     1f0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <motor_controller_stop>
				asm("CLI");
     1f4:	f8 94       	cli
				current_state = new_state;
     1f6:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
				
				break;
     1fa:	35 c0       	rjmp	.+106    	; 0x266 <fsm_set_state+0xc6>
				break;
			}
		}
		case STATE_STOP:
		{
			if (new_state == STATE_DRIVE)
     1fc:	c1 30       	cpi	r28, 0x01	; 1
     1fe:	49 f4       	brne	.+18     	; 0x212 <fsm_set_state+0x72>
			{
				status_led_display_color(LED_GREEN);
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
				motor_controller_set_direction(MOTOR_DIRECTION_FORWARD);
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 df 03 	call	0x7be	; 0x7be <motor_controller_set_direction>
				current_state = new_state;
     20c:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
				
				break;
     210:	2a c0       	rjmp	.+84     	; 0x266 <fsm_set_state+0xc6>
			}
			else if (new_state == STATE_REVERSE)
     212:	c3 30       	cpi	r28, 0x03	; 3
     214:	49 f4       	brne	.+18     	; 0x228 <fsm_set_state+0x88>
			{
				status_led_display_color(LED_ORANGE);
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
				motor_controller_set_direction(MOTOR_DIRECTION_BACKWARD);
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	0e 94 df 03 	call	0x7be	; 0x7be <motor_controller_set_direction>
				current_state = new_state;
     222:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
				
				break;
     226:	1f c0       	rjmp	.+62     	; 0x266 <fsm_set_state+0xc6>
			}
			else if (new_state == STATE_STANDBY)
     228:	c1 11       	cpse	r28, r1
     22a:	1d c0       	rjmp	.+58     	; 0x266 <fsm_set_state+0xc6>
			{
				status_led_display_color(LED_PURPLE);
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
				motor_controller_stop();
     232:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <motor_controller_stop>
				asm("CLI");
     236:	f8 94       	cli
				current_state = new_state;
     238:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
				
				break;
     23c:	14 c0       	rjmp	.+40     	; 0x266 <fsm_set_state+0xc6>
				break;
			}
		}
		case STATE_REVERSE:
		{
			if (new_state == STATE_STOP)
     23e:	c2 30       	cpi	r28, 0x02	; 2
     240:	41 f4       	brne	.+16     	; 0x252 <fsm_set_state+0xb2>
			{
				status_led_display_color(LED_RED);
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
				motor_controller_stop();
     248:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <motor_controller_stop>
				current_state = new_state;
     24c:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
				
				break;
     250:	0a c0       	rjmp	.+20     	; 0x266 <fsm_set_state+0xc6>
			}
			else if (new_state == STATE_STANDBY)
     252:	c1 11       	cpse	r28, r1
     254:	08 c0       	rjmp	.+16     	; 0x266 <fsm_set_state+0xc6>
			{
				status_led_display_color(LED_PURPLE);
     256:	84 e0       	ldi	r24, 0x04	; 4
     258:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
				motor_controller_stop();
     25c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <motor_controller_stop>
				asm("CLI");
     260:	f8 94       	cli
				current_state = new_state;
     262:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
			break;
		}
	}

	return;	
}
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <fsm_run>:
/********************************************************************************
* fsm_run: Determines the actions to be taken based on the current state.
********************************************************************************/
void fsm_run(void)
{
	switch (current_state)
     26a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	f9 f0       	breq	.+62     	; 0x2b0 <fsm_run+0x46>
     272:	83 30       	cpi	r24, 0x03	; 3
     274:	a9 f1       	breq	.+106    	; 0x2e0 <fsm_run+0x76>
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	09 f0       	breq	.+2      	; 0x27c <fsm_run+0x12>
     27a:	4b c0       	rjmp	.+150    	; 0x312 <fsm_run+0xa8>
		{	
			break;
		}
		case STATE_DRIVE:
		{
			if (ir_sensor_check_stop_condition())
     27c:	0e 94 45 02 	call	0x48a	; 0x48a <ir_sensor_check_stop_condition>
     280:	88 23       	and	r24, r24
     282:	21 f0       	breq	.+8      	; 0x28c <fsm_run+0x22>
			{
				fsm_set_state(STATE_STOP);
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <fsm_set_state>
     28a:	08 95       	ret
			}
			else
			{
				servo_set_angle((uint8_t)servo_pid.output);
     28c:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <servo_pid+0x4>
     290:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <servo_pid+0x5>
     294:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <servo_pid+0x6>
     298:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <servo_pid+0x7>
     29c:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fixunssfsi>
     2a0:	86 2f       	mov	r24, r22
     2a2:	0e 94 62 05 	call	0xac4	; 0xac4 <servo_set_angle>
				motor_controller_set_target_speed(motor_controller_get_regulator_output());		
     2a6:	0e 94 1a 04 	call	0x834	; 0x834 <motor_controller_get_regulator_output>
     2aa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <motor_controller_set_target_speed>
     2ae:	08 95       	ret

			break;
		}
		case STATE_STOP:
		{
			if (!motor_controller_get_motor_stopped() && ir_sensor_check_obstacle_cleared())
     2b0:	0e 94 20 04 	call	0x840	; 0x840 <motor_controller_get_motor_stopped>
     2b4:	81 11       	cpse	r24, r1
     2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <fsm_run+0x5e>
     2b8:	0e 94 0d 02 	call	0x41a	; 0x41a <ir_sensor_check_obstacle_cleared>
     2bc:	88 23       	and	r24, r24
     2be:	21 f0       	breq	.+8      	; 0x2c8 <fsm_run+0x5e>
			{
				fsm_set_state(STATE_DRIVE);
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <fsm_set_state>
     2c6:	08 95       	ret
			}
			else if (!motor_controller_get_motor_stopped() && !ir_sensor_check_obstacle_cleared())
     2c8:	0e 94 20 04 	call	0x840	; 0x840 <motor_controller_get_motor_stopped>
     2cc:	81 11       	cpse	r24, r1
     2ce:	21 c0       	rjmp	.+66     	; 0x312 <fsm_run+0xa8>
     2d0:	0e 94 0d 02 	call	0x41a	; 0x41a <ir_sensor_check_obstacle_cleared>
     2d4:	81 11       	cpse	r24, r1
     2d6:	1d c0       	rjmp	.+58     	; 0x312 <fsm_run+0xa8>
			{
				fsm_set_state(STATE_REVERSE);
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <fsm_set_state>
     2de:	08 95       	ret
			
			break;
		}
		case STATE_REVERSE:
		{				
			if (ir_sensor_check_obstacle_cleared())
     2e0:	0e 94 0d 02 	call	0x41a	; 0x41a <ir_sensor_check_obstacle_cleared>
     2e4:	88 23       	and	r24, r24
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <fsm_run+0x86>
			{
				fsm_set_state(STATE_STOP);
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <fsm_set_state>
     2ee:	08 95       	ret
			}
			else
			{
				motor_controller_set_target_speed(MOTOR_SPEED_MIN);
     2f0:	82 e3       	ldi	r24, 0x32	; 50
     2f2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <motor_controller_set_target_speed>
				servo_set_angle((SERVO_ANGLE_RANGE - (uint8_t)servo_pid.output));		
     2f6:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <servo_pid+0x4>
     2fa:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <servo_pid+0x5>
     2fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <servo_pid+0x6>
     302:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <servo_pid+0x7>
     306:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fixunssfsi>
     30a:	84 eb       	ldi	r24, 0xB4	; 180
     30c:	86 1b       	sub	r24, r22
     30e:	0e 94 62 05 	call	0xac4	; 0xac4 <servo_set_angle>
     312:	08 95       	ret

00000314 <fsm_get_current_state>:
* fsm_get_current_state: Returns the current state.
********************************************************************************/
enum STATE fsm_get_current_state(void)
{
	return current_state;	
     314:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     318:	08 95       	ret

0000031a <ir_sensor_get_input_difference>:
* ir_sensor_get_input_difference: Calculates the difference in cm between 
*                                 two distance sensors.
********************************************************************************/
double ir_sensor_get_input_difference(const double val_1, const double val_2)
{		
	return (val_1 - val_2);
     31a:	0e 94 31 06 	call	0xc62	; 0xc62 <__subsf3>
}
     31e:	08 95       	ret

00000320 <ir_sensor_get_servo_pid_input>:
*                                regulator based on readings from two
*                                side-facing distance sensors.
********************************************************************************/
double ir_sensor_get_servo_pid_input(const double val_1, const double val_2)
{
	const double input_difference = ir_sensor_get_input_difference(val_1, val_2);
     320:	0e 94 8d 01 	call	0x31a	; 0x31a <ir_sensor_get_input_difference>
	const double scaled_input = ((input_difference + DISTANCE_MAX) / (2 * DISTANCE_MAX));
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	4c e8       	ldi	r20, 0x8C	; 140
     32a:	52 e4       	ldi	r21, 0x42	; 66
     32c:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4c e0       	ldi	r20, 0x0C	; 12
     336:	53 e4       	ldi	r21, 0x43	; 67
     338:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divsf3>
	
	return (scaled_input * 180);
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	44 e3       	ldi	r20, 0x34	; 52
     342:	53 e4       	ldi	r21, 0x43	; 67
     344:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
}
     348:	08 95       	ret

0000034a <ir_sensor_check_distance>:
* ir_sensor_check_distance: Matches a given distance in cm against defined
*                           minimum and maximum values. Corrects the value
*                           to the closest boundary if it is out of range.
********************************************************************************/
double ir_sensor_check_distance(double val)
{
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	06 2f       	mov	r16, r22
     354:	17 2f       	mov	r17, r23
     356:	d8 2f       	mov	r29, r24
     358:	c9 2f       	mov	r28, r25
	if (val > DISTANCE_MAX)
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4c e8       	ldi	r20, 0x8C	; 140
     360:	52 e4       	ldi	r21, 0x42	; 66
     362:	0e 94 f6 07 	call	0xfec	; 0xfec <__gesf2>
     366:	18 16       	cp	r1, r24
     368:	8c f0       	brlt	.+34     	; 0x38c <ir_sensor_check_distance+0x42>
	{
		val = (double)DISTANCE_MAX;
		return val;
	}
	else if (val < DISTANCE_MIN)
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	40 ef       	ldi	r20, 0xF0	; 240
     370:	50 e4       	ldi	r21, 0x40	; 64
     372:	60 2f       	mov	r22, r16
     374:	71 2f       	mov	r23, r17
     376:	8d 2f       	mov	r24, r29
     378:	9c 2f       	mov	r25, r28
     37a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__cmpsf2>
     37e:	88 23       	and	r24, r24
     380:	4c f4       	brge	.+18     	; 0x394 <ir_sensor_check_distance+0x4a>
	{
		val = (double)DISTANCE_MIN;
		return val;
     382:	00 e0       	ldi	r16, 0x00	; 0
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	d0 ef       	ldi	r29, 0xF0	; 240
     388:	c0 e4       	ldi	r28, 0x40	; 64
     38a:	04 c0       	rjmp	.+8      	; 0x394 <ir_sensor_check_distance+0x4a>
double ir_sensor_check_distance(double val)
{
	if (val > DISTANCE_MAX)
	{
		val = (double)DISTANCE_MAX;
		return val;
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	10 e0       	ldi	r17, 0x00	; 0
     390:	dc e8       	ldi	r29, 0x8C	; 140
     392:	c2 e4       	ldi	r28, 0x42	; 66
	{
		val = (double)DISTANCE_MIN;
		return val;
	}
	else return val;
}
     394:	60 2f       	mov	r22, r16
     396:	71 2f       	mov	r23, r17
     398:	8d 2f       	mov	r24, r29
     39a:	9c 2f       	mov	r25, r28
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <ir_sensor_get_distance_cm>:
* ir_sensor_get_distance_cm: Measures the distance in cm to the closest
*                            detected object by the chosen sensor.
********************************************************************************/
double ir_sensor_get_distance_cm(uint8_t pin)
{
	double distance_cm = 29.988 * pow(adc_read_voltage(pin), -1.173);
     3a6:	0e 94 c2 00 	call	0x184	; 0x184 <adc_read_voltage>
     3aa:	2d ed       	ldi	r18, 0xDD	; 221
     3ac:	34 e2       	ldi	r19, 0x24	; 36
     3ae:	46 e9       	ldi	r20, 0x96	; 150
     3b0:	5f eb       	ldi	r21, 0xBF	; 191
     3b2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <pow>
     3b6:	2d e6       	ldi	r18, 0x6D	; 109
     3b8:	37 ee       	ldi	r19, 0xE7	; 231
     3ba:	4f ee       	ldi	r20, 0xEF	; 239
     3bc:	51 e4       	ldi	r21, 0x41	; 65
     3be:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
	distance_cm = ir_sensor_check_distance(distance_cm);
     3c2:	0e 94 a5 01 	call	0x34a	; 0x34a <ir_sensor_check_distance>

	return distance_cm;
}
     3c6:	08 95       	ret

000003c8 <ir_sensor_read_all>:
/********************************************************************************
* ir_sensor_read_all: Gets distance readings from all the sensors
*                     and stores the data in the static array distance_readings.
********************************************************************************/
void ir_sensor_read_all(void)
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
	//static volatile uint8_t i = 0;
	
	distance_readings[INDEX_SENSOR_LEFT] = ir_sensor_get_distance_cm(SENSOR_LEFT_PIN);
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ir_sensor_get_distance_cm>
     3d2:	c3 e0       	ldi	r28, 0x03	; 3
     3d4:	d1 e0       	ldi	r29, 0x01	; 1
     3d6:	68 87       	std	Y+8, r22	; 0x08
     3d8:	79 87       	std	Y+9, r23	; 0x09
     3da:	8a 87       	std	Y+10, r24	; 0x0a
     3dc:	9b 87       	std	Y+11, r25	; 0x0b
	distance_readings[INDEX_SENSOR_CENTER] = ir_sensor_get_distance_cm(SENSOR_CENTER_PIN);
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ir_sensor_get_distance_cm>
     3e4:	6c 83       	std	Y+4, r22	; 0x04
     3e6:	7d 83       	std	Y+5, r23	; 0x05
     3e8:	8e 83       	std	Y+6, r24	; 0x06
     3ea:	9f 83       	std	Y+7, r25	; 0x07
	distance_readings[INDEX_SENSOR_RIGHT] = ir_sensor_get_distance_cm(SENSOR_RIGHT_PIN);
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ir_sensor_get_distance_cm>
     3f2:	68 83       	st	Y, r22
     3f4:	79 83       	std	Y+1, r23	; 0x01
     3f6:	8a 83       	std	Y+2, r24	; 0x02
     3f8:	9b 83       	std	Y+3, r25	; 0x03
		previous_left_values[i] = (uint8_t)distance_readings[INDEX_SENSOR_LEFT];
		previous_right_values[i] = (uint8_t)distance_readings[INDEX_SENSOR_RIGHT];
	}
	*/
	return;
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <ir_sensor_get_distance_reading>:
*                                 static array distance_readings at the
*                                 given index.
********************************************************************************/
double ir_sensor_get_distance_reading(const uint8_t index)
{
	return distance_readings[index];
     400:	e8 2f       	mov	r30, r24
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	ed 5f       	subi	r30, 0xFD	; 253
     40e:	fe 4f       	sbci	r31, 0xFE	; 254
     410:	60 81       	ld	r22, Z
     412:	71 81       	ldd	r23, Z+1	; 0x01
     414:	82 81       	ldd	r24, Z+2	; 0x02
     416:	93 81       	ldd	r25, Z+3	; 0x03
}
     418:	08 95       	ret

0000041a <ir_sensor_check_obstacle_cleared>:
*                                   within 25 cm of either side-facing sensor
*                                   and within 35 cm of the front-facing sensor.
********************************************************************************/
bool ir_sensor_check_obstacle_cleared(void)
{
	if (distance_readings[INDEX_SENSOR_LEFT] > OBSTACLE_CLEARED_THRESHOLD && 
     41a:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <distance_readings+0x8>
     41e:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <distance_readings+0x9>
     422:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <distance_readings+0xa>
     426:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <distance_readings+0xb>
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	48 ec       	ldi	r20, 0xC8	; 200
     430:	51 e4       	ldi	r21, 0x41	; 65
     432:	0e 94 f6 07 	call	0xfec	; 0xfec <__gesf2>
     436:	18 16       	cp	r1, r24
     438:	14 f5       	brge	.+68     	; 0x47e <ir_sensor_check_obstacle_cleared+0x64>
		distance_readings[INDEX_SENSOR_CENTER] > OBSTACLE_CLEARED_CENTER_THRESHOLD && 
     43a:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <distance_readings+0x4>
     43e:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <distance_readings+0x5>
     442:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <distance_readings+0x6>
     446:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <distance_readings+0x7>
*                                   within 25 cm of either side-facing sensor
*                                   and within 35 cm of the front-facing sensor.
********************************************************************************/
bool ir_sensor_check_obstacle_cleared(void)
{
	if (distance_readings[INDEX_SENSOR_LEFT] > OBSTACLE_CLEARED_THRESHOLD && 
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	4c e0       	ldi	r20, 0x0C	; 12
     450:	52 e4       	ldi	r21, 0x42	; 66
     452:	0e 94 f6 07 	call	0xfec	; 0xfec <__gesf2>
     456:	18 16       	cp	r1, r24
     458:	a4 f4       	brge	.+40     	; 0x482 <ir_sensor_check_obstacle_cleared+0x68>
		distance_readings[INDEX_SENSOR_CENTER] > OBSTACLE_CLEARED_CENTER_THRESHOLD && 
		distance_readings[INDEX_SENSOR_RIGHT] > OBSTACLE_CLEARED_THRESHOLD)
     45a:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <distance_readings>
     45e:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <distance_readings+0x1>
     462:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <distance_readings+0x2>
     466:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <distance_readings+0x3>
*                                   and within 35 cm of the front-facing sensor.
********************************************************************************/
bool ir_sensor_check_obstacle_cleared(void)
{
	if (distance_readings[INDEX_SENSOR_LEFT] > OBSTACLE_CLEARED_THRESHOLD && 
		distance_readings[INDEX_SENSOR_CENTER] > OBSTACLE_CLEARED_CENTER_THRESHOLD && 
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	48 ec       	ldi	r20, 0xC8	; 200
     470:	51 e4       	ldi	r21, 0x41	; 65
     472:	0e 94 f6 07 	call	0xfec	; 0xfec <__gesf2>
     476:	18 16       	cp	r1, r24
     478:	34 f0       	brlt	.+12     	; 0x486 <ir_sensor_check_obstacle_cleared+0x6c>
	{
		return true;
	}
	else
	{
		return false;
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	08 95       	ret
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	08 95       	ret
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
{
	if (distance_readings[INDEX_SENSOR_LEFT] > OBSTACLE_CLEARED_THRESHOLD && 
		distance_readings[INDEX_SENSOR_CENTER] > OBSTACLE_CLEARED_CENTER_THRESHOLD && 
		distance_readings[INDEX_SENSOR_RIGHT] > OBSTACLE_CLEARED_THRESHOLD)
	{
		return true;
     486:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return false;
	}
}
     488:	08 95       	ret

0000048a <ir_sensor_check_stop_condition>:
* ir_sensor_check_stop_condition: Evaluates sensor data and returns
*                                 true if an obstacle is detected close to
*                                 either side of the car.
********************************************************************************/
bool ir_sensor_check_stop_condition(void)
{
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
	if (distance_readings[INDEX_SENSOR_CENTER] <= STOP_THRESHOLD && distance_readings[INDEX_SENSOR_LEFT] <= STOP_THRESHOLD)
     492:	c0 90 07 01 	lds	r12, 0x0107	; 0x800107 <distance_readings+0x4>
     496:	d0 90 08 01 	lds	r13, 0x0108	; 0x800108 <distance_readings+0x5>
     49a:	e0 90 09 01 	lds	r14, 0x0109	; 0x800109 <distance_readings+0x6>
     49e:	f0 90 0a 01 	lds	r15, 0x010A	; 0x80010a <distance_readings+0x7>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e2       	ldi	r20, 0x20	; 32
     4a8:	51 e4       	ldi	r21, 0x41	; 65
     4aa:	c7 01       	movw	r24, r14
     4ac:	b6 01       	movw	r22, r12
     4ae:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__cmpsf2>
     4b2:	18 16       	cp	r1, r24
     4b4:	84 f0       	brlt	.+32     	; 0x4d6 <ir_sensor_check_stop_condition+0x4c>
     4b6:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <distance_readings+0x8>
     4ba:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <distance_readings+0x9>
     4be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <distance_readings+0xa>
     4c2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <distance_readings+0xb>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e2       	ldi	r20, 0x20	; 32
     4cc:	51 e4       	ldi	r21, 0x41	; 65
     4ce:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__cmpsf2>
     4d2:	18 16       	cp	r1, r24
     4d4:	e4 f4       	brge	.+56     	; 0x50e <ir_sensor_check_stop_condition+0x84>
	{
		return true;
	}
	else if (distance_readings[INDEX_SENSOR_CENTER] <= STOP_THRESHOLD && distance_readings[INDEX_SENSOR_RIGHT] <= STOP_THRESHOLD)
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e2       	ldi	r20, 0x20	; 32
     4dc:	51 e4       	ldi	r21, 0x41	; 65
     4de:	c7 01       	movw	r24, r14
     4e0:	b6 01       	movw	r22, r12
     4e2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__cmpsf2>
     4e6:	18 16       	cp	r1, r24
     4e8:	a4 f0       	brlt	.+40     	; 0x512 <ir_sensor_check_stop_condition+0x88>
     4ea:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <distance_readings>
     4ee:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <distance_readings+0x1>
     4f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <distance_readings+0x2>
     4f6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <distance_readings+0x3>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e2       	ldi	r20, 0x20	; 32
     500:	51 e4       	ldi	r21, 0x41	; 65
     502:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__cmpsf2>
     506:	18 16       	cp	r1, r24
     508:	34 f4       	brge	.+12     	; 0x516 <ir_sensor_check_stop_condition+0x8c>
	{
		return true;
	}
	else
	{
		return false;
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	05 c0       	rjmp	.+10     	; 0x518 <ir_sensor_check_stop_condition+0x8e>
********************************************************************************/
bool ir_sensor_check_stop_condition(void)
{
	if (distance_readings[INDEX_SENSOR_CENTER] <= STOP_THRESHOLD && distance_readings[INDEX_SENSOR_LEFT] <= STOP_THRESHOLD)
	{
		return true;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	03 c0       	rjmp	.+6      	; 0x518 <ir_sensor_check_stop_condition+0x8e>
	{
		return true;
	}
	else
	{
		return false;
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	01 c0       	rjmp	.+2      	; 0x518 <ir_sensor_check_stop_condition+0x8e>
	{
		return true;
	}
	else if (distance_readings[INDEX_SENSOR_CENTER] <= STOP_THRESHOLD && distance_readings[INDEX_SENSOR_RIGHT] <= STOP_THRESHOLD)
	{
		return true;
     516:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return false;
	}
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	08 95       	ret

00000522 <__vector_1>:
*            Status of START_SIGNAL_PIN is read, if the bit is set the start 
*            module has been issued a start-command. 
*            If the bit is cleared a stop-signal has been sent.
********************************************************************************/
ISR (INT0_vect)
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	5f 93       	push	r21
     534:	6f 93       	push	r22
     536:	7f 93       	push	r23
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
	if ((PIND & (1 << START_SIGNAL_PIN)) != 0)
     544:	4a 9b       	sbis	0x09, 2	; 9
     546:	04 c0       	rjmp	.+8      	; 0x550 <__vector_1+0x2e>
	{
		fsm_set_state(STATE_DRIVE);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <fsm_set_state>
     54e:	03 c0       	rjmp	.+6      	; 0x556 <__vector_1+0x34>
	}
	else 
	{
		fsm_set_state(STATE_STANDBY);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <fsm_set_state>
	}
	
	return;
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <__vector_16>:
*                  Controls accelaration and deceleration of the motor by
*                  adjusting the motor speed towards the current target speed
*                  every 5 ms.
********************************************************************************/
ISR (TIMER0_OVF_vect)
{
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	2f 93       	push	r18
     584:	3f 93       	push	r19
     586:	4f 93       	push	r20
     588:	5f 93       	push	r21
     58a:	6f 93       	push	r22
     58c:	7f 93       	push	r23
     58e:	8f 93       	push	r24
     590:	9f 93       	push	r25
     592:	af 93       	push	r26
     594:	bf 93       	push	r27
     596:	cf 93       	push	r28
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
	static volatile uint8_t speed_adjustment_counter = 0;
	
	if (++speed_adjustment_counter >= 20)
     59c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <speed_adjustment_counter.2231>
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <speed_adjustment_counter.2231>
     5a6:	84 31       	cpi	r24, 0x14	; 20
     5a8:	d8 f0       	brcs	.+54     	; 0x5e0 <__vector_16+0x68>
	{
		if (motor_controller_get_target_speed() > motor_controller_get_current_speed())
     5aa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <motor_controller_get_target_speed>
     5ae:	c8 2f       	mov	r28, r24
     5b0:	0e 94 1d 04 	call	0x83a	; 0x83a <motor_controller_get_current_speed>
     5b4:	8c 17       	cp	r24, r28
     5b6:	30 f4       	brcc	.+12     	; 0x5c4 <__vector_16+0x4c>
		{
			motor_controller_set_speed(motor_controller_get_current_speed() + 1);
     5b8:	0e 94 1d 04 	call	0x83a	; 0x83a <motor_controller_get_current_speed>
     5bc:	8f 5f       	subi	r24, 0xFF	; 255
     5be:	0e 94 c0 03 	call	0x780	; 0x780 <motor_controller_set_speed>
     5c2:	0c c0       	rjmp	.+24     	; 0x5dc <__vector_16+0x64>
		}
		else if (motor_controller_get_target_speed() < motor_controller_get_current_speed())
     5c4:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <motor_controller_get_target_speed>
     5c8:	c8 2f       	mov	r28, r24
     5ca:	0e 94 1d 04 	call	0x83a	; 0x83a <motor_controller_get_current_speed>
     5ce:	c8 17       	cp	r28, r24
     5d0:	28 f4       	brcc	.+10     	; 0x5dc <__vector_16+0x64>
		{
			motor_controller_set_speed(motor_controller_get_current_speed() - 1);
     5d2:	0e 94 1d 04 	call	0x83a	; 0x83a <motor_controller_get_current_speed>
     5d6:	81 50       	subi	r24, 0x01	; 1
     5d8:	0e 94 c0 03 	call	0x780	; 0x780 <motor_controller_set_speed>
		else
		{
			
		}
		
		speed_adjustment_counter = 0;
     5dc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <speed_adjustment_counter.2231>
	}
	
	return;
}
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	cf 91       	pop	r28
     5e6:	bf 91       	pop	r27
     5e8:	af 91       	pop	r26
     5ea:	9f 91       	pop	r25
     5ec:	8f 91       	pop	r24
     5ee:	7f 91       	pop	r23
     5f0:	6f 91       	pop	r22
     5f2:	5f 91       	pop	r21
     5f4:	4f 91       	pop	r20
     5f6:	3f 91       	pop	r19
     5f8:	2f 91       	pop	r18
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti

00000604 <__vector_13>:
* TIMER1_OVF_vect: Trigger condition: Executed every 20 ms.
*                  Enables the motor after 1 second has passed if the motor is
*                  stopped.
********************************************************************************/
ISR (TIMER1_OVF_vect)
{	
     604:	1f 92       	push	r1
     606:	0f 92       	push	r0
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	0f 92       	push	r0
     60c:	11 24       	eor	r1, r1
     60e:	2f 93       	push	r18
     610:	3f 93       	push	r19
     612:	4f 93       	push	r20
     614:	5f 93       	push	r21
     616:	6f 93       	push	r22
     618:	7f 93       	push	r23
     61a:	8f 93       	push	r24
     61c:	9f 93       	push	r25
     61e:	af 93       	push	r26
     620:	bf 93       	push	r27
     622:	ef 93       	push	r30
     624:	ff 93       	push	r31
	static volatile uint8_t motor_stop_counter = 0;
	
	if (motor_controller_get_motor_stopped() && fsm_get_current_state() == STATE_STANDBY)
     626:	0e 94 20 04 	call	0x840	; 0x840 <motor_controller_get_motor_stopped>
     62a:	88 23       	and	r24, r24
     62c:	21 f0       	breq	.+8      	; 0x636 <__vector_13+0x32>
     62e:	0e 94 8a 01 	call	0x314	; 0x314 <fsm_get_current_state>
     632:	88 23       	and	r24, r24
     634:	81 f0       	breq	.+32     	; 0x656 <__vector_13+0x52>
	{
		return;
	}
	else if (motor_controller_get_motor_stopped())
     636:	0e 94 20 04 	call	0x840	; 0x840 <motor_controller_get_motor_stopped>
     63a:	88 23       	and	r24, r24
     63c:	61 f0       	breq	.+24     	; 0x656 <__vector_13+0x52>
	{
		if (++motor_stop_counter >= 50)
     63e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <motor_stop_counter.2237>
     642:	8f 5f       	subi	r24, 0xFF	; 255
     644:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <motor_stop_counter.2237>
     648:	82 33       	cpi	r24, 0x32	; 50
     64a:	28 f0       	brcs	.+10     	; 0x656 <__vector_13+0x52>
		{
			motor_controller_set_motor_stopped(false);
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 23 04 	call	0x846	; 0x846 <motor_controller_set_motor_stopped>
			motor_stop_counter = 0;
     652:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <motor_stop_counter.2237>
		{
			return;
		}
	}
	else return;
}
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_7>:
* TIMER2_COMPA_vect: Trigger condition: Executed every 1 ms. Every 10 ms data
*                    from the sensors is gathered and control signals for
*                    servo and motor is calculated.
********************************************************************************/
ISR (TIMER2_COMPA_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	2f 93       	push	r18
     68c:	3f 93       	push	r19
     68e:	4f 93       	push	r20
     690:	5f 93       	push	r21
     692:	6f 93       	push	r22
     694:	7f 93       	push	r23
     696:	8f 93       	push	r24
     698:	9f 93       	push	r25
     69a:	af 93       	push	r26
     69c:	bf 93       	push	r27
     69e:	ef 93       	push	r30
     6a0:	ff 93       	push	r31
	static volatile uint8_t systick_counter = 0;
	
	if (++systick_counter >= 10)
     6a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <systick_counter.2243>
     6a6:	8f 5f       	subi	r24, 0xFF	; 255
     6a8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <systick_counter.2243>
     6ac:	8a 30       	cpi	r24, 0x0A	; 10
     6ae:	d8 f0       	brcs	.+54     	; 0x6e6 <__vector_7+0x6e>
	{
		// Get sensor data.
		ir_sensor_read_all();
     6b0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <ir_sensor_read_all>
		
		// Calculate regulated control signals.
		pid_regulate(&servo_pid, ir_sensor_get_servo_pid_input(ir_sensor_get_distance_reading(INDEX_SENSOR_LEFT), ir_sensor_get_distance_reading(INDEX_SENSOR_RIGHT)));
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 00 02 	call	0x400	; 0x400 <ir_sensor_get_distance_reading>
     6ba:	6b 01       	movw	r12, r22
     6bc:	7c 01       	movw	r14, r24
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	0e 94 00 02 	call	0x400	; 0x400 <ir_sensor_get_distance_reading>
     6c4:	a7 01       	movw	r20, r14
     6c6:	96 01       	movw	r18, r12
     6c8:	0e 94 90 01 	call	0x320	; 0x320 <ir_sensor_get_servo_pid_input>
     6cc:	ab 01       	movw	r20, r22
     6ce:	bc 01       	movw	r22, r24
     6d0:	88 e1       	ldi	r24, 0x18	; 24
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 b1 04 	call	0x962	; 0x962 <pid_regulate>
		//servo_calculate_speed_comp_factor();
		motor_controller_regulate(ir_sensor_get_distance_reading(INDEX_SENSOR_CENTER));
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 00 02 	call	0x400	; 0x400 <ir_sensor_get_distance_reading>
     6de:	0e 94 00 04 	call	0x800	; 0x800 <motor_controller_regulate>
		
		systick_counter = 0;
     6e2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <systick_counter.2243>
	}
	
	return;
     6e6:	ff 91       	pop	r31
     6e8:	ef 91       	pop	r30
     6ea:	bf 91       	pop	r27
     6ec:	af 91       	pop	r26
     6ee:	9f 91       	pop	r25
     6f0:	8f 91       	pop	r24
     6f2:	7f 91       	pop	r23
     6f4:	6f 91       	pop	r22
     6f6:	5f 91       	pop	r21
     6f8:	4f 91       	pop	r20
     6fa:	3f 91       	pop	r19
     6fc:	2f 91       	pop	r18
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	0f 90       	pop	r0
     708:	0f be       	out	0x3f, r0	; 63
     70a:	0f 90       	pop	r0
     70c:	1f 90       	pop	r1
     70e:	18 95       	reti

00000710 <main>:
/********************************************************************************
* main:
********************************************************************************/
int main(void)
{
	pid_init(&servo_pid, SERVO_ANGLE_CENTER, SERVO_ANGLE_MIN, SERVO_ANGLE_MAX, KP, KI, KD);
     710:	8c e3       	ldi	r24, 0x3C	; 60
     712:	8f 93       	push	r24
     714:	83 e2       	ldi	r24, 0x23	; 35
     716:	8f 93       	push	r24
     718:	87 ed       	ldi	r24, 0xD7	; 215
     71a:	8f 93       	push	r24
     71c:	8a e0       	ldi	r24, 0x0A	; 10
     71e:	8f 93       	push	r24
     720:	8a e3       	ldi	r24, 0x3A	; 58
     722:	8f 93       	push	r24
     724:	83 e8       	ldi	r24, 0x83	; 131
     726:	8f 93       	push	r24
     728:	82 e1       	ldi	r24, 0x12	; 18
     72a:	8f 93       	push	r24
     72c:	8f e6       	ldi	r24, 0x6F	; 111
     72e:	8f 93       	push	r24
     730:	0f 2e       	mov	r0, r31
     732:	81 2c       	mov	r8, r1
     734:	91 2c       	mov	r9, r1
     736:	f0 e8       	ldi	r31, 0x80	; 128
     738:	af 2e       	mov	r10, r31
     73a:	ff e3       	ldi	r31, 0x3F	; 63
     73c:	bf 2e       	mov	r11, r31
     73e:	f0 2d       	mov	r31, r0
     740:	0f 2e       	mov	r0, r31
     742:	c1 2c       	mov	r12, r1
     744:	d1 2c       	mov	r13, r1
     746:	f4 e3       	ldi	r31, 0x34	; 52
     748:	ef 2e       	mov	r14, r31
     74a:	f3 e4       	ldi	r31, 0x43	; 67
     74c:	ff 2e       	mov	r15, r31
     74e:	f0 2d       	mov	r31, r0
     750:	00 e0       	ldi	r16, 0x00	; 0
     752:	10 e0       	ldi	r17, 0x00	; 0
     754:	98 01       	movw	r18, r16
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	64 eb       	ldi	r22, 0xB4	; 180
     75c:	72 e4       	ldi	r23, 0x42	; 66
     75e:	88 e1       	ldi	r24, 0x18	; 24
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 26 04 	call	0x84c	; 0x84c <pid_init>
	setup();
     766:	0e 94 84 05 	call	0xb08	; 0xb08 <setup>
     76a:	8d b7       	in	r24, 0x3d	; 61
     76c:	9e b7       	in	r25, 0x3e	; 62
     76e:	08 96       	adiw	r24, 0x08	; 8
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	9e bf       	out	0x3e, r25	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	8d bf       	out	0x3d, r24	; 61

	while (true)
	{
		fsm_run();
     77a:	0e 94 35 01 	call	0x26a	; 0x26a <fsm_run>
     77e:	fd cf       	rjmp	.-6      	; 0x77a <main+0x6a>

00000780 <motor_controller_set_speed>:
* motor_controller_get_motor_direction: Returns the current motor direction.
*********************************************************************************/
enum motor_direction motor_controller_get_motor_direction(void)
{
	return current_direction;
}
     780:	cf 93       	push	r28
     782:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <motor_stopped>
     786:	91 11       	cpse	r25, r1
     788:	12 c0       	rjmp	.+36     	; 0x7ae <motor_controller_set_speed+0x2e>
     78a:	c8 2f       	mov	r28, r24
     78c:	68 2f       	mov	r22, r24
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 46 07 	call	0xe8c	; 0xe8c <__floatsisf>
     798:	23 e3       	ldi	r18, 0x33	; 51
     79a:	33 e3       	ldi	r19, 0x33	; 51
     79c:	43 e2       	ldi	r20, 0x23	; 35
     79e:	50 e4       	ldi	r21, 0x40	; 64
     7a0:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
     7a4:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fixunssfsi>
     7a8:	67 bd       	out	0x27, r22	; 39
     7aa:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <current_speed>
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <motor_controller_set_target_speed>:
     7b2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <target_speed>
     7b6:	08 95       	ret

000007b8 <motor_controller_get_target_speed>:
     7b8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <target_speed>
     7bc:	08 95       	ret

000007be <motor_controller_set_direction>:
     7be:	81 11       	cpse	r24, r1
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <motor_controller_set_direction+0xc>
     7c2:	9b b1       	in	r25, 0x0b	; 11
     7c4:	9f 7e       	andi	r25, 0xEF	; 239
     7c6:	9b b9       	out	0x0b, r25	; 11
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <motor_controller_set_direction+0x12>
     7ca:	9b b1       	in	r25, 0x0b	; 11
     7cc:	90 61       	ori	r25, 0x10	; 16
     7ce:	9b b9       	out	0x0b, r25	; 11
     7d0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current_direction>
     7d4:	08 95       	ret

000007d6 <motor_controller_stop>:
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <motor_controller_set_target_speed>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	0e 94 c0 03 	call	0x780	; 0x780 <motor_controller_set_speed>
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motor_stopped>
     7e8:	08 95       	ret

000007ea <motor_controller_check_speed>:
     7ea:	84 36       	cpi	r24, 0x64	; 100
     7ec:	28 f4       	brcc	.+10     	; 0x7f8 <motor_controller_check_speed+0xe>
     7ee:	9f ef       	ldi	r25, 0xFF	; 255
     7f0:	98 0f       	add	r25, r24
     7f2:	91 33       	cpi	r25, 0x31	; 49
     7f4:	18 f0       	brcs	.+6      	; 0x7fc <motor_controller_check_speed+0x12>
     7f6:	08 95       	ret
     7f8:	83 e6       	ldi	r24, 0x63	; 99
     7fa:	08 95       	ret
     7fc:	82 e3       	ldi	r24, 0x32	; 50
     7fe:	08 95       	ret

00000800 <motor_controller_regulate>:
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e2       	ldi	r20, 0x20	; 32
     806:	51 e4       	ldi	r21, 0x41	; 65
     808:	0e 94 31 06 	call	0xc62	; 0xc62 <__subsf3>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e7       	ldi	r20, 0x70	; 112
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divsf3>
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	46 ec       	ldi	r20, 0xC6	; 198
     81e:	52 e4       	ldi	r21, 0x42	; 66
     820:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
     824:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fixunssfsi>
     828:	86 2f       	mov	r24, r22
     82a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <motor_controller_check_speed>
     82e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <motor_regulator_output>
     832:	08 95       	ret

00000834 <motor_controller_get_regulator_output>:
     834:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <motor_regulator_output>
     838:	08 95       	ret

0000083a <motor_controller_get_current_speed>:
* motor_controller_get_current_speed: Returns the current speed.
*********************************************************************************/
uint8_t motor_controller_get_current_speed(void)
{
	return current_speed;
}
     83a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current_speed>
     83e:	08 95       	ret

00000840 <motor_controller_get_motor_stopped>:
*                                     returns false otherwise.
*********************************************************************************/
bool motor_controller_get_motor_stopped(void)
{
	return motor_stopped;
}
     840:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <motor_stopped>
     844:	08 95       	ret

00000846 <motor_controller_set_motor_stopped>:
*                                     the static variable motor_stopped outside
*                                     of motor_controller.c.
*********************************************************************************/
void motor_controller_set_motor_stopped(const bool new_value)
{
	motor_stopped = new_value;
     846:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motor_stopped>
     84a:	08 95       	ret

0000084c <pid_init>:
* pid_init: Initializes a struct used for PID-regulation.
********************************************************************************/
void pid_init(struct pid* self, const double target, 
			  const double output_min, const double output_max, 
			  const double kp, const double ki, const double kd)
{
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	fc 01       	movw	r30, r24
	self->target = target;
     86a:	40 83       	st	Z, r20
     86c:	51 83       	std	Z+1, r21	; 0x01
     86e:	62 83       	std	Z+2, r22	; 0x02
     870:	73 83       	std	Z+3, r23	; 0x03
	self->output_min = output_min;
     872:	04 87       	std	Z+12, r16	; 0x0c
     874:	15 87       	std	Z+13, r17	; 0x0d
     876:	26 87       	std	Z+14, r18	; 0x0e
     878:	37 87       	std	Z+15, r19	; 0x0f
	self->output_max = output_max;
     87a:	c0 8a       	std	Z+16, r12	; 0x10
     87c:	d1 8a       	std	Z+17, r13	; 0x11
     87e:	e2 8a       	std	Z+18, r14	; 0x12
     880:	f3 8a       	std	Z+19, r15	; 0x13
	self->kp = kp;
     882:	80 a2       	std	Z+32, r8	; 0x20
     884:	91 a2       	std	Z+33, r9	; 0x21
     886:	a2 a2       	std	Z+34, r10	; 0x22
     888:	b3 a2       	std	Z+35, r11	; 0x23
	self->ki = ki;
     88a:	8f 85       	ldd	r24, Y+15	; 0x0f
     88c:	98 89       	ldd	r25, Y+16	; 0x10
     88e:	a9 89       	ldd	r26, Y+17	; 0x11
     890:	ba 89       	ldd	r27, Y+18	; 0x12
     892:	84 a3       	std	Z+36, r24	; 0x24
     894:	95 a3       	std	Z+37, r25	; 0x25
     896:	a6 a3       	std	Z+38, r26	; 0x26
     898:	b7 a3       	std	Z+39, r27	; 0x27
	self->kd = kd;
     89a:	8b 89       	ldd	r24, Y+19	; 0x13
     89c:	9c 89       	ldd	r25, Y+20	; 0x14
     89e:	ad 89       	ldd	r26, Y+21	; 0x15
     8a0:	be 89       	ldd	r27, Y+22	; 0x16
     8a2:	80 a7       	std	Z+40, r24	; 0x28
     8a4:	91 a7       	std	Z+41, r25	; 0x29
     8a6:	a2 a7       	std	Z+42, r26	; 0x2a
     8a8:	b3 a7       	std	Z+43, r27	; 0x2b
	
	self->output = 0;
     8aa:	14 82       	std	Z+4, r1	; 0x04
     8ac:	15 82       	std	Z+5, r1	; 0x05
     8ae:	16 82       	std	Z+6, r1	; 0x06
     8b0:	17 82       	std	Z+7, r1	; 0x07
	self->input = 0;
     8b2:	10 86       	std	Z+8, r1	; 0x08
     8b4:	11 86       	std	Z+9, r1	; 0x09
     8b6:	12 86       	std	Z+10, r1	; 0x0a
     8b8:	13 86       	std	Z+11, r1	; 0x0b
	self->last_error = 0;
     8ba:	14 8a       	std	Z+20, r1	; 0x14
     8bc:	15 8a       	std	Z+21, r1	; 0x15
     8be:	16 8a       	std	Z+22, r1	; 0x16
     8c0:	17 8a       	std	Z+23, r1	; 0x17
	self->integrate = 0;
     8c2:	10 8e       	std	Z+24, r1	; 0x18
     8c4:	11 8e       	std	Z+25, r1	; 0x19
     8c6:	12 8e       	std	Z+26, r1	; 0x1a
     8c8:	13 8e       	std	Z+27, r1	; 0x1b
	self->derivate = 0;
     8ca:	14 8e       	std	Z+28, r1	; 0x1c
     8cc:	15 8e       	std	Z+29, r1	; 0x1d
     8ce:	16 8e       	std	Z+30, r1	; 0x1e
     8d0:	17 8e       	std	Z+31, r1	; 0x1f
	
	return;
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	08 95       	ret

000008ec <pid_check_output>:
*					minimum and maximum values.
*					Adjusts values out of the range given by these
*					constraints back into the allowed range.
********************************************************************************/
void pid_check_output(struct pid* self)
{
     8ec:	8f 92       	push	r8
     8ee:	9f 92       	push	r9
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
	if (self->output > self->output_max)
     902:	cc 80       	ldd	r12, Y+4	; 0x04
     904:	dd 80       	ldd	r13, Y+5	; 0x05
     906:	ee 80       	ldd	r14, Y+6	; 0x06
     908:	ff 80       	ldd	r15, Y+7	; 0x07
     90a:	88 88       	ldd	r8, Y+16	; 0x10
     90c:	99 88       	ldd	r9, Y+17	; 0x11
     90e:	aa 88       	ldd	r10, Y+18	; 0x12
     910:	bb 88       	ldd	r11, Y+19	; 0x13
     912:	a5 01       	movw	r20, r10
     914:	94 01       	movw	r18, r8
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 f6 07 	call	0xfec	; 0xfec <__gesf2>
     91e:	18 16       	cp	r1, r24
     920:	2c f4       	brge	.+10     	; 0x92c <__stack+0x2d>
	{
		self->output = self->output_max;
     922:	8c 82       	std	Y+4, r8	; 0x04
     924:	9d 82       	std	Y+5, r9	; 0x05
     926:	ae 82       	std	Y+6, r10	; 0x06
     928:	bf 82       	std	Y+7, r11	; 0x07
     92a:	10 c0       	rjmp	.+32     	; 0x94c <__stack+0x4d>
	}
	else if (self->output < self->output_min)
     92c:	8c 84       	ldd	r8, Y+12	; 0x0c
     92e:	9d 84       	ldd	r9, Y+13	; 0x0d
     930:	ae 84       	ldd	r10, Y+14	; 0x0e
     932:	bf 84       	ldd	r11, Y+15	; 0x0f
     934:	a5 01       	movw	r20, r10
     936:	94 01       	movw	r18, r8
     938:	c7 01       	movw	r24, r14
     93a:	b6 01       	movw	r22, r12
     93c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__cmpsf2>
     940:	88 23       	and	r24, r24
     942:	24 f4       	brge	.+8      	; 0x94c <__stack+0x4d>
	{
		self->output = self->output_min;
     944:	8c 82       	std	Y+4, r8	; 0x04
     946:	9d 82       	std	Y+5, r9	; 0x05
     948:	ae 82       	std	Y+6, r10	; 0x06
     94a:	bf 82       	std	Y+7, r11	; 0x07
	}
	
	return;
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	9f 90       	pop	r9
     95e:	8f 90       	pop	r8
     960:	08 95       	ret

00000962 <pid_regulate>:
/********************************************************************************
* pid_regulate: Calculates the output of the PID-regulator based on the input
*				and parameters set at initialization of the used struct.
********************************************************************************/
void pid_regulate(struct pid* self, const double pid_input)
{
     962:	4f 92       	push	r4
     964:	5f 92       	push	r5
     966:	6f 92       	push	r6
     968:	7f 92       	push	r7
     96a:	8f 92       	push	r8
     96c:	9f 92       	push	r9
     96e:	af 92       	push	r10
     970:	bf 92       	push	r11
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <pid_regulate+0x1e>
     980:	00 d0       	rcall	.+0      	; 0x982 <pid_regulate+0x20>
     982:	00 d0       	rcall	.+0      	; 0x984 <pid_regulate+0x22>
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	9e 83       	std	Y+6, r25	; 0x06
     98a:	8d 83       	std	Y+5, r24	; 0x05
     98c:	4a 01       	movw	r8, r20
     98e:	5b 01       	movw	r10, r22
	const double error = self->target - pid_input;
     990:	dc 01       	movw	r26, r24
     992:	8d 91       	ld	r24, X+
     994:	9d 91       	ld	r25, X+
     996:	0d 90       	ld	r0, X+
     998:	bc 91       	ld	r27, X
     99a:	a0 2d       	mov	r26, r0
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	ab 83       	std	Y+3, r26	; 0x03
     9a2:	bc 83       	std	Y+4, r27	; 0x04
     9a4:	9a 01       	movw	r18, r20
     9a6:	ab 01       	movw	r20, r22
     9a8:	bc 01       	movw	r22, r24
     9aa:	cd 01       	movw	r24, r26
     9ac:	0e 94 31 06 	call	0xc62	; 0xc62 <__subsf3>
     9b0:	6b 01       	movw	r12, r22
     9b2:	7c 01       	movw	r14, r24
	self->input = pid_input;
     9b4:	ed 81       	ldd	r30, Y+5	; 0x05
     9b6:	fe 81       	ldd	r31, Y+6	; 0x06
     9b8:	80 86       	std	Z+8, r8	; 0x08
     9ba:	91 86       	std	Z+9, r9	; 0x09
     9bc:	a2 86       	std	Z+10, r10	; 0x0a
     9be:	b3 86       	std	Z+11, r11	; 0x0b
	
	self->derivate = error - self->last_error;
     9c0:	24 89       	ldd	r18, Z+20	; 0x14
     9c2:	35 89       	ldd	r19, Z+21	; 0x15
     9c4:	46 89       	ldd	r20, Z+22	; 0x16
     9c6:	57 89       	ldd	r21, Z+23	; 0x17
     9c8:	0e 94 31 06 	call	0xc62	; 0xc62 <__subsf3>
     9cc:	4b 01       	movw	r8, r22
     9ce:	5c 01       	movw	r10, r24
     9d0:	ad 81       	ldd	r26, Y+5	; 0x05
     9d2:	be 81       	ldd	r27, Y+6	; 0x06
     9d4:	5c 96       	adiw	r26, 0x1c	; 28
     9d6:	6d 93       	st	X+, r22
     9d8:	7d 93       	st	X+, r23
     9da:	8d 93       	st	X+, r24
     9dc:	9c 93       	st	X, r25
     9de:	5f 97       	sbiw	r26, 0x1f	; 31
	self->integrate += error;
     9e0:	58 96       	adiw	r26, 0x18	; 24
     9e2:	2d 91       	ld	r18, X+
     9e4:	3d 91       	ld	r19, X+
     9e6:	4d 91       	ld	r20, X+
     9e8:	5c 91       	ld	r21, X
     9ea:	5b 97       	sbiw	r26, 0x1b	; 27
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
     9f4:	2b 01       	movw	r4, r22
     9f6:	3c 01       	movw	r6, r24
     9f8:	ed 81       	ldd	r30, Y+5	; 0x05
     9fa:	fe 81       	ldd	r31, Y+6	; 0x06
     9fc:	60 8f       	std	Z+24, r22	; 0x18
     9fe:	71 8f       	std	Z+25, r23	; 0x19
     a00:	82 8f       	std	Z+26, r24	; 0x1a
     a02:	93 8f       	std	Z+27, r25	; 0x1b
	self->output = (self->target) + (self->kp * error) + (self->ki * self->integrate) + (self->kd * self->derivate);
     a04:	20 a1       	ldd	r18, Z+32	; 0x20
     a06:	31 a1       	ldd	r19, Z+33	; 0x21
     a08:	42 a1       	ldd	r20, Z+34	; 0x22
     a0a:	53 a1       	ldd	r21, Z+35	; 0x23
     a0c:	c7 01       	movw	r24, r14
     a0e:	b6 01       	movw	r22, r12
     a10:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	69 81       	ldd	r22, Y+1	; 0x01
     a1a:	7a 81       	ldd	r23, Y+2	; 0x02
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
     a24:	69 83       	std	Y+1, r22	; 0x01
     a26:	7a 83       	std	Y+2, r23	; 0x02
     a28:	8b 83       	std	Y+3, r24	; 0x03
     a2a:	9c 83       	std	Y+4, r25	; 0x04
     a2c:	ad 81       	ldd	r26, Y+5	; 0x05
     a2e:	be 81       	ldd	r27, Y+6	; 0x06
     a30:	94 96       	adiw	r26, 0x24	; 36
     a32:	2d 91       	ld	r18, X+
     a34:	3d 91       	ld	r19, X+
     a36:	4d 91       	ld	r20, X+
     a38:	5c 91       	ld	r21, X
     a3a:	97 97       	sbiw	r26, 0x27	; 39
     a3c:	c3 01       	movw	r24, r6
     a3e:	b2 01       	movw	r22, r4
     a40:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	69 81       	ldd	r22, Y+1	; 0x01
     a4a:	7a 81       	ldd	r23, Y+2	; 0x02
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
     a54:	2b 01       	movw	r4, r22
     a56:	3c 01       	movw	r6, r24
     a58:	ed 81       	ldd	r30, Y+5	; 0x05
     a5a:	fe 81       	ldd	r31, Y+6	; 0x06
     a5c:	20 a5       	ldd	r18, Z+40	; 0x28
     a5e:	31 a5       	ldd	r19, Z+41	; 0x29
     a60:	42 a5       	ldd	r20, Z+42	; 0x2a
     a62:	53 a5       	ldd	r21, Z+43	; 0x2b
     a64:	c5 01       	movw	r24, r10
     a66:	b4 01       	movw	r22, r8
     a68:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
     a6c:	9b 01       	movw	r18, r22
     a6e:	ac 01       	movw	r20, r24
     a70:	c3 01       	movw	r24, r6
     a72:	b2 01       	movw	r22, r4
     a74:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
     a78:	ad 81       	ldd	r26, Y+5	; 0x05
     a7a:	be 81       	ldd	r27, Y+6	; 0x06
     a7c:	14 96       	adiw	r26, 0x04	; 4
     a7e:	6d 93       	st	X+, r22
     a80:	7d 93       	st	X+, r23
     a82:	8d 93       	st	X+, r24
     a84:	9c 93       	st	X, r25
     a86:	17 97       	sbiw	r26, 0x07	; 7
	
	pid_check_output(self);
     a88:	cd 01       	movw	r24, r26
     a8a:	0e 94 76 04 	call	0x8ec	; 0x8ec <pid_check_output>
	self->last_error = error;
     a8e:	ed 81       	ldd	r30, Y+5	; 0x05
     a90:	fe 81       	ldd	r31, Y+6	; 0x06
     a92:	c4 8a       	std	Z+20, r12	; 0x14
     a94:	d5 8a       	std	Z+21, r13	; 0x15
     a96:	e6 8a       	std	Z+22, r14	; 0x16
     a98:	f7 8a       	std	Z+23, r15	; 0x17
	
	return;	
     a9a:	26 96       	adiw	r28, 0x06	; 6
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	7f 90       	pop	r7
     abc:	6f 90       	pop	r6
     abe:	5f 90       	pop	r5
     ac0:	4f 90       	pop	r4
     ac2:	08 95       	ret

00000ac4 <servo_set_angle>:
/********************************************************************************
* servo_set_angle: Sets the servo to a given angle and updates the static
*                  variable current_angle with this value.
********************************************************************************/
void servo_set_angle(const uint8_t angle)
{
     ac4:	cf 93       	push	r28
     ac6:	c8 2f       	mov	r28, r24
	uint16_t ocr1a_val = (uint16_t)(250 + ((SERVO_ANGLE_RANGE - angle) * 1.389));
     ac8:	64 eb       	ldi	r22, 0xB4	; 180
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	68 1b       	sub	r22, r24
     ace:	71 09       	sbc	r23, r1
     ad0:	07 2e       	mov	r0, r23
     ad2:	00 0c       	add	r0, r0
     ad4:	88 0b       	sbc	r24, r24
     ad6:	99 0b       	sbc	r25, r25
     ad8:	0e 94 46 07 	call	0xe8c	; 0xe8c <__floatsisf>
     adc:	21 ec       	ldi	r18, 0xC1	; 193
     ade:	3a ec       	ldi	r19, 0xCA	; 202
     ae0:	41 eb       	ldi	r20, 0xB1	; 177
     ae2:	5f e3       	ldi	r21, 0x3F	; 63
     ae4:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	4a e7       	ldi	r20, 0x7A	; 122
     aee:	53 e4       	ldi	r21, 0x43	; 67
     af0:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
     af4:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fixunssfsi>
	OCR1A = ocr1a_val;
     af8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     afc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	current_angle = angle;
     b00:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	return;
}
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <setup>:
static inline void init_timer2(void);

/* External function definitions */

void setup(void)
{
     b08:	cf 93       	push	r28
/********************************************************************************
* init_gpio: Configures GPIO-pins.
*********************************************************************************/
static inline void init_gpio(void)
{
	DDRB = (1 << SERVO_CONTROL_PIN) | (1 << STATUS_LED_R_PIN) | (1 << STATUS_LED_G_PIN) | (1 << STATUS_LED_B_PIN);
     b0a:	8e e1       	ldi	r24, 0x1E	; 30
     b0c:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << MOTOR_DIRECTION_PIN) | (1 << MOTOR_PWM_PIN);
     b0e:	80 e5       	ldi	r24, 0x50	; 80
     b10:	8a b9       	out	0x0a, r24	; 10
	PORTB = (1 << START_SIGNAL_PIN);
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	85 b9       	out	0x05, r24	; 5
* init_adc: Performs an AD-conversion to initialize the hardware in order
*           to reduce conversion time of consequent conversions.
********************************************************************************/
static inline void init_adc(void)
{
	(void)adc_read(SENSOR_CENTER_PIN);
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 94 00 	call	0x128	; 0x128 <adc_read>
*             signal at PORTB1 with a frequency of 50 Hz. The duty cycle of
*             the PWM-signal is determined by the value stored in OCR1A.
********************************************************************************/
static inline void init_servo(void)
{
	TCCR1A = (0b10 << COM1A0) | (0b10 << WGM10);
     b1c:	82 e8       	ldi	r24, 0x82	; 130
     b1e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (0b11 << WGM12) | (0b011 << CS10);
     b22:	8b e1       	ldi	r24, 0x1B	; 27
     b24:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 5000;
     b28:	88 e8       	ldi	r24, 0x88	; 136
     b2a:	93 e1       	ldi	r25, 0x13	; 19
     b2c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     b30:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// The servo motor mounted on the car accepts pulse widths from 1 to 2 ms.
	// A pulse width of 1.0 ms (1.0 ms / 4 us = 250 => OCR1A = 250) results in an angle of 180 degrees.
	// A pulse width of 1.5 ms (1.5 ms / 4 us = 375 => OCR1A = 375) results in an angle of 90 degrees.
	// A pulse width of 2.0 ms (2.0 ms / 4 us = 500 => OCR1A = 500) results in an angle of 0 degrees.
	OCR1A = SERVO_CENTER;
     b34:	87 e7       	ldi	r24, 0x77	; 119
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     b3c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
*                        of OCR0A.
*                        By default the duty cycle is set to 0.
*********************************************************************************/
static inline void init_motor_controller(void)
{
	TCCR0A = (0b10 << COM0A0) | (0b10 << COM0B0) | (0b01 << WGM00);
     b40:	81 ea       	ldi	r24, 0xA1	; 161
     b42:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0b010 << CS00);
     b44:	c2 e0       	ldi	r28, 0x02	; 2
     b46:	c5 bd       	out	0x25, r28	; 37
	OCR0A = 0x00;
     b48:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
     b4a:	18 bc       	out	0x28, r1	; 40
* init_timer2: Configures Timer2 to generate a compare-match interrupt
*              every ms.
*********************************************************************************/
static inline void init_timer2(void)
{
	TCCR2A = (1 << WGM21);
     b4c:	c0 93 b0 00 	sts	0x00B0, r28	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (0b101 << CS20);
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 125;
     b56:	8d e7       	ldi	r24, 0x7D	; 125
     b58:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	init_gpio();
	init_adc();
	init_servo();
	init_motor_controller();
	init_timer2();
	serial_init(9600);
     b5c:	60 e8       	ldi	r22, 0x80	; 128
     b5e:	75 e2       	ldi	r23, 0x25	; 37
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <serial_init>
/********************************************************************************
* init_interrupts: Configures interrupts and enables interrupts globally.
*********************************************************************************/
static inline void init_interrupts(void)
{
	EICRA = (0b01 << ISC00);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1 << INT0);
     b6e:	8d bb       	out	0x1d, r24	; 29
	
	TIMSK0 = (1 << TOIE0);
     b70:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TIMSK1 = (1 << TOIE1);
     b74:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TIMSK2 = (1 << OCIE2A);
     b78:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	asm("SEI");
     b7c:	78 94       	sei
	init_servo();
	init_motor_controller();
	init_timer2();
	serial_init(9600);
	init_interrupts();
	status_led_display_color(LED_PURPLE);
     b7e:	84 e0       	ldi	r24, 0x04	; 4
     b80:	0e 94 c7 05 	call	0xb8e	; 0xb8e <status_led_display_color>
	motor_controller_set_direction(MOTOR_DIRECTION_FORWARD);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 df 03 	call	0x7be	; 0x7be <motor_controller_set_direction>
	
	return;
}
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <status_led_display_color>:
/********************************************************************************
* status_led_display_color: Sets the RBG LED to the chosen color.
********************************************************************************/
void status_led_display_color(const enum LED_COLOR color)
{
	PORTB &= ~((1 << STATUS_LED_R_PIN) | (1 << STATUS_LED_G_PIN) | (1 << STATUS_LED_B_PIN));
     b8e:	95 b1       	in	r25, 0x05	; 5
     b90:	93 7e       	andi	r25, 0xE3	; 227
     b92:	95 b9       	out	0x05, r25	; 5
	
	switch (color)
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	99 f0       	breq	.+38     	; 0xbbe <status_led_display_color+0x30>
     b98:	28 f4       	brcc	.+10     	; 0xba4 <status_led_display_color+0x16>
     b9a:	88 23       	and	r24, r24
     b9c:	41 f0       	breq	.+16     	; 0xbae <status_led_display_color+0x20>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	51 f0       	breq	.+20     	; 0xbb6 <status_led_display_color+0x28>
     ba2:	08 95       	ret
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	79 f0       	breq	.+30     	; 0xbc6 <status_led_display_color+0x38>
     ba8:	84 30       	cpi	r24, 0x04	; 4
     baa:	89 f0       	breq	.+34     	; 0xbce <status_led_display_color+0x40>
     bac:	08 95       	ret
	{
		case LED_RED:
		{
			PORTB |= (1 << STATUS_LED_R_PIN);
     bae:	85 b1       	in	r24, 0x05	; 5
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	85 b9       	out	0x05, r24	; 5
			break;
     bb4:	08 95       	ret
		}
		case LED_GREEN:
		{
			PORTB |= (1 << STATUS_LED_G_PIN);
     bb6:	85 b1       	in	r24, 0x05	; 5
     bb8:	88 60       	ori	r24, 0x08	; 8
     bba:	85 b9       	out	0x05, r24	; 5
			break;
     bbc:	08 95       	ret
		}
		case LED_BLUE:
		{
			PORTB |= (1 << STATUS_LED_B_PIN);
     bbe:	85 b1       	in	r24, 0x05	; 5
     bc0:	80 61       	ori	r24, 0x10	; 16
     bc2:	85 b9       	out	0x05, r24	; 5
			break;
     bc4:	08 95       	ret
		}
		case LED_ORANGE:
		{
			PORTB |= (1 << STATUS_LED_R_PIN) | (1 << STATUS_LED_G_PIN);
     bc6:	85 b1       	in	r24, 0x05	; 5
     bc8:	8c 60       	ori	r24, 0x0C	; 12
     bca:	85 b9       	out	0x05, r24	; 5
			break;
     bcc:	08 95       	ret
		}
		case LED_PURPLE:
		{
			PORTB |= (1 << STATUS_LED_R_PIN) | (1 << STATUS_LED_B_PIN) | (1 << STATUS_LED_B_PIN);
     bce:	85 b1       	in	r24, 0x05	; 5
     bd0:	84 61       	ori	r24, 0x14	; 20
     bd2:	85 b9       	out	0x05, r24	; 5
     bd4:	08 95       	ret

00000bd6 <serial_init>:
'                                transmitteras per sekund (default = 9600 kbps).
********************************************************************************/
void serial_init(const uint32_t baud_rate_kbps)
{
	static bool serial_initialized = false;
	if (serial_initialized) return;
     bd6:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <serial_initialized.2224>
     bda:	21 11       	cpse	r18, r1
     bdc:	41 c0       	rjmp	.+130    	; 0xc60 <serial_init+0x8a>

	UCSR0B = (1 << TXEN0);
     bde:	28 e0       	ldi	r18, 0x08	; 8
     be0:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     be4:	26 e0       	ldi	r18, 0x06	; 6
     be6:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	if (baud_rate_kbps == 0 || baud_rate_kbps == 9600)
     bea:	61 15       	cp	r22, r1
     bec:	71 05       	cpc	r23, r1
     bee:	81 05       	cpc	r24, r1
     bf0:	91 05       	cpc	r25, r1
     bf2:	31 f0       	breq	.+12     	; 0xc00 <serial_init+0x2a>
     bf4:	60 38       	cpi	r22, 0x80	; 128
     bf6:	25 e2       	ldi	r18, 0x25	; 37
     bf8:	72 07       	cpc	r23, r18
     bfa:	81 05       	cpc	r24, r1
     bfc:	91 05       	cpc	r25, r1
     bfe:	39 f4       	brne	.+14     	; 0xc0e <serial_init+0x38>
	{
		UBRR0 = 103;
     c00:	87 e6       	ldi	r24, 0x67	; 103
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     c08:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     c0c:	23 c0       	rjmp	.+70     	; 0xc54 <serial_init+0x7e>
	}
	else
	{
		UBRR0 = (uint8_t)(F_CPU / (16.0 * baud_rate_kbps) - 1 + 0.5);
     c0e:	0e 94 44 07 	call	0xe88	; 0xe88 <__floatunsisf>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e8       	ldi	r20, 0x80	; 128
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	74 e2       	ldi	r23, 0x24	; 36
     c26:	84 e7       	ldi	r24, 0x74	; 116
     c28:	9b e4       	ldi	r25, 0x4B	; 75
     c2a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divsf3>
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e8       	ldi	r20, 0x80	; 128
     c34:	5f e3       	ldi	r21, 0x3F	; 63
     c36:	0e 94 31 06 	call	0xc62	; 0xc62 <__subsf3>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	5f e3       	ldi	r21, 0x3F	; 63
     c42:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
     c46:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fixunssfsi>
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     c50:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	}

	UDR0 = '\r';
     c54:	8d e0       	ldi	r24, 0x0D	; 13
     c56:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	serial_initialized = true;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <serial_initialized.2224>
     c60:	08 95       	ret

00000c62 <__subsf3>:
     c62:	50 58       	subi	r21, 0x80	; 128

00000c64 <__addsf3>:
     c64:	bb 27       	eor	r27, r27
     c66:	aa 27       	eor	r26, r26
     c68:	0e 94 49 06 	call	0xc92	; 0xc92 <__addsf3x>
     c6c:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_round>
     c70:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_pscA>
     c74:	38 f0       	brcs	.+14     	; 0xc84 <__addsf3+0x20>
     c76:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_pscB>
     c7a:	20 f0       	brcs	.+8      	; 0xc84 <__addsf3+0x20>
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__addsf3+0x28>
     c7e:	9f 3f       	cpi	r25, 0xFF	; 255
     c80:	19 f4       	brne	.+6      	; 0xc88 <__addsf3+0x24>
     c82:	26 f4       	brtc	.+8      	; 0xc8c <__addsf3+0x28>
     c84:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_nan>
     c88:	0e f4       	brtc	.+2      	; 0xc8c <__addsf3+0x28>
     c8a:	e0 95       	com	r30
     c8c:	e7 fb       	bst	r30, 7
     c8e:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_inf>

00000c92 <__addsf3x>:
     c92:	e9 2f       	mov	r30, r25
     c94:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_split3>
     c98:	58 f3       	brcs	.-42     	; 0xc70 <__addsf3+0xc>
     c9a:	ba 17       	cp	r27, r26
     c9c:	62 07       	cpc	r22, r18
     c9e:	73 07       	cpc	r23, r19
     ca0:	84 07       	cpc	r24, r20
     ca2:	95 07       	cpc	r25, r21
     ca4:	20 f0       	brcs	.+8      	; 0xcae <__addsf3x+0x1c>
     ca6:	79 f4       	brne	.+30     	; 0xcc6 <__addsf3x+0x34>
     ca8:	a6 f5       	brtc	.+104    	; 0xd12 <__addsf3x+0x80>
     caa:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_zero>
     cae:	0e f4       	brtc	.+2      	; 0xcb2 <__addsf3x+0x20>
     cb0:	e0 95       	com	r30
     cb2:	0b 2e       	mov	r0, r27
     cb4:	ba 2f       	mov	r27, r26
     cb6:	a0 2d       	mov	r26, r0
     cb8:	0b 01       	movw	r0, r22
     cba:	b9 01       	movw	r22, r18
     cbc:	90 01       	movw	r18, r0
     cbe:	0c 01       	movw	r0, r24
     cc0:	ca 01       	movw	r24, r20
     cc2:	a0 01       	movw	r20, r0
     cc4:	11 24       	eor	r1, r1
     cc6:	ff 27       	eor	r31, r31
     cc8:	59 1b       	sub	r21, r25
     cca:	99 f0       	breq	.+38     	; 0xcf2 <__addsf3x+0x60>
     ccc:	59 3f       	cpi	r21, 0xF9	; 249
     cce:	50 f4       	brcc	.+20     	; 0xce4 <__addsf3x+0x52>
     cd0:	50 3e       	cpi	r21, 0xE0	; 224
     cd2:	68 f1       	brcs	.+90     	; 0xd2e <__addsf3x+0x9c>
     cd4:	1a 16       	cp	r1, r26
     cd6:	f0 40       	sbci	r31, 0x00	; 0
     cd8:	a2 2f       	mov	r26, r18
     cda:	23 2f       	mov	r18, r19
     cdc:	34 2f       	mov	r19, r20
     cde:	44 27       	eor	r20, r20
     ce0:	58 5f       	subi	r21, 0xF8	; 248
     ce2:	f3 cf       	rjmp	.-26     	; 0xcca <__addsf3x+0x38>
     ce4:	46 95       	lsr	r20
     ce6:	37 95       	ror	r19
     ce8:	27 95       	ror	r18
     cea:	a7 95       	ror	r26
     cec:	f0 40       	sbci	r31, 0x00	; 0
     cee:	53 95       	inc	r21
     cf0:	c9 f7       	brne	.-14     	; 0xce4 <__addsf3x+0x52>
     cf2:	7e f4       	brtc	.+30     	; 0xd12 <__addsf3x+0x80>
     cf4:	1f 16       	cp	r1, r31
     cf6:	ba 0b       	sbc	r27, r26
     cf8:	62 0b       	sbc	r22, r18
     cfa:	73 0b       	sbc	r23, r19
     cfc:	84 0b       	sbc	r24, r20
     cfe:	ba f0       	brmi	.+46     	; 0xd2e <__addsf3x+0x9c>
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	a1 f0       	breq	.+40     	; 0xd2c <__addsf3x+0x9a>
     d04:	ff 0f       	add	r31, r31
     d06:	bb 1f       	adc	r27, r27
     d08:	66 1f       	adc	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	88 1f       	adc	r24, r24
     d0e:	c2 f7       	brpl	.-16     	; 0xd00 <__addsf3x+0x6e>
     d10:	0e c0       	rjmp	.+28     	; 0xd2e <__addsf3x+0x9c>
     d12:	ba 0f       	add	r27, r26
     d14:	62 1f       	adc	r22, r18
     d16:	73 1f       	adc	r23, r19
     d18:	84 1f       	adc	r24, r20
     d1a:	48 f4       	brcc	.+18     	; 0xd2e <__addsf3x+0x9c>
     d1c:	87 95       	ror	r24
     d1e:	77 95       	ror	r23
     d20:	67 95       	ror	r22
     d22:	b7 95       	ror	r27
     d24:	f7 95       	ror	r31
     d26:	9e 3f       	cpi	r25, 0xFE	; 254
     d28:	08 f0       	brcs	.+2      	; 0xd2c <__addsf3x+0x9a>
     d2a:	b0 cf       	rjmp	.-160    	; 0xc8c <__addsf3+0x28>
     d2c:	93 95       	inc	r25
     d2e:	88 0f       	add	r24, r24
     d30:	08 f0       	brcs	.+2      	; 0xd34 <__addsf3x+0xa2>
     d32:	99 27       	eor	r25, r25
     d34:	ee 0f       	add	r30, r30
     d36:	97 95       	ror	r25
     d38:	87 95       	ror	r24
     d3a:	08 95       	ret

00000d3c <__cmpsf2>:
     d3c:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_cmp>
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__cmpsf2+0x8>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	08 95       	ret

00000d46 <__divsf3>:
     d46:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__divsf3x>
     d4a:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_round>
     d4e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_pscB>
     d52:	58 f0       	brcs	.+22     	; 0xd6a <__divsf3+0x24>
     d54:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_pscA>
     d58:	40 f0       	brcs	.+16     	; 0xd6a <__divsf3+0x24>
     d5a:	29 f4       	brne	.+10     	; 0xd66 <__divsf3+0x20>
     d5c:	5f 3f       	cpi	r21, 0xFF	; 255
     d5e:	29 f0       	breq	.+10     	; 0xd6a <__divsf3+0x24>
     d60:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_inf>
     d64:	51 11       	cpse	r21, r1
     d66:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_szero>
     d6a:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_nan>

00000d6e <__divsf3x>:
     d6e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_split3>
     d72:	68 f3       	brcs	.-38     	; 0xd4e <__divsf3+0x8>

00000d74 <__divsf3_pse>:
     d74:	99 23       	and	r25, r25
     d76:	b1 f3       	breq	.-20     	; 0xd64 <__divsf3+0x1e>
     d78:	55 23       	and	r21, r21
     d7a:	91 f3       	breq	.-28     	; 0xd60 <__divsf3+0x1a>
     d7c:	95 1b       	sub	r25, r21
     d7e:	55 0b       	sbc	r21, r21
     d80:	bb 27       	eor	r27, r27
     d82:	aa 27       	eor	r26, r26
     d84:	62 17       	cp	r22, r18
     d86:	73 07       	cpc	r23, r19
     d88:	84 07       	cpc	r24, r20
     d8a:	38 f0       	brcs	.+14     	; 0xd9a <__divsf3_pse+0x26>
     d8c:	9f 5f       	subi	r25, 0xFF	; 255
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	44 1f       	adc	r20, r20
     d96:	aa 1f       	adc	r26, r26
     d98:	a9 f3       	breq	.-22     	; 0xd84 <__divsf3_pse+0x10>
     d9a:	35 d0       	rcall	.+106    	; 0xe06 <__divsf3_pse+0x92>
     d9c:	0e 2e       	mov	r0, r30
     d9e:	3a f0       	brmi	.+14     	; 0xdae <__divsf3_pse+0x3a>
     da0:	e0 e8       	ldi	r30, 0x80	; 128
     da2:	32 d0       	rcall	.+100    	; 0xe08 <__divsf3_pse+0x94>
     da4:	91 50       	subi	r25, 0x01	; 1
     da6:	50 40       	sbci	r21, 0x00	; 0
     da8:	e6 95       	lsr	r30
     daa:	00 1c       	adc	r0, r0
     dac:	ca f7       	brpl	.-14     	; 0xda0 <__divsf3_pse+0x2c>
     dae:	2b d0       	rcall	.+86     	; 0xe06 <__divsf3_pse+0x92>
     db0:	fe 2f       	mov	r31, r30
     db2:	29 d0       	rcall	.+82     	; 0xe06 <__divsf3_pse+0x92>
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	88 1f       	adc	r24, r24
     dba:	bb 1f       	adc	r27, r27
     dbc:	26 17       	cp	r18, r22
     dbe:	37 07       	cpc	r19, r23
     dc0:	48 07       	cpc	r20, r24
     dc2:	ab 07       	cpc	r26, r27
     dc4:	b0 e8       	ldi	r27, 0x80	; 128
     dc6:	09 f0       	breq	.+2      	; 0xdca <__divsf3_pse+0x56>
     dc8:	bb 0b       	sbc	r27, r27
     dca:	80 2d       	mov	r24, r0
     dcc:	bf 01       	movw	r22, r30
     dce:	ff 27       	eor	r31, r31
     dd0:	93 58       	subi	r25, 0x83	; 131
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	3a f0       	brmi	.+14     	; 0xde4 <__divsf3_pse+0x70>
     dd6:	9e 3f       	cpi	r25, 0xFE	; 254
     dd8:	51 05       	cpc	r21, r1
     dda:	78 f0       	brcs	.+30     	; 0xdfa <__divsf3_pse+0x86>
     ddc:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_inf>
     de0:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_szero>
     de4:	5f 3f       	cpi	r21, 0xFF	; 255
     de6:	e4 f3       	brlt	.-8      	; 0xde0 <__divsf3_pse+0x6c>
     de8:	98 3e       	cpi	r25, 0xE8	; 232
     dea:	d4 f3       	brlt	.-12     	; 0xde0 <__divsf3_pse+0x6c>
     dec:	86 95       	lsr	r24
     dee:	77 95       	ror	r23
     df0:	67 95       	ror	r22
     df2:	b7 95       	ror	r27
     df4:	f7 95       	ror	r31
     df6:	9f 5f       	subi	r25, 0xFF	; 255
     df8:	c9 f7       	brne	.-14     	; 0xdec <__divsf3_pse+0x78>
     dfa:	88 0f       	add	r24, r24
     dfc:	91 1d       	adc	r25, r1
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	97 f9       	bld	r25, 7
     e04:	08 95       	ret
     e06:	e1 e0       	ldi	r30, 0x01	; 1
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	bb 1f       	adc	r27, r27
     e10:	62 17       	cp	r22, r18
     e12:	73 07       	cpc	r23, r19
     e14:	84 07       	cpc	r24, r20
     e16:	ba 07       	cpc	r27, r26
     e18:	20 f0       	brcs	.+8      	; 0xe22 <__divsf3_pse+0xae>
     e1a:	62 1b       	sub	r22, r18
     e1c:	73 0b       	sbc	r23, r19
     e1e:	84 0b       	sbc	r24, r20
     e20:	ba 0b       	sbc	r27, r26
     e22:	ee 1f       	adc	r30, r30
     e24:	88 f7       	brcc	.-30     	; 0xe08 <__divsf3_pse+0x94>
     e26:	e0 95       	com	r30
     e28:	08 95       	ret

00000e2a <__fixunssfsi>:
     e2a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_splitA>
     e2e:	88 f0       	brcs	.+34     	; 0xe52 <__fixunssfsi+0x28>
     e30:	9f 57       	subi	r25, 0x7F	; 127
     e32:	98 f0       	brcs	.+38     	; 0xe5a <__fixunssfsi+0x30>
     e34:	b9 2f       	mov	r27, r25
     e36:	99 27       	eor	r25, r25
     e38:	b7 51       	subi	r27, 0x17	; 23
     e3a:	b0 f0       	brcs	.+44     	; 0xe68 <__fixunssfsi+0x3e>
     e3c:	e1 f0       	breq	.+56     	; 0xe76 <__fixunssfsi+0x4c>
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	88 1f       	adc	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	1a f0       	brmi	.+6      	; 0xe4e <__fixunssfsi+0x24>
     e48:	ba 95       	dec	r27
     e4a:	c9 f7       	brne	.-14     	; 0xe3e <__fixunssfsi+0x14>
     e4c:	14 c0       	rjmp	.+40     	; 0xe76 <__fixunssfsi+0x4c>
     e4e:	b1 30       	cpi	r27, 0x01	; 1
     e50:	91 f0       	breq	.+36     	; 0xe76 <__fixunssfsi+0x4c>
     e52:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_zero>
     e56:	b1 e0       	ldi	r27, 0x01	; 1
     e58:	08 95       	ret
     e5a:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_zero>
     e5e:	67 2f       	mov	r22, r23
     e60:	78 2f       	mov	r23, r24
     e62:	88 27       	eor	r24, r24
     e64:	b8 5f       	subi	r27, 0xF8	; 248
     e66:	39 f0       	breq	.+14     	; 0xe76 <__fixunssfsi+0x4c>
     e68:	b9 3f       	cpi	r27, 0xF9	; 249
     e6a:	cc f3       	brlt	.-14     	; 0xe5e <__fixunssfsi+0x34>
     e6c:	86 95       	lsr	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b3 95       	inc	r27
     e74:	d9 f7       	brne	.-10     	; 0xe6c <__fixunssfsi+0x42>
     e76:	3e f4       	brtc	.+14     	; 0xe86 <__fixunssfsi+0x5c>
     e78:	90 95       	com	r25
     e7a:	80 95       	com	r24
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	8f 4f       	sbci	r24, 0xFF	; 255
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	08 95       	ret

00000e88 <__floatunsisf>:
     e88:	e8 94       	clt
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <__floatsisf+0x12>

00000e8c <__floatsisf>:
     e8c:	97 fb       	bst	r25, 7
     e8e:	3e f4       	brtc	.+14     	; 0xe9e <__floatsisf+0x12>
     e90:	90 95       	com	r25
     e92:	80 95       	com	r24
     e94:	70 95       	com	r23
     e96:	61 95       	neg	r22
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	99 23       	and	r25, r25
     ea0:	a9 f0       	breq	.+42     	; 0xecc <__floatsisf+0x40>
     ea2:	f9 2f       	mov	r31, r25
     ea4:	96 e9       	ldi	r25, 0x96	; 150
     ea6:	bb 27       	eor	r27, r27
     ea8:	93 95       	inc	r25
     eaa:	f6 95       	lsr	r31
     eac:	87 95       	ror	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f1 11       	cpse	r31, r1
     eb6:	f8 cf       	rjmp	.-16     	; 0xea8 <__floatsisf+0x1c>
     eb8:	fa f4       	brpl	.+62     	; 0xef8 <__floatsisf+0x6c>
     eba:	bb 0f       	add	r27, r27
     ebc:	11 f4       	brne	.+4      	; 0xec2 <__floatsisf+0x36>
     ebe:	60 ff       	sbrs	r22, 0
     ec0:	1b c0       	rjmp	.+54     	; 0xef8 <__floatsisf+0x6c>
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	16 c0       	rjmp	.+44     	; 0xef8 <__floatsisf+0x6c>
     ecc:	88 23       	and	r24, r24
     ece:	11 f0       	breq	.+4      	; 0xed4 <__floatsisf+0x48>
     ed0:	96 e9       	ldi	r25, 0x96	; 150
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <__floatsisf+0x6a>
     ed4:	77 23       	and	r23, r23
     ed6:	21 f0       	breq	.+8      	; 0xee0 <__floatsisf+0x54>
     ed8:	9e e8       	ldi	r25, 0x8E	; 142
     eda:	87 2f       	mov	r24, r23
     edc:	76 2f       	mov	r23, r22
     ede:	05 c0       	rjmp	.+10     	; 0xeea <__floatsisf+0x5e>
     ee0:	66 23       	and	r22, r22
     ee2:	71 f0       	breq	.+28     	; 0xf00 <__floatsisf+0x74>
     ee4:	96 e8       	ldi	r25, 0x86	; 134
     ee6:	86 2f       	mov	r24, r22
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	2a f0       	brmi	.+10     	; 0xef8 <__floatsisf+0x6c>
     eee:	9a 95       	dec	r25
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	da f7       	brpl	.-10     	; 0xeee <__floatsisf+0x62>
     ef8:	88 0f       	add	r24, r24
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	97 f9       	bld	r25, 7
     f00:	08 95       	ret

00000f02 <__fp_cmp>:
     f02:	99 0f       	add	r25, r25
     f04:	00 08       	sbc	r0, r0
     f06:	55 0f       	add	r21, r21
     f08:	aa 0b       	sbc	r26, r26
     f0a:	e0 e8       	ldi	r30, 0x80	; 128
     f0c:	fe ef       	ldi	r31, 0xFE	; 254
     f0e:	16 16       	cp	r1, r22
     f10:	17 06       	cpc	r1, r23
     f12:	e8 07       	cpc	r30, r24
     f14:	f9 07       	cpc	r31, r25
     f16:	c0 f0       	brcs	.+48     	; 0xf48 <__fp_cmp+0x46>
     f18:	12 16       	cp	r1, r18
     f1a:	13 06       	cpc	r1, r19
     f1c:	e4 07       	cpc	r30, r20
     f1e:	f5 07       	cpc	r31, r21
     f20:	98 f0       	brcs	.+38     	; 0xf48 <__fp_cmp+0x46>
     f22:	62 1b       	sub	r22, r18
     f24:	73 0b       	sbc	r23, r19
     f26:	84 0b       	sbc	r24, r20
     f28:	95 0b       	sbc	r25, r21
     f2a:	39 f4       	brne	.+14     	; 0xf3a <__fp_cmp+0x38>
     f2c:	0a 26       	eor	r0, r26
     f2e:	61 f0       	breq	.+24     	; 0xf48 <__fp_cmp+0x46>
     f30:	23 2b       	or	r18, r19
     f32:	24 2b       	or	r18, r20
     f34:	25 2b       	or	r18, r21
     f36:	21 f4       	brne	.+8      	; 0xf40 <__fp_cmp+0x3e>
     f38:	08 95       	ret
     f3a:	0a 26       	eor	r0, r26
     f3c:	09 f4       	brne	.+2      	; 0xf40 <__fp_cmp+0x3e>
     f3e:	a1 40       	sbci	r26, 0x01	; 1
     f40:	a6 95       	lsr	r26
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	81 1d       	adc	r24, r1
     f46:	81 1d       	adc	r24, r1
     f48:	08 95       	ret

00000f4a <__fp_inf>:
     f4a:	97 f9       	bld	r25, 7
     f4c:	9f 67       	ori	r25, 0x7F	; 127
     f4e:	80 e8       	ldi	r24, 0x80	; 128
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	08 95       	ret

00000f56 <__fp_nan>:
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	80 ec       	ldi	r24, 0xC0	; 192
     f5a:	08 95       	ret

00000f5c <__fp_pscA>:
     f5c:	00 24       	eor	r0, r0
     f5e:	0a 94       	dec	r0
     f60:	16 16       	cp	r1, r22
     f62:	17 06       	cpc	r1, r23
     f64:	18 06       	cpc	r1, r24
     f66:	09 06       	cpc	r0, r25
     f68:	08 95       	ret

00000f6a <__fp_pscB>:
     f6a:	00 24       	eor	r0, r0
     f6c:	0a 94       	dec	r0
     f6e:	12 16       	cp	r1, r18
     f70:	13 06       	cpc	r1, r19
     f72:	14 06       	cpc	r1, r20
     f74:	05 06       	cpc	r0, r21
     f76:	08 95       	ret

00000f78 <__fp_round>:
     f78:	09 2e       	mov	r0, r25
     f7a:	03 94       	inc	r0
     f7c:	00 0c       	add	r0, r0
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__fp_round+0xc>
     f80:	88 23       	and	r24, r24
     f82:	52 f0       	brmi	.+20     	; 0xf98 <__fp_round+0x20>
     f84:	bb 0f       	add	r27, r27
     f86:	40 f4       	brcc	.+16     	; 0xf98 <__fp_round+0x20>
     f88:	bf 2b       	or	r27, r31
     f8a:	11 f4       	brne	.+4      	; 0xf90 <__fp_round+0x18>
     f8c:	60 ff       	sbrs	r22, 0
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <__fp_round+0x20>
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	08 95       	ret

00000f9a <__fp_split3>:
     f9a:	57 fd       	sbrc	r21, 7
     f9c:	90 58       	subi	r25, 0x80	; 128
     f9e:	44 0f       	add	r20, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	59 f0       	breq	.+22     	; 0xfba <__fp_splitA+0x10>
     fa4:	5f 3f       	cpi	r21, 0xFF	; 255
     fa6:	71 f0       	breq	.+28     	; 0xfc4 <__fp_splitA+0x1a>
     fa8:	47 95       	ror	r20

00000faa <__fp_splitA>:
     faa:	88 0f       	add	r24, r24
     fac:	97 fb       	bst	r25, 7
     fae:	99 1f       	adc	r25, r25
     fb0:	61 f0       	breq	.+24     	; 0xfca <__fp_splitA+0x20>
     fb2:	9f 3f       	cpi	r25, 0xFF	; 255
     fb4:	79 f0       	breq	.+30     	; 0xfd4 <__fp_splitA+0x2a>
     fb6:	87 95       	ror	r24
     fb8:	08 95       	ret
     fba:	12 16       	cp	r1, r18
     fbc:	13 06       	cpc	r1, r19
     fbe:	14 06       	cpc	r1, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	f2 cf       	rjmp	.-28     	; 0xfa8 <__fp_split3+0xe>
     fc4:	46 95       	lsr	r20
     fc6:	f1 df       	rcall	.-30     	; 0xfaa <__fp_splitA>
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <__fp_splitA+0x30>
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	18 06       	cpc	r1, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	f1 cf       	rjmp	.-30     	; 0xfb6 <__fp_splitA+0xc>
     fd4:	86 95       	lsr	r24
     fd6:	71 05       	cpc	r23, r1
     fd8:	61 05       	cpc	r22, r1
     fda:	08 94       	sec
     fdc:	08 95       	ret

00000fde <__fp_zero>:
     fde:	e8 94       	clt

00000fe0 <__fp_szero>:
     fe0:	bb 27       	eor	r27, r27
     fe2:	66 27       	eor	r22, r22
     fe4:	77 27       	eor	r23, r23
     fe6:	cb 01       	movw	r24, r22
     fe8:	97 f9       	bld	r25, 7
     fea:	08 95       	ret

00000fec <__gesf2>:
     fec:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_cmp>
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <__gesf2+0x8>
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	08 95       	ret

00000ff6 <__mulsf3>:
     ff6:	0e 94 0e 08 	call	0x101c	; 0x101c <__mulsf3x>
     ffa:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_round>
     ffe:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_pscA>
    1002:	38 f0       	brcs	.+14     	; 0x1012 <__mulsf3+0x1c>
    1004:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_pscB>
    1008:	20 f0       	brcs	.+8      	; 0x1012 <__mulsf3+0x1c>
    100a:	95 23       	and	r25, r21
    100c:	11 f0       	breq	.+4      	; 0x1012 <__mulsf3+0x1c>
    100e:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_inf>
    1012:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_nan>
    1016:	11 24       	eor	r1, r1
    1018:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_szero>

0000101c <__mulsf3x>:
    101c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_split3>
    1020:	70 f3       	brcs	.-36     	; 0xffe <__mulsf3+0x8>

00001022 <__mulsf3_pse>:
    1022:	95 9f       	mul	r25, r21
    1024:	c1 f3       	breq	.-16     	; 0x1016 <__mulsf3+0x20>
    1026:	95 0f       	add	r25, r21
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	55 1f       	adc	r21, r21
    102c:	62 9f       	mul	r22, r18
    102e:	f0 01       	movw	r30, r0
    1030:	72 9f       	mul	r23, r18
    1032:	bb 27       	eor	r27, r27
    1034:	f0 0d       	add	r31, r0
    1036:	b1 1d       	adc	r27, r1
    1038:	63 9f       	mul	r22, r19
    103a:	aa 27       	eor	r26, r26
    103c:	f0 0d       	add	r31, r0
    103e:	b1 1d       	adc	r27, r1
    1040:	aa 1f       	adc	r26, r26
    1042:	64 9f       	mul	r22, r20
    1044:	66 27       	eor	r22, r22
    1046:	b0 0d       	add	r27, r0
    1048:	a1 1d       	adc	r26, r1
    104a:	66 1f       	adc	r22, r22
    104c:	82 9f       	mul	r24, r18
    104e:	22 27       	eor	r18, r18
    1050:	b0 0d       	add	r27, r0
    1052:	a1 1d       	adc	r26, r1
    1054:	62 1f       	adc	r22, r18
    1056:	73 9f       	mul	r23, r19
    1058:	b0 0d       	add	r27, r0
    105a:	a1 1d       	adc	r26, r1
    105c:	62 1f       	adc	r22, r18
    105e:	83 9f       	mul	r24, r19
    1060:	a0 0d       	add	r26, r0
    1062:	61 1d       	adc	r22, r1
    1064:	22 1f       	adc	r18, r18
    1066:	74 9f       	mul	r23, r20
    1068:	33 27       	eor	r19, r19
    106a:	a0 0d       	add	r26, r0
    106c:	61 1d       	adc	r22, r1
    106e:	23 1f       	adc	r18, r19
    1070:	84 9f       	mul	r24, r20
    1072:	60 0d       	add	r22, r0
    1074:	21 1d       	adc	r18, r1
    1076:	82 2f       	mov	r24, r18
    1078:	76 2f       	mov	r23, r22
    107a:	6a 2f       	mov	r22, r26
    107c:	11 24       	eor	r1, r1
    107e:	9f 57       	subi	r25, 0x7F	; 127
    1080:	50 40       	sbci	r21, 0x00	; 0
    1082:	9a f0       	brmi	.+38     	; 0x10aa <__mulsf3_pse+0x88>
    1084:	f1 f0       	breq	.+60     	; 0x10c2 <__mulsf3_pse+0xa0>
    1086:	88 23       	and	r24, r24
    1088:	4a f0       	brmi	.+18     	; 0x109c <__mulsf3_pse+0x7a>
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	bb 1f       	adc	r27, r27
    1090:	66 1f       	adc	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	91 50       	subi	r25, 0x01	; 1
    1098:	50 40       	sbci	r21, 0x00	; 0
    109a:	a9 f7       	brne	.-22     	; 0x1086 <__mulsf3_pse+0x64>
    109c:	9e 3f       	cpi	r25, 0xFE	; 254
    109e:	51 05       	cpc	r21, r1
    10a0:	80 f0       	brcs	.+32     	; 0x10c2 <__mulsf3_pse+0xa0>
    10a2:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_inf>
    10a6:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_szero>
    10aa:	5f 3f       	cpi	r21, 0xFF	; 255
    10ac:	e4 f3       	brlt	.-8      	; 0x10a6 <__mulsf3_pse+0x84>
    10ae:	98 3e       	cpi	r25, 0xE8	; 232
    10b0:	d4 f3       	brlt	.-12     	; 0x10a6 <__mulsf3_pse+0x84>
    10b2:	86 95       	lsr	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	b7 95       	ror	r27
    10ba:	f7 95       	ror	r31
    10bc:	e7 95       	ror	r30
    10be:	9f 5f       	subi	r25, 0xFF	; 255
    10c0:	c1 f7       	brne	.-16     	; 0x10b2 <__mulsf3_pse+0x90>
    10c2:	fe 2b       	or	r31, r30
    10c4:	88 0f       	add	r24, r24
    10c6:	91 1d       	adc	r25, r1
    10c8:	96 95       	lsr	r25
    10ca:	87 95       	ror	r24
    10cc:	97 f9       	bld	r25, 7
    10ce:	08 95       	ret

000010d0 <pow>:
    10d0:	fa 01       	movw	r30, r20
    10d2:	ee 0f       	add	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	30 96       	adiw	r30, 0x00	; 0
    10d8:	21 05       	cpc	r18, r1
    10da:	31 05       	cpc	r19, r1
    10dc:	a1 f1       	breq	.+104    	; 0x1146 <pow+0x76>
    10de:	61 15       	cp	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	61 f4       	brne	.+24     	; 0x10fc <pow+0x2c>
    10e4:	80 38       	cpi	r24, 0x80	; 128
    10e6:	bf e3       	ldi	r27, 0x3F	; 63
    10e8:	9b 07       	cpc	r25, r27
    10ea:	49 f1       	breq	.+82     	; 0x113e <pow+0x6e>
    10ec:	68 94       	set
    10ee:	90 38       	cpi	r25, 0x80	; 128
    10f0:	81 05       	cpc	r24, r1
    10f2:	61 f0       	breq	.+24     	; 0x110c <pow+0x3c>
    10f4:	80 38       	cpi	r24, 0x80	; 128
    10f6:	bf ef       	ldi	r27, 0xFF	; 255
    10f8:	9b 07       	cpc	r25, r27
    10fa:	41 f0       	breq	.+16     	; 0x110c <pow+0x3c>
    10fc:	99 23       	and	r25, r25
    10fe:	4a f5       	brpl	.+82     	; 0x1152 <pow+0x82>
    1100:	ff 3f       	cpi	r31, 0xFF	; 255
    1102:	e1 05       	cpc	r30, r1
    1104:	31 05       	cpc	r19, r1
    1106:	21 05       	cpc	r18, r1
    1108:	19 f1       	breq	.+70     	; 0x1150 <pow+0x80>
    110a:	e8 94       	clt
    110c:	08 94       	sec
    110e:	e7 95       	ror	r30
    1110:	d9 01       	movw	r26, r18
    1112:	aa 23       	and	r26, r26
    1114:	29 f4       	brne	.+10     	; 0x1120 <pow+0x50>
    1116:	ab 2f       	mov	r26, r27
    1118:	be 2f       	mov	r27, r30
    111a:	f8 5f       	subi	r31, 0xF8	; 248
    111c:	d0 f3       	brcs	.-12     	; 0x1112 <pow+0x42>
    111e:	10 c0       	rjmp	.+32     	; 0x1140 <pow+0x70>
    1120:	ff 5f       	subi	r31, 0xFF	; 255
    1122:	70 f4       	brcc	.+28     	; 0x1140 <pow+0x70>
    1124:	a6 95       	lsr	r26
    1126:	e0 f7       	brcc	.-8      	; 0x1120 <pow+0x50>
    1128:	f7 39       	cpi	r31, 0x97	; 151
    112a:	50 f0       	brcs	.+20     	; 0x1140 <pow+0x70>
    112c:	19 f0       	breq	.+6      	; 0x1134 <pow+0x64>
    112e:	ff 3a       	cpi	r31, 0xAF	; 175
    1130:	38 f4       	brcc	.+14     	; 0x1140 <pow+0x70>
    1132:	9f 77       	andi	r25, 0x7F	; 127
    1134:	9f 93       	push	r25
    1136:	0d d0       	rcall	.+26     	; 0x1152 <pow+0x82>
    1138:	0f 90       	pop	r0
    113a:	07 fc       	sbrc	r0, 7
    113c:	90 58       	subi	r25, 0x80	; 128
    113e:	08 95       	ret
    1140:	46 f0       	brts	.+16     	; 0x1152 <pow+0x82>
    1142:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_nan>
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	80 e8       	ldi	r24, 0x80	; 128
    114c:	9f e3       	ldi	r25, 0x3F	; 63
    114e:	08 95       	ret
    1150:	4f e7       	ldi	r20, 0x7F	; 127
    1152:	9f 77       	andi	r25, 0x7F	; 127
    1154:	5f 93       	push	r21
    1156:	4f 93       	push	r20
    1158:	3f 93       	push	r19
    115a:	2f 93       	push	r18
    115c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <log>
    1160:	2f 91       	pop	r18
    1162:	3f 91       	pop	r19
    1164:	4f 91       	pop	r20
    1166:	5f 91       	pop	r21
    1168:	0e 94 fb 07 	call	0xff6	; 0xff6 <__mulsf3>
    116c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <exp>
    1170:	29 f4       	brne	.+10     	; 0x117c <pow+0xac>
    1172:	16 f0       	brts	.+4      	; 0x1178 <pow+0xa8>
    1174:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_inf>
    1178:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_zero>
    117c:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_nan>

00001180 <exp>:
    1180:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_splitA>
    1184:	a8 f3       	brcs	.-22     	; 0x1170 <pow+0xa0>
    1186:	96 38       	cpi	r25, 0x86	; 134
    1188:	a0 f7       	brcc	.-24     	; 0x1172 <pow+0xa2>
    118a:	07 f8       	bld	r0, 7
    118c:	0f 92       	push	r0
    118e:	e8 94       	clt
    1190:	2b e3       	ldi	r18, 0x3B	; 59
    1192:	3a ea       	ldi	r19, 0xAA	; 170
    1194:	48 eb       	ldi	r20, 0xB8	; 184
    1196:	5f e7       	ldi	r21, 0x7F	; 127
    1198:	0e 94 11 08 	call	0x1022	; 0x1022 <__mulsf3_pse>
    119c:	0f 92       	push	r0
    119e:	0f 92       	push	r0
    11a0:	0f 92       	push	r0
    11a2:	4d b7       	in	r20, 0x3d	; 61
    11a4:	5e b7       	in	r21, 0x3e	; 62
    11a6:	0f 92       	push	r0
    11a8:	0e 94 ab 09 	call	0x1356	; 0x1356 <modf>
    11ac:	e8 e6       	ldi	r30, 0x68	; 104
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_powser>
    11b4:	4f 91       	pop	r20
    11b6:	5f 91       	pop	r21
    11b8:	ef 91       	pop	r30
    11ba:	ff 91       	pop	r31
    11bc:	e5 95       	asr	r30
    11be:	ee 1f       	adc	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	49 f0       	breq	.+18     	; 0x11d6 <exp+0x56>
    11c4:	fe 57       	subi	r31, 0x7E	; 126
    11c6:	e0 68       	ori	r30, 0x80	; 128
    11c8:	44 27       	eor	r20, r20
    11ca:	ee 0f       	add	r30, r30
    11cc:	44 1f       	adc	r20, r20
    11ce:	fa 95       	dec	r31
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <exp+0x4a>
    11d2:	41 95       	neg	r20
    11d4:	55 0b       	sbc	r21, r21
    11d6:	0e 94 25 09 	call	0x124a	; 0x124a <ldexp>
    11da:	0f 90       	pop	r0
    11dc:	07 fe       	sbrs	r0, 7
    11de:	0c 94 19 09 	jmp	0x1232	; 0x1232 <inverse>
    11e2:	08 95       	ret

000011e4 <__fp_powser>:
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	1f 93       	push	r17
    11ea:	0f 93       	push	r16
    11ec:	ff 92       	push	r15
    11ee:	ef 92       	push	r14
    11f0:	df 92       	push	r13
    11f2:	7b 01       	movw	r14, r22
    11f4:	8c 01       	movw	r16, r24
    11f6:	68 94       	set
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <__fp_powser+0x22>
    11fa:	da 2e       	mov	r13, r26
    11fc:	ef 01       	movw	r28, r30
    11fe:	0e 94 0e 08 	call	0x101c	; 0x101c <__mulsf3x>
    1202:	fe 01       	movw	r30, r28
    1204:	e8 94       	clt
    1206:	a5 91       	lpm	r26, Z+
    1208:	25 91       	lpm	r18, Z+
    120a:	35 91       	lpm	r19, Z+
    120c:	45 91       	lpm	r20, Z+
    120e:	55 91       	lpm	r21, Z+
    1210:	a6 f3       	brts	.-24     	; 0x11fa <__fp_powser+0x16>
    1212:	ef 01       	movw	r28, r30
    1214:	0e 94 49 06 	call	0xc92	; 0xc92 <__addsf3x>
    1218:	fe 01       	movw	r30, r28
    121a:	97 01       	movw	r18, r14
    121c:	a8 01       	movw	r20, r16
    121e:	da 94       	dec	r13
    1220:	69 f7       	brne	.-38     	; 0x11fc <__fp_powser+0x18>
    1222:	df 90       	pop	r13
    1224:	ef 90       	pop	r14
    1226:	ff 90       	pop	r15
    1228:	0f 91       	pop	r16
    122a:	1f 91       	pop	r17
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <inverse>:
    1232:	9b 01       	movw	r18, r22
    1234:	ac 01       	movw	r20, r24
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	80 e8       	ldi	r24, 0x80	; 128
    123c:	9f e3       	ldi	r25, 0x3F	; 63
    123e:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__divsf3>
    1242:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_inf>
    1246:	0c 94 df 09 	jmp	0x13be	; 0x13be <__fp_mpack>

0000124a <ldexp>:
    124a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_splitA>
    124e:	d8 f3       	brcs	.-10     	; 0x1246 <inverse+0x14>
    1250:	99 23       	and	r25, r25
    1252:	c9 f3       	breq	.-14     	; 0x1246 <inverse+0x14>
    1254:	94 0f       	add	r25, r20
    1256:	51 1d       	adc	r21, r1
    1258:	a3 f3       	brvs	.-24     	; 0x1242 <inverse+0x10>
    125a:	91 50       	subi	r25, 0x01	; 1
    125c:	50 40       	sbci	r21, 0x00	; 0
    125e:	94 f0       	brlt	.+36     	; 0x1284 <ldexp+0x3a>
    1260:	59 f0       	breq	.+22     	; 0x1278 <ldexp+0x2e>
    1262:	88 23       	and	r24, r24
    1264:	32 f0       	brmi	.+12     	; 0x1272 <ldexp+0x28>
    1266:	66 0f       	add	r22, r22
    1268:	77 1f       	adc	r23, r23
    126a:	88 1f       	adc	r24, r24
    126c:	91 50       	subi	r25, 0x01	; 1
    126e:	50 40       	sbci	r21, 0x00	; 0
    1270:	c1 f7       	brne	.-16     	; 0x1262 <ldexp+0x18>
    1272:	9e 3f       	cpi	r25, 0xFE	; 254
    1274:	51 05       	cpc	r21, r1
    1276:	2c f7       	brge	.-54     	; 0x1242 <inverse+0x10>
    1278:	88 0f       	add	r24, r24
    127a:	91 1d       	adc	r25, r1
    127c:	96 95       	lsr	r25
    127e:	87 95       	ror	r24
    1280:	97 f9       	bld	r25, 7
    1282:	08 95       	ret
    1284:	5f 3f       	cpi	r21, 0xFF	; 255
    1286:	ac f0       	brlt	.+42     	; 0x12b2 <ldexp+0x68>
    1288:	98 3e       	cpi	r25, 0xE8	; 232
    128a:	9c f0       	brlt	.+38     	; 0x12b2 <ldexp+0x68>
    128c:	bb 27       	eor	r27, r27
    128e:	86 95       	lsr	r24
    1290:	77 95       	ror	r23
    1292:	67 95       	ror	r22
    1294:	b7 95       	ror	r27
    1296:	08 f4       	brcc	.+2      	; 0x129a <ldexp+0x50>
    1298:	b1 60       	ori	r27, 0x01	; 1
    129a:	93 95       	inc	r25
    129c:	c1 f7       	brne	.-16     	; 0x128e <ldexp+0x44>
    129e:	bb 0f       	add	r27, r27
    12a0:	58 f7       	brcc	.-42     	; 0x1278 <ldexp+0x2e>
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <ldexp+0x5e>
    12a4:	60 ff       	sbrs	r22, 0
    12a6:	e8 cf       	rjmp	.-48     	; 0x1278 <ldexp+0x2e>
    12a8:	6f 5f       	subi	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	e3 cf       	rjmp	.-58     	; 0x1278 <ldexp+0x2e>
    12b2:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_szero>
    12b6:	16 f0       	brts	.+4      	; 0x12bc <ldexp+0x72>
    12b8:	0c 94 df 09 	jmp	0x13be	; 0x13be <__fp_mpack>
    12bc:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_nan>
    12c0:	68 94       	set
    12c2:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_inf>

000012c6 <log>:
    12c6:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_splitA>
    12ca:	a8 f3       	brcs	.-22     	; 0x12b6 <ldexp+0x6c>
    12cc:	99 23       	and	r25, r25
    12ce:	c1 f3       	breq	.-16     	; 0x12c0 <ldexp+0x76>
    12d0:	ae f3       	brts	.-22     	; 0x12bc <ldexp+0x72>
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	1f 93       	push	r17
    12d8:	0f 93       	push	r16
    12da:	ff 92       	push	r15
    12dc:	c9 2f       	mov	r28, r25
    12de:	dd 27       	eor	r29, r29
    12e0:	88 23       	and	r24, r24
    12e2:	2a f0       	brmi	.+10     	; 0x12ee <log+0x28>
    12e4:	21 97       	sbiw	r28, 0x01	; 1
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	da f7       	brpl	.-10     	; 0x12e4 <log+0x1e>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	5f eb       	ldi	r21, 0xBF	; 191
    12f6:	9f e3       	ldi	r25, 0x3F	; 63
    12f8:	88 39       	cpi	r24, 0x98	; 152
    12fa:	20 f0       	brcs	.+8      	; 0x1304 <log+0x3e>
    12fc:	80 3e       	cpi	r24, 0xE0	; 224
    12fe:	38 f0       	brcs	.+14     	; 0x130e <log+0x48>
    1300:	21 96       	adiw	r28, 0x01	; 1
    1302:	8f 77       	andi	r24, 0x7F	; 127
    1304:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
    1308:	e0 e9       	ldi	r30, 0x90	; 144
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <log+0x50>
    130e:	0e 94 32 06 	call	0xc64	; 0xc64 <__addsf3>
    1312:	ed eb       	ldi	r30, 0xBD	; 189
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_powser>
    131a:	8b 01       	movw	r16, r22
    131c:	be 01       	movw	r22, r28
    131e:	ec 01       	movw	r28, r24
    1320:	fb 2e       	mov	r15, r27
    1322:	6f 57       	subi	r22, 0x7F	; 127
    1324:	71 09       	sbc	r23, r1
    1326:	75 95       	asr	r23
    1328:	77 1f       	adc	r23, r23
    132a:	88 0b       	sbc	r24, r24
    132c:	99 0b       	sbc	r25, r25
    132e:	0e 94 46 07 	call	0xe8c	; 0xe8c <__floatsisf>
    1332:	28 e1       	ldi	r18, 0x18	; 24
    1334:	32 e7       	ldi	r19, 0x72	; 114
    1336:	41 e3       	ldi	r20, 0x31	; 49
    1338:	5f e3       	ldi	r21, 0x3F	; 63
    133a:	0e 94 0e 08 	call	0x101c	; 0x101c <__mulsf3x>
    133e:	af 2d       	mov	r26, r15
    1340:	98 01       	movw	r18, r16
    1342:	ae 01       	movw	r20, r28
    1344:	ff 90       	pop	r15
    1346:	0f 91       	pop	r16
    1348:	1f 91       	pop	r17
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	0e 94 49 06 	call	0xc92	; 0xc92 <__addsf3x>
    1352:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_round>

00001356 <modf>:
    1356:	fa 01       	movw	r30, r20
    1358:	dc 01       	movw	r26, r24
    135a:	aa 0f       	add	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	9b 01       	movw	r18, r22
    1360:	ac 01       	movw	r20, r24
    1362:	bf 57       	subi	r27, 0x7F	; 127
    1364:	28 f4       	brcc	.+10     	; 0x1370 <modf+0x1a>
    1366:	22 27       	eor	r18, r18
    1368:	33 27       	eor	r19, r19
    136a:	44 27       	eor	r20, r20
    136c:	50 78       	andi	r21, 0x80	; 128
    136e:	20 c0       	rjmp	.+64     	; 0x13b0 <modf+0x5a>
    1370:	b7 51       	subi	r27, 0x17	; 23
    1372:	90 f4       	brcc	.+36     	; 0x1398 <modf+0x42>
    1374:	ab 2f       	mov	r26, r27
    1376:	00 24       	eor	r0, r0
    1378:	46 95       	lsr	r20
    137a:	37 95       	ror	r19
    137c:	27 95       	ror	r18
    137e:	01 1c       	adc	r0, r1
    1380:	a3 95       	inc	r26
    1382:	d2 f3       	brmi	.-12     	; 0x1378 <modf+0x22>
    1384:	00 20       	and	r0, r0
    1386:	71 f0       	breq	.+28     	; 0x13a4 <modf+0x4e>
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	44 1f       	adc	r20, r20
    138e:	b3 95       	inc	r27
    1390:	da f3       	brmi	.-10     	; 0x1388 <modf+0x32>
    1392:	0e d0       	rcall	.+28     	; 0x13b0 <modf+0x5a>
    1394:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__subsf3>
    1398:	61 30       	cpi	r22, 0x01	; 1
    139a:	71 05       	cpc	r23, r1
    139c:	a0 e8       	ldi	r26, 0x80	; 128
    139e:	8a 07       	cpc	r24, r26
    13a0:	b9 46       	sbci	r27, 0x69	; 105
    13a2:	30 f4       	brcc	.+12     	; 0x13b0 <modf+0x5a>
    13a4:	9b 01       	movw	r18, r22
    13a6:	ac 01       	movw	r20, r24
    13a8:	66 27       	eor	r22, r22
    13aa:	77 27       	eor	r23, r23
    13ac:	88 27       	eor	r24, r24
    13ae:	90 78       	andi	r25, 0x80	; 128
    13b0:	30 96       	adiw	r30, 0x00	; 0
    13b2:	21 f0       	breq	.+8      	; 0x13bc <modf+0x66>
    13b4:	20 83       	st	Z, r18
    13b6:	31 83       	std	Z+1, r19	; 0x01
    13b8:	42 83       	std	Z+2, r20	; 0x02
    13ba:	53 83       	std	Z+3, r21	; 0x03
    13bc:	08 95       	ret

000013be <__fp_mpack>:
    13be:	9f 3f       	cpi	r25, 0xFF	; 255
    13c0:	31 f0       	breq	.+12     	; 0x13ce <__fp_mpack_finite+0xc>

000013c2 <__fp_mpack_finite>:
    13c2:	91 50       	subi	r25, 0x01	; 1
    13c4:	20 f4       	brcc	.+8      	; 0x13ce <__fp_mpack_finite+0xc>
    13c6:	87 95       	ror	r24
    13c8:	77 95       	ror	r23
    13ca:	67 95       	ror	r22
    13cc:	b7 95       	ror	r27
    13ce:	88 0f       	add	r24, r24
    13d0:	91 1d       	adc	r25, r1
    13d2:	96 95       	lsr	r25
    13d4:	87 95       	ror	r24
    13d6:	97 f9       	bld	r25, 7
    13d8:	08 95       	ret

000013da <_exit>:
    13da:	f8 94       	cli

000013dc <__stop_program>:
    13dc:	ff cf       	rjmp	.-2      	; 0x13dc <__stop_program>
