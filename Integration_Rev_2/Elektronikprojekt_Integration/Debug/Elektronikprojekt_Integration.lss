
Elektronikprojekt_Integration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800100  00800100  00000790  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a9  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab1  00000000  00000000  000019d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000768  00000000  00000000  00002482  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ba  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a55  00000000  00000000  0000350a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_1>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  9e:	0c 94 8c 03 	jmp	0x718	; 0x718 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_read>:
* adc_read: Performs an AD-conversion on the desired pin and returns
*			the result.
********************************************************************************/
uint16_t adc_read(uint8_t pin)
{
	ADMUX = (0b00 << REFS0) | pin;
  a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (0b111 << ADPS0);
  aa:	87 ec       	ldi	r24, 0xC7	; 199
  ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while ((ADCSRA & (1 << ADIF)) == 0);
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b4:	84 ff       	sbrs	r24, 4
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <adc_read+0xa>
	ADCSRA = (1 << ADIF);
  b8:	80 e1       	ldi	r24, 0x10	; 16
  ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	return ADC;
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  c6:	08 95       	ret

000000c8 <__vector_1>:

/********************************************************************************
* INT0_vect: Trigger condition: Rising edge PORTD2.
********************************************************************************/
ISR (INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
	return;
}
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <__vector_2>:

/********************************************************************************
* INT1_vect: Trigger condition: Rising edge PORTD3.
********************************************************************************/
ISR (INT1_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
	return;
}
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_16>:

/********************************************************************************
* TIMER0_OVF_vect: Trigger condition: Executed every 255 us.
********************************************************************************/
ISR (TIMER0_OVF_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
	return;
}
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_13>:

/********************************************************************************
* TIMER1_OVF_vect: Trigger condition: Executed every 20 ms.
********************************************************************************/
ISR (TIMER1_OVF_vect)
{	
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
	return;
}
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <main>:
/********************************************************************************
* main:
********************************************************************************/
int main(void)
{
	setup();
 118:	0e 94 11 01 	call	0x222	; 0x222 <setup>
	pid_init(&servo_pid, SERVO_ANGLE_CENTER, SERVO_ANGLE_MIN, SERVO_ANGLE_MAX, 1, 0.1, 0.01);
 11c:	8c e3       	ldi	r24, 0x3C	; 60
 11e:	8f 93       	push	r24
 120:	83 e2       	ldi	r24, 0x23	; 35
 122:	8f 93       	push	r24
 124:	87 ed       	ldi	r24, 0xD7	; 215
 126:	8f 93       	push	r24
 128:	8a e0       	ldi	r24, 0x0A	; 10
 12a:	8f 93       	push	r24
 12c:	8d e3       	ldi	r24, 0x3D	; 61
 12e:	8f 93       	push	r24
 130:	8c ec       	ldi	r24, 0xCC	; 204
 132:	8f 93       	push	r24
 134:	8f 93       	push	r24
 136:	8d ec       	ldi	r24, 0xCD	; 205
 138:	8f 93       	push	r24
 13a:	0f 2e       	mov	r0, r31
 13c:	81 2c       	mov	r8, r1
 13e:	91 2c       	mov	r9, r1
 140:	f0 e8       	ldi	r31, 0x80	; 128
 142:	af 2e       	mov	r10, r31
 144:	ff e3       	ldi	r31, 0x3F	; 63
 146:	bf 2e       	mov	r11, r31
 148:	f0 2d       	mov	r31, r0
 14a:	0f 2e       	mov	r0, r31
 14c:	c1 2c       	mov	r12, r1
 14e:	d1 2c       	mov	r13, r1
 150:	f4 e3       	ldi	r31, 0x34	; 52
 152:	ef 2e       	mov	r14, r31
 154:	f3 e4       	ldi	r31, 0x43	; 67
 156:	ff 2e       	mov	r15, r31
 158:	f0 2d       	mov	r31, r0
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	98 01       	movw	r18, r16
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	64 eb       	ldi	r22, 0xB4	; 180
 166:	72 e4       	ldi	r23, 0x42	; 66
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 c1 00 	call	0x182	; 0x182 <pid_init>
 170:	8d b7       	in	r24, 0x3d	; 61
 172:	9e b7       	in	r25, 0x3e	; 62
 174:	08 96       	adiw	r24, 0x08	; 8
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	9e bf       	out	0x3e, r25	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	8d bf       	out	0x3d, r24	; 61
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x68>

00000182 <pid_init>:
* pid_init: Initializes a struct used for PID-regulation.
********************************************************************************/
void pid_init(struct pid* self, const double target, 
			  const double output_min, const double output_max, 
			  const double kp, const double ki, const double kd)
{
 182:	8f 92       	push	r8
 184:	9f 92       	push	r9
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	fc 01       	movw	r30, r24
	self->target = target;
 1a0:	40 83       	st	Z, r20
 1a2:	51 83       	std	Z+1, r21	; 0x01
 1a4:	62 83       	std	Z+2, r22	; 0x02
 1a6:	73 83       	std	Z+3, r23	; 0x03
	self->output_min = output_min;
 1a8:	04 87       	std	Z+12, r16	; 0x0c
 1aa:	15 87       	std	Z+13, r17	; 0x0d
 1ac:	26 87       	std	Z+14, r18	; 0x0e
 1ae:	37 87       	std	Z+15, r19	; 0x0f
	self->output_max = output_max;
 1b0:	c0 8a       	std	Z+16, r12	; 0x10
 1b2:	d1 8a       	std	Z+17, r13	; 0x11
 1b4:	e2 8a       	std	Z+18, r14	; 0x12
 1b6:	f3 8a       	std	Z+19, r15	; 0x13
	self->kp = kp;
 1b8:	80 a2       	std	Z+32, r8	; 0x20
 1ba:	91 a2       	std	Z+33, r9	; 0x21
 1bc:	a2 a2       	std	Z+34, r10	; 0x22
 1be:	b3 a2       	std	Z+35, r11	; 0x23
	self->ki = ki;
 1c0:	8f 85       	ldd	r24, Y+15	; 0x0f
 1c2:	98 89       	ldd	r25, Y+16	; 0x10
 1c4:	a9 89       	ldd	r26, Y+17	; 0x11
 1c6:	ba 89       	ldd	r27, Y+18	; 0x12
 1c8:	84 a3       	std	Z+36, r24	; 0x24
 1ca:	95 a3       	std	Z+37, r25	; 0x25
 1cc:	a6 a3       	std	Z+38, r26	; 0x26
 1ce:	b7 a3       	std	Z+39, r27	; 0x27
	self->kd = kd;
 1d0:	8b 89       	ldd	r24, Y+19	; 0x13
 1d2:	9c 89       	ldd	r25, Y+20	; 0x14
 1d4:	ad 89       	ldd	r26, Y+21	; 0x15
 1d6:	be 89       	ldd	r27, Y+22	; 0x16
 1d8:	80 a7       	std	Z+40, r24	; 0x28
 1da:	91 a7       	std	Z+41, r25	; 0x29
 1dc:	a2 a7       	std	Z+42, r26	; 0x2a
 1de:	b3 a7       	std	Z+43, r27	; 0x2b
	
	self->output = 0;
 1e0:	14 82       	std	Z+4, r1	; 0x04
 1e2:	15 82       	std	Z+5, r1	; 0x05
 1e4:	16 82       	std	Z+6, r1	; 0x06
 1e6:	17 82       	std	Z+7, r1	; 0x07
	self->input = 0;
 1e8:	10 86       	std	Z+8, r1	; 0x08
 1ea:	11 86       	std	Z+9, r1	; 0x09
 1ec:	12 86       	std	Z+10, r1	; 0x0a
 1ee:	13 86       	std	Z+11, r1	; 0x0b
	self->last_error = 0;
 1f0:	14 8a       	std	Z+20, r1	; 0x14
 1f2:	15 8a       	std	Z+21, r1	; 0x15
 1f4:	16 8a       	std	Z+22, r1	; 0x16
 1f6:	17 8a       	std	Z+23, r1	; 0x17
	self->integrate = 0;
 1f8:	10 8e       	std	Z+24, r1	; 0x18
 1fa:	11 8e       	std	Z+25, r1	; 0x19
 1fc:	12 8e       	std	Z+26, r1	; 0x1a
 1fe:	13 8e       	std	Z+27, r1	; 0x1b
	self->derivate = 0;
 200:	14 8e       	std	Z+28, r1	; 0x1c
 202:	15 8e       	std	Z+29, r1	; 0x1d
 204:	16 8e       	std	Z+30, r1	; 0x1e
 206:	17 8e       	std	Z+31, r1	; 0x1f
	
	return;
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	bf 90       	pop	r11
 21a:	af 90       	pop	r10
 21c:	9f 90       	pop	r9
 21e:	8f 90       	pop	r8
 220:	08 95       	ret

00000222 <setup>:
/********************************************************************************
* init_gpio: Configures GPIO-pins.
*********************************************************************************/
static inline void init_gpio(void)
{
	DDRB = (1 << SERVO_CONTROL_PIN) | (1 << STATUS_LED_R_PIN) | (1 << STATUS_LED_G_PIN) | (1 << STATUS_LED_B_PIN);
 222:	8e e1       	ldi	r24, 0x1E	; 30
 224:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << M1A) | (1 << M1B);
 226:	80 e6       	ldi	r24, 0x60	; 96
 228:	8a b9       	out	0x0a, r24	; 10
* init_adc: Performs an AD-conversion to initialize the hardware in order
*			to reduce conversion time of consequent conversions.
********************************************************************************/
static inline void init_adc(void)
{
	(void)adc_read(SENSOR_CENTER_PIN);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_read>
*			  signal at PORTB1 with a frequency of 50 Hz. The duty cycle of
*			  the PWM-signal is determined by the value stored in OCR1A.
********************************************************************************/
static inline void init_servo(void)
{
	TCCR1A = (0b10 << COM1A0) | (0b10 << WGM10);
 230:	82 e8       	ldi	r24, 0x82	; 130
 232:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (0b11 << WGM12) | (0b011 << CS10);
 236:	8b e1       	ldi	r24, 0x1B	; 27
 238:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 5000;
 23c:	88 e8       	ldi	r24, 0x88	; 136
 23e:	93 e1       	ldi	r25, 0x13	; 19
 240:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 244:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// The servo motor mounted on the car accepts pulse widths from 1 to 2 ms.
	// A pulse width of 1.0 ms (1.0 ms / 4 us = 250 => OCR1A = 250) results in an angle of 180 degrees.
	// A pulse width of 1.5 ms (1.5 ms / 4 us = 375 => OCR1A = 375) results in an angle of 90 degrees.
	// A pulse width of 2.0 ms (2.0 ms / 4 us = 500 => OCR1A = 500) results in an angle of 0 degrees.
	OCR1A = SERVO_CENTER;
 248:	87 e7       	ldi	r24, 0x77	; 119
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 250:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
*						 duty cycle of M1B is determined by OCR0B.
*						 By default the duty cycle is set to 0.
*********************************************************************************/
static inline void init_motor_controller(void)
{
	TCCR0A = (0b10 << COM0A0) | (0b10 << COM0B0) | (0b01 << WGM00);
 254:	81 ea       	ldi	r24, 0xA1	; 161
 256:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0b010 << CS00);
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0x00;
 25c:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0x00;
 25e:	18 bc       	out	0x28, r1	; 40
{
	init_gpio();
	init_adc();
	init_servo();
	init_motor_controller();
	serial_init(9600);
 260:	60 e8       	ldi	r22, 0x80	; 128
 262:	75 e2       	ldi	r23, 0x25	; 37
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 3d 01 	call	0x27a	; 0x27a <serial_init>
static inline void init_interrupts(void)
{
	//EICRA = (0b11 << ISC10) | (0b11 << ISC00);
	//EIMSK = (0b11 << INT0);
	
	TIMSK0 = (1 << TOIE0);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TIMSK1 = (1 << TOIE1);
 272:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	asm("SEI");
 276:	78 94       	sei
 278:	08 95       	ret

0000027a <serial_init>:
'                                transmitteras per sekund (default = 9600 kbps).
********************************************************************************/
void serial_init(const uint32_t baud_rate_kbps)
{
	static bool serial_initialized = false;
	if (serial_initialized) return;
 27a:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <serial_initialized.2188>
 27e:	21 11       	cpse	r18, r1
 280:	41 c0       	rjmp	.+130    	; 0x304 <serial_init+0x8a>

	UCSR0B = (1 << TXEN0);
 282:	28 e0       	ldi	r18, 0x08	; 8
 284:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 288:	26 e0       	ldi	r18, 0x06	; 6
 28a:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	if (baud_rate_kbps == 0 || baud_rate_kbps == 9600)
 28e:	61 15       	cp	r22, r1
 290:	71 05       	cpc	r23, r1
 292:	81 05       	cpc	r24, r1
 294:	91 05       	cpc	r25, r1
 296:	31 f0       	breq	.+12     	; 0x2a4 <serial_init+0x2a>
 298:	60 38       	cpi	r22, 0x80	; 128
 29a:	25 e2       	ldi	r18, 0x25	; 37
 29c:	72 07       	cpc	r23, r18
 29e:	81 05       	cpc	r24, r1
 2a0:	91 05       	cpc	r25, r1
 2a2:	39 f4       	brne	.+14     	; 0x2b2 <serial_init+0x38>
	{
		UBRR0 = 103;
 2a4:	87 e6       	ldi	r24, 0x67	; 103
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2b0:	23 c0       	rjmp	.+70     	; 0x2f8 <serial_init+0x7e>
	}
	else
	{
		UBRR0 = (uint8_t)(F_CPU / (16.0 * baud_rate_kbps) - 1 + 0.5);
 2b2:	0e 94 91 02 	call	0x522	; 0x522 <__floatunsisf>
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e8       	ldi	r20, 0x80	; 128
 2bc:	51 e4       	ldi	r21, 0x41	; 65
 2be:	0e 94 1f 03 	call	0x63e	; 0x63e <__mulsf3>
 2c2:	9b 01       	movw	r18, r22
 2c4:	ac 01       	movw	r20, r24
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	74 e2       	ldi	r23, 0x24	; 36
 2ca:	84 e7       	ldi	r24, 0x74	; 116
 2cc:	9b e4       	ldi	r25, 0x4B	; 75
 2ce:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__divsf3>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	40 e8       	ldi	r20, 0x80	; 128
 2d8:	5f e3       	ldi	r21, 0x3F	; 63
 2da:	0e 94 83 01 	call	0x306	; 0x306 <__subsf3>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	5f e3       	ldi	r21, 0x3F	; 63
 2e6:	0e 94 84 01 	call	0x308	; 0x308 <__addsf3>
 2ea:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fixunssfsi>
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2f4:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	}

	UDR0 = '\r';
 2f8:	8d e0       	ldi	r24, 0x0D	; 13
 2fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	serial_initialized = true;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <serial_initialized.2188>
 304:	08 95       	ret

00000306 <__subsf3>:
 306:	50 58       	subi	r21, 0x80	; 128

00000308 <__addsf3>:
 308:	bb 27       	eor	r27, r27
 30a:	aa 27       	eor	r26, r26
 30c:	0e 94 9b 01 	call	0x336	; 0x336 <__addsf3x>
 310:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_round>
 314:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__fp_pscA>
 318:	38 f0       	brcs	.+14     	; 0x328 <__addsf3+0x20>
 31a:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_pscB>
 31e:	20 f0       	brcs	.+8      	; 0x328 <__addsf3+0x20>
 320:	39 f4       	brne	.+14     	; 0x330 <__addsf3+0x28>
 322:	9f 3f       	cpi	r25, 0xFF	; 255
 324:	19 f4       	brne	.+6      	; 0x32c <__addsf3+0x24>
 326:	26 f4       	brtc	.+8      	; 0x330 <__addsf3+0x28>
 328:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_nan>
 32c:	0e f4       	brtc	.+2      	; 0x330 <__addsf3+0x28>
 32e:	e0 95       	com	r30
 330:	e7 fb       	bst	r30, 7
 332:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_inf>

00000336 <__addsf3x>:
 336:	e9 2f       	mov	r30, r25
 338:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__fp_split3>
 33c:	58 f3       	brcs	.-42     	; 0x314 <__addsf3+0xc>
 33e:	ba 17       	cp	r27, r26
 340:	62 07       	cpc	r22, r18
 342:	73 07       	cpc	r23, r19
 344:	84 07       	cpc	r24, r20
 346:	95 07       	cpc	r25, r21
 348:	20 f0       	brcs	.+8      	; 0x352 <__addsf3x+0x1c>
 34a:	79 f4       	brne	.+30     	; 0x36a <__addsf3x+0x34>
 34c:	a6 f5       	brtc	.+104    	; 0x3b6 <__addsf3x+0x80>
 34e:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_zero>
 352:	0e f4       	brtc	.+2      	; 0x356 <__addsf3x+0x20>
 354:	e0 95       	com	r30
 356:	0b 2e       	mov	r0, r27
 358:	ba 2f       	mov	r27, r26
 35a:	a0 2d       	mov	r26, r0
 35c:	0b 01       	movw	r0, r22
 35e:	b9 01       	movw	r22, r18
 360:	90 01       	movw	r18, r0
 362:	0c 01       	movw	r0, r24
 364:	ca 01       	movw	r24, r20
 366:	a0 01       	movw	r20, r0
 368:	11 24       	eor	r1, r1
 36a:	ff 27       	eor	r31, r31
 36c:	59 1b       	sub	r21, r25
 36e:	99 f0       	breq	.+38     	; 0x396 <__addsf3x+0x60>
 370:	59 3f       	cpi	r21, 0xF9	; 249
 372:	50 f4       	brcc	.+20     	; 0x388 <__addsf3x+0x52>
 374:	50 3e       	cpi	r21, 0xE0	; 224
 376:	68 f1       	brcs	.+90     	; 0x3d2 <__addsf3x+0x9c>
 378:	1a 16       	cp	r1, r26
 37a:	f0 40       	sbci	r31, 0x00	; 0
 37c:	a2 2f       	mov	r26, r18
 37e:	23 2f       	mov	r18, r19
 380:	34 2f       	mov	r19, r20
 382:	44 27       	eor	r20, r20
 384:	58 5f       	subi	r21, 0xF8	; 248
 386:	f3 cf       	rjmp	.-26     	; 0x36e <__addsf3x+0x38>
 388:	46 95       	lsr	r20
 38a:	37 95       	ror	r19
 38c:	27 95       	ror	r18
 38e:	a7 95       	ror	r26
 390:	f0 40       	sbci	r31, 0x00	; 0
 392:	53 95       	inc	r21
 394:	c9 f7       	brne	.-14     	; 0x388 <__addsf3x+0x52>
 396:	7e f4       	brtc	.+30     	; 0x3b6 <__addsf3x+0x80>
 398:	1f 16       	cp	r1, r31
 39a:	ba 0b       	sbc	r27, r26
 39c:	62 0b       	sbc	r22, r18
 39e:	73 0b       	sbc	r23, r19
 3a0:	84 0b       	sbc	r24, r20
 3a2:	ba f0       	brmi	.+46     	; 0x3d2 <__addsf3x+0x9c>
 3a4:	91 50       	subi	r25, 0x01	; 1
 3a6:	a1 f0       	breq	.+40     	; 0x3d0 <__addsf3x+0x9a>
 3a8:	ff 0f       	add	r31, r31
 3aa:	bb 1f       	adc	r27, r27
 3ac:	66 1f       	adc	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	c2 f7       	brpl	.-16     	; 0x3a4 <__addsf3x+0x6e>
 3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <__addsf3x+0x9c>
 3b6:	ba 0f       	add	r27, r26
 3b8:	62 1f       	adc	r22, r18
 3ba:	73 1f       	adc	r23, r19
 3bc:	84 1f       	adc	r24, r20
 3be:	48 f4       	brcc	.+18     	; 0x3d2 <__addsf3x+0x9c>
 3c0:	87 95       	ror	r24
 3c2:	77 95       	ror	r23
 3c4:	67 95       	ror	r22
 3c6:	b7 95       	ror	r27
 3c8:	f7 95       	ror	r31
 3ca:	9e 3f       	cpi	r25, 0xFE	; 254
 3cc:	08 f0       	brcs	.+2      	; 0x3d0 <__addsf3x+0x9a>
 3ce:	b0 cf       	rjmp	.-160    	; 0x330 <__addsf3+0x28>
 3d0:	93 95       	inc	r25
 3d2:	88 0f       	add	r24, r24
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <__addsf3x+0xa2>
 3d6:	99 27       	eor	r25, r25
 3d8:	ee 0f       	add	r30, r30
 3da:	97 95       	ror	r25
 3dc:	87 95       	ror	r24
 3de:	08 95       	ret

000003e0 <__divsf3>:
 3e0:	0e 94 04 02 	call	0x408	; 0x408 <__divsf3x>
 3e4:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_round>
 3e8:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_pscB>
 3ec:	58 f0       	brcs	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ee:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__fp_pscA>
 3f2:	40 f0       	brcs	.+16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f4:	29 f4       	brne	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f6:	5f 3f       	cpi	r21, 0xFF	; 255
 3f8:	29 f0       	breq	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_inf>
 3fe:	51 11       	cpse	r21, r1
 400:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_szero>
 404:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_nan>

00000408 <__divsf3x>:
 408:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__fp_split3>
 40c:	68 f3       	brcs	.-38     	; 0x3e8 <__divsf3+0x8>

0000040e <__divsf3_pse>:
 40e:	99 23       	and	r25, r25
 410:	b1 f3       	breq	.-20     	; 0x3fe <__divsf3+0x1e>
 412:	55 23       	and	r21, r21
 414:	91 f3       	breq	.-28     	; 0x3fa <__divsf3+0x1a>
 416:	95 1b       	sub	r25, r21
 418:	55 0b       	sbc	r21, r21
 41a:	bb 27       	eor	r27, r27
 41c:	aa 27       	eor	r26, r26
 41e:	62 17       	cp	r22, r18
 420:	73 07       	cpc	r23, r19
 422:	84 07       	cpc	r24, r20
 424:	38 f0       	brcs	.+14     	; 0x434 <__divsf3_pse+0x26>
 426:	9f 5f       	subi	r25, 0xFF	; 255
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	44 1f       	adc	r20, r20
 430:	aa 1f       	adc	r26, r26
 432:	a9 f3       	breq	.-22     	; 0x41e <__divsf3_pse+0x10>
 434:	35 d0       	rcall	.+106    	; 0x4a0 <__divsf3_pse+0x92>
 436:	0e 2e       	mov	r0, r30
 438:	3a f0       	brmi	.+14     	; 0x448 <__divsf3_pse+0x3a>
 43a:	e0 e8       	ldi	r30, 0x80	; 128
 43c:	32 d0       	rcall	.+100    	; 0x4a2 <__divsf3_pse+0x94>
 43e:	91 50       	subi	r25, 0x01	; 1
 440:	50 40       	sbci	r21, 0x00	; 0
 442:	e6 95       	lsr	r30
 444:	00 1c       	adc	r0, r0
 446:	ca f7       	brpl	.-14     	; 0x43a <__divsf3_pse+0x2c>
 448:	2b d0       	rcall	.+86     	; 0x4a0 <__divsf3_pse+0x92>
 44a:	fe 2f       	mov	r31, r30
 44c:	29 d0       	rcall	.+82     	; 0x4a0 <__divsf3_pse+0x92>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	88 1f       	adc	r24, r24
 454:	bb 1f       	adc	r27, r27
 456:	26 17       	cp	r18, r22
 458:	37 07       	cpc	r19, r23
 45a:	48 07       	cpc	r20, r24
 45c:	ab 07       	cpc	r26, r27
 45e:	b0 e8       	ldi	r27, 0x80	; 128
 460:	09 f0       	breq	.+2      	; 0x464 <__divsf3_pse+0x56>
 462:	bb 0b       	sbc	r27, r27
 464:	80 2d       	mov	r24, r0
 466:	bf 01       	movw	r22, r30
 468:	ff 27       	eor	r31, r31
 46a:	93 58       	subi	r25, 0x83	; 131
 46c:	5f 4f       	sbci	r21, 0xFF	; 255
 46e:	3a f0       	brmi	.+14     	; 0x47e <__divsf3_pse+0x70>
 470:	9e 3f       	cpi	r25, 0xFE	; 254
 472:	51 05       	cpc	r21, r1
 474:	78 f0       	brcs	.+30     	; 0x494 <__divsf3_pse+0x86>
 476:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_inf>
 47a:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_szero>
 47e:	5f 3f       	cpi	r21, 0xFF	; 255
 480:	e4 f3       	brlt	.-8      	; 0x47a <__divsf3_pse+0x6c>
 482:	98 3e       	cpi	r25, 0xE8	; 232
 484:	d4 f3       	brlt	.-12     	; 0x47a <__divsf3_pse+0x6c>
 486:	86 95       	lsr	r24
 488:	77 95       	ror	r23
 48a:	67 95       	ror	r22
 48c:	b7 95       	ror	r27
 48e:	f7 95       	ror	r31
 490:	9f 5f       	subi	r25, 0xFF	; 255
 492:	c9 f7       	brne	.-14     	; 0x486 <__divsf3_pse+0x78>
 494:	88 0f       	add	r24, r24
 496:	91 1d       	adc	r25, r1
 498:	96 95       	lsr	r25
 49a:	87 95       	ror	r24
 49c:	97 f9       	bld	r25, 7
 49e:	08 95       	ret
 4a0:	e1 e0       	ldi	r30, 0x01	; 1
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	bb 1f       	adc	r27, r27
 4aa:	62 17       	cp	r22, r18
 4ac:	73 07       	cpc	r23, r19
 4ae:	84 07       	cpc	r24, r20
 4b0:	ba 07       	cpc	r27, r26
 4b2:	20 f0       	brcs	.+8      	; 0x4bc <__divsf3_pse+0xae>
 4b4:	62 1b       	sub	r22, r18
 4b6:	73 0b       	sbc	r23, r19
 4b8:	84 0b       	sbc	r24, r20
 4ba:	ba 0b       	sbc	r27, r26
 4bc:	ee 1f       	adc	r30, r30
 4be:	88 f7       	brcc	.-30     	; 0x4a2 <__divsf3_pse+0x94>
 4c0:	e0 95       	com	r30
 4c2:	08 95       	ret

000004c4 <__fixunssfsi>:
 4c4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_splitA>
 4c8:	88 f0       	brcs	.+34     	; 0x4ec <__fixunssfsi+0x28>
 4ca:	9f 57       	subi	r25, 0x7F	; 127
 4cc:	98 f0       	brcs	.+38     	; 0x4f4 <__fixunssfsi+0x30>
 4ce:	b9 2f       	mov	r27, r25
 4d0:	99 27       	eor	r25, r25
 4d2:	b7 51       	subi	r27, 0x17	; 23
 4d4:	b0 f0       	brcs	.+44     	; 0x502 <__fixunssfsi+0x3e>
 4d6:	e1 f0       	breq	.+56     	; 0x510 <__fixunssfsi+0x4c>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	1a f0       	brmi	.+6      	; 0x4e8 <__fixunssfsi+0x24>
 4e2:	ba 95       	dec	r27
 4e4:	c9 f7       	brne	.-14     	; 0x4d8 <__fixunssfsi+0x14>
 4e6:	14 c0       	rjmp	.+40     	; 0x510 <__fixunssfsi+0x4c>
 4e8:	b1 30       	cpi	r27, 0x01	; 1
 4ea:	91 f0       	breq	.+36     	; 0x510 <__fixunssfsi+0x4c>
 4ec:	0e 94 18 03 	call	0x630	; 0x630 <__fp_zero>
 4f0:	b1 e0       	ldi	r27, 0x01	; 1
 4f2:	08 95       	ret
 4f4:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_zero>
 4f8:	67 2f       	mov	r22, r23
 4fa:	78 2f       	mov	r23, r24
 4fc:	88 27       	eor	r24, r24
 4fe:	b8 5f       	subi	r27, 0xF8	; 248
 500:	39 f0       	breq	.+14     	; 0x510 <__fixunssfsi+0x4c>
 502:	b9 3f       	cpi	r27, 0xF9	; 249
 504:	cc f3       	brlt	.-14     	; 0x4f8 <__fixunssfsi+0x34>
 506:	86 95       	lsr	r24
 508:	77 95       	ror	r23
 50a:	67 95       	ror	r22
 50c:	b3 95       	inc	r27
 50e:	d9 f7       	brne	.-10     	; 0x506 <__fixunssfsi+0x42>
 510:	3e f4       	brtc	.+14     	; 0x520 <__fixunssfsi+0x5c>
 512:	90 95       	com	r25
 514:	80 95       	com	r24
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	08 95       	ret

00000522 <__floatunsisf>:
 522:	e8 94       	clt
 524:	09 c0       	rjmp	.+18     	; 0x538 <__floatsisf+0x12>

00000526 <__floatsisf>:
 526:	97 fb       	bst	r25, 7
 528:	3e f4       	brtc	.+14     	; 0x538 <__floatsisf+0x12>
 52a:	90 95       	com	r25
 52c:	80 95       	com	r24
 52e:	70 95       	com	r23
 530:	61 95       	neg	r22
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	99 23       	and	r25, r25
 53a:	a9 f0       	breq	.+42     	; 0x566 <__floatsisf+0x40>
 53c:	f9 2f       	mov	r31, r25
 53e:	96 e9       	ldi	r25, 0x96	; 150
 540:	bb 27       	eor	r27, r27
 542:	93 95       	inc	r25
 544:	f6 95       	lsr	r31
 546:	87 95       	ror	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b7 95       	ror	r27
 54e:	f1 11       	cpse	r31, r1
 550:	f8 cf       	rjmp	.-16     	; 0x542 <__floatsisf+0x1c>
 552:	fa f4       	brpl	.+62     	; 0x592 <__floatsisf+0x6c>
 554:	bb 0f       	add	r27, r27
 556:	11 f4       	brne	.+4      	; 0x55c <__floatsisf+0x36>
 558:	60 ff       	sbrs	r22, 0
 55a:	1b c0       	rjmp	.+54     	; 0x592 <__floatsisf+0x6c>
 55c:	6f 5f       	subi	r22, 0xFF	; 255
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	8f 4f       	sbci	r24, 0xFF	; 255
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	16 c0       	rjmp	.+44     	; 0x592 <__floatsisf+0x6c>
 566:	88 23       	and	r24, r24
 568:	11 f0       	breq	.+4      	; 0x56e <__floatsisf+0x48>
 56a:	96 e9       	ldi	r25, 0x96	; 150
 56c:	11 c0       	rjmp	.+34     	; 0x590 <__floatsisf+0x6a>
 56e:	77 23       	and	r23, r23
 570:	21 f0       	breq	.+8      	; 0x57a <__floatsisf+0x54>
 572:	9e e8       	ldi	r25, 0x8E	; 142
 574:	87 2f       	mov	r24, r23
 576:	76 2f       	mov	r23, r22
 578:	05 c0       	rjmp	.+10     	; 0x584 <__floatsisf+0x5e>
 57a:	66 23       	and	r22, r22
 57c:	71 f0       	breq	.+28     	; 0x59a <__floatsisf+0x74>
 57e:	96 e8       	ldi	r25, 0x86	; 134
 580:	86 2f       	mov	r24, r22
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	2a f0       	brmi	.+10     	; 0x592 <__floatsisf+0x6c>
 588:	9a 95       	dec	r25
 58a:	66 0f       	add	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	88 1f       	adc	r24, r24
 590:	da f7       	brpl	.-10     	; 0x588 <__floatsisf+0x62>
 592:	88 0f       	add	r24, r24
 594:	96 95       	lsr	r25
 596:	87 95       	ror	r24
 598:	97 f9       	bld	r25, 7
 59a:	08 95       	ret

0000059c <__fp_inf>:
 59c:	97 f9       	bld	r25, 7
 59e:	9f 67       	ori	r25, 0x7F	; 127
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	08 95       	ret

000005a8 <__fp_nan>:
 5a8:	9f ef       	ldi	r25, 0xFF	; 255
 5aa:	80 ec       	ldi	r24, 0xC0	; 192
 5ac:	08 95       	ret

000005ae <__fp_pscA>:
 5ae:	00 24       	eor	r0, r0
 5b0:	0a 94       	dec	r0
 5b2:	16 16       	cp	r1, r22
 5b4:	17 06       	cpc	r1, r23
 5b6:	18 06       	cpc	r1, r24
 5b8:	09 06       	cpc	r0, r25
 5ba:	08 95       	ret

000005bc <__fp_pscB>:
 5bc:	00 24       	eor	r0, r0
 5be:	0a 94       	dec	r0
 5c0:	12 16       	cp	r1, r18
 5c2:	13 06       	cpc	r1, r19
 5c4:	14 06       	cpc	r1, r20
 5c6:	05 06       	cpc	r0, r21
 5c8:	08 95       	ret

000005ca <__fp_round>:
 5ca:	09 2e       	mov	r0, r25
 5cc:	03 94       	inc	r0
 5ce:	00 0c       	add	r0, r0
 5d0:	11 f4       	brne	.+4      	; 0x5d6 <__fp_round+0xc>
 5d2:	88 23       	and	r24, r24
 5d4:	52 f0       	brmi	.+20     	; 0x5ea <__fp_round+0x20>
 5d6:	bb 0f       	add	r27, r27
 5d8:	40 f4       	brcc	.+16     	; 0x5ea <__fp_round+0x20>
 5da:	bf 2b       	or	r27, r31
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <__fp_round+0x18>
 5de:	60 ff       	sbrs	r22, 0
 5e0:	04 c0       	rjmp	.+8      	; 0x5ea <__fp_round+0x20>
 5e2:	6f 5f       	subi	r22, 0xFF	; 255
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	8f 4f       	sbci	r24, 0xFF	; 255
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	08 95       	ret

000005ec <__fp_split3>:
 5ec:	57 fd       	sbrc	r21, 7
 5ee:	90 58       	subi	r25, 0x80	; 128
 5f0:	44 0f       	add	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	59 f0       	breq	.+22     	; 0x60c <__fp_splitA+0x10>
 5f6:	5f 3f       	cpi	r21, 0xFF	; 255
 5f8:	71 f0       	breq	.+28     	; 0x616 <__fp_splitA+0x1a>
 5fa:	47 95       	ror	r20

000005fc <__fp_splitA>:
 5fc:	88 0f       	add	r24, r24
 5fe:	97 fb       	bst	r25, 7
 600:	99 1f       	adc	r25, r25
 602:	61 f0       	breq	.+24     	; 0x61c <__fp_splitA+0x20>
 604:	9f 3f       	cpi	r25, 0xFF	; 255
 606:	79 f0       	breq	.+30     	; 0x626 <__fp_splitA+0x2a>
 608:	87 95       	ror	r24
 60a:	08 95       	ret
 60c:	12 16       	cp	r1, r18
 60e:	13 06       	cpc	r1, r19
 610:	14 06       	cpc	r1, r20
 612:	55 1f       	adc	r21, r21
 614:	f2 cf       	rjmp	.-28     	; 0x5fa <__fp_split3+0xe>
 616:	46 95       	lsr	r20
 618:	f1 df       	rcall	.-30     	; 0x5fc <__fp_splitA>
 61a:	08 c0       	rjmp	.+16     	; 0x62c <__fp_splitA+0x30>
 61c:	16 16       	cp	r1, r22
 61e:	17 06       	cpc	r1, r23
 620:	18 06       	cpc	r1, r24
 622:	99 1f       	adc	r25, r25
 624:	f1 cf       	rjmp	.-30     	; 0x608 <__fp_splitA+0xc>
 626:	86 95       	lsr	r24
 628:	71 05       	cpc	r23, r1
 62a:	61 05       	cpc	r22, r1
 62c:	08 94       	sec
 62e:	08 95       	ret

00000630 <__fp_zero>:
 630:	e8 94       	clt

00000632 <__fp_szero>:
 632:	bb 27       	eor	r27, r27
 634:	66 27       	eor	r22, r22
 636:	77 27       	eor	r23, r23
 638:	cb 01       	movw	r24, r22
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret

0000063e <__mulsf3>:
 63e:	0e 94 32 03 	call	0x664	; 0x664 <__mulsf3x>
 642:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_round>
 646:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__fp_pscA>
 64a:	38 f0       	brcs	.+14     	; 0x65a <__mulsf3+0x1c>
 64c:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_pscB>
 650:	20 f0       	brcs	.+8      	; 0x65a <__mulsf3+0x1c>
 652:	95 23       	and	r25, r21
 654:	11 f0       	breq	.+4      	; 0x65a <__mulsf3+0x1c>
 656:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_inf>
 65a:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_nan>
 65e:	11 24       	eor	r1, r1
 660:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_szero>

00000664 <__mulsf3x>:
 664:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__fp_split3>
 668:	70 f3       	brcs	.-36     	; 0x646 <__mulsf3+0x8>

0000066a <__mulsf3_pse>:
 66a:	95 9f       	mul	r25, r21
 66c:	c1 f3       	breq	.-16     	; 0x65e <__mulsf3+0x20>
 66e:	95 0f       	add	r25, r21
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	55 1f       	adc	r21, r21
 674:	62 9f       	mul	r22, r18
 676:	f0 01       	movw	r30, r0
 678:	72 9f       	mul	r23, r18
 67a:	bb 27       	eor	r27, r27
 67c:	f0 0d       	add	r31, r0
 67e:	b1 1d       	adc	r27, r1
 680:	63 9f       	mul	r22, r19
 682:	aa 27       	eor	r26, r26
 684:	f0 0d       	add	r31, r0
 686:	b1 1d       	adc	r27, r1
 688:	aa 1f       	adc	r26, r26
 68a:	64 9f       	mul	r22, r20
 68c:	66 27       	eor	r22, r22
 68e:	b0 0d       	add	r27, r0
 690:	a1 1d       	adc	r26, r1
 692:	66 1f       	adc	r22, r22
 694:	82 9f       	mul	r24, r18
 696:	22 27       	eor	r18, r18
 698:	b0 0d       	add	r27, r0
 69a:	a1 1d       	adc	r26, r1
 69c:	62 1f       	adc	r22, r18
 69e:	73 9f       	mul	r23, r19
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	62 1f       	adc	r22, r18
 6a6:	83 9f       	mul	r24, r19
 6a8:	a0 0d       	add	r26, r0
 6aa:	61 1d       	adc	r22, r1
 6ac:	22 1f       	adc	r18, r18
 6ae:	74 9f       	mul	r23, r20
 6b0:	33 27       	eor	r19, r19
 6b2:	a0 0d       	add	r26, r0
 6b4:	61 1d       	adc	r22, r1
 6b6:	23 1f       	adc	r18, r19
 6b8:	84 9f       	mul	r24, r20
 6ba:	60 0d       	add	r22, r0
 6bc:	21 1d       	adc	r18, r1
 6be:	82 2f       	mov	r24, r18
 6c0:	76 2f       	mov	r23, r22
 6c2:	6a 2f       	mov	r22, r26
 6c4:	11 24       	eor	r1, r1
 6c6:	9f 57       	subi	r25, 0x7F	; 127
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	9a f0       	brmi	.+38     	; 0x6f2 <__mulsf3_pse+0x88>
 6cc:	f1 f0       	breq	.+60     	; 0x70a <__mulsf3_pse+0xa0>
 6ce:	88 23       	and	r24, r24
 6d0:	4a f0       	brmi	.+18     	; 0x6e4 <__mulsf3_pse+0x7a>
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	bb 1f       	adc	r27, r27
 6d8:	66 1f       	adc	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	91 50       	subi	r25, 0x01	; 1
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	a9 f7       	brne	.-22     	; 0x6ce <__mulsf3_pse+0x64>
 6e4:	9e 3f       	cpi	r25, 0xFE	; 254
 6e6:	51 05       	cpc	r21, r1
 6e8:	80 f0       	brcs	.+32     	; 0x70a <__mulsf3_pse+0xa0>
 6ea:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__fp_inf>
 6ee:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_szero>
 6f2:	5f 3f       	cpi	r21, 0xFF	; 255
 6f4:	e4 f3       	brlt	.-8      	; 0x6ee <__mulsf3_pse+0x84>
 6f6:	98 3e       	cpi	r25, 0xE8	; 232
 6f8:	d4 f3       	brlt	.-12     	; 0x6ee <__mulsf3_pse+0x84>
 6fa:	86 95       	lsr	r24
 6fc:	77 95       	ror	r23
 6fe:	67 95       	ror	r22
 700:	b7 95       	ror	r27
 702:	f7 95       	ror	r31
 704:	e7 95       	ror	r30
 706:	9f 5f       	subi	r25, 0xFF	; 255
 708:	c1 f7       	brne	.-16     	; 0x6fa <__mulsf3_pse+0x90>
 70a:	fe 2b       	or	r31, r30
 70c:	88 0f       	add	r24, r24
 70e:	91 1d       	adc	r25, r1
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret

00000718 <_exit>:
 718:	f8 94       	cli

0000071a <__stop_program>:
 71a:	ff cf       	rjmp	.-2      	; 0x71a <__stop_program>
